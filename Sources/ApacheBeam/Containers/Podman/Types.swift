/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 *  License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an  AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Check auth configuration
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    func SystemAuth(_ input: Operations.SystemAuth.Input) async throws -> Operations.SystemAuth.Output
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    func ImageBuild(_ input: Operations.ImageBuild.Input) async throws -> Operations.ImageBuild.Output
    /// New Image
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    func ImageCommit(_ input: Operations.ImageCommit.Input) async throws -> Operations.ImageCommit.Output
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{name}`.
    /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)`.
    func ContainerDelete(_ input: Operations.ContainerDelete.Input) async throws -> Operations.ContainerDelete.Output
    /// Get files from a container
    ///
    /// Get a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)`.
    func ContainerArchive(_ input: Operations.ContainerArchive.Input) async throws -> Operations.ContainerArchive.Output
    /// Put files into a container
    ///
    /// Put a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)`.
    func PutContainerArchive(_ input: Operations.PutContainerArchive.Input) async throws -> Operations.PutContainerArchive.Output
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// It uses the same stream format as docker, see the libpod attach endpoint for a description of the format.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)`.
    func ContainerAttach(_ input: Operations.ContainerAttach.Input) async throws -> Operations.ContainerAttach.Output
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)`.
    func ContainerExec(_ input: Operations.ContainerExec.Input) async throws -> Operations.ContainerExec.Output
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{name}/export`.
    /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)`.
    func ContainerExport(_ input: Operations.ContainerExport.Input) async throws -> Operations.ContainerExport.Output
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/json`.
    /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)`.
    func ContainerInspect(_ input: Operations.ContainerInspect.Input) async throws -> Operations.ContainerInspect.Output
    /// Kill container
    ///
    /// Signal to send to the container as an integer or string (e.g. SIGINT)
    ///
    /// - Remark: HTTP `POST /containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)`.
    func ContainerKill(_ input: Operations.ContainerKill.Input) async throws -> Operations.ContainerKill.Output
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)`.
    func ContainerLogs(_ input: Operations.ContainerLogs.Input) async throws -> Operations.ContainerLogs.Output
    /// Pause container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)`.
    func ContainerPause(_ input: Operations.ContainerPause.Input) async throws -> Operations.ContainerPause.Output
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)`.
    func ContainerRename(_ input: Operations.ContainerRename.Input) async throws -> Operations.ContainerRename.Output
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)`.
    func ContainerResize(_ input: Operations.ContainerResize.Input) async throws -> Operations.ContainerResize.Output
    /// Restart container
    ///
    /// - Remark: HTTP `POST /containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)`.
    func ContainerRestart(_ input: Operations.ContainerRestart.Input) async throws -> Operations.ContainerRestart.Output
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/start`.
    /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)`.
    func ContainerStart(_ input: Operations.ContainerStart.Input) async throws -> Operations.ContainerStart.Output
    /// Get stats for a container
    ///
    /// This returns a live stream of a containerâ€™s resource usage statistics.
    ///
    /// - Remark: HTTP `GET /containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)`.
    func ContainerStats(_ input: Operations.ContainerStats.Input) async throws -> Operations.ContainerStats.Output
    /// Stop a container
    ///
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)`.
    func ContainerStop(_ input: Operations.ContainerStop.Input) async throws -> Operations.ContainerStop.Output
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/top`.
    /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)`.
    func ContainerTop(_ input: Operations.ContainerTop.Input) async throws -> Operations.ContainerTop.Output
    /// Unpause container
    ///
    /// Resume a paused container
    ///
    /// - Remark: HTTP `POST /containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)`.
    func ContainerUnpause(_ input: Operations.ContainerUnpause.Input) async throws -> Operations.ContainerUnpause.Output
    /// Update configuration of an existing container
    ///
    /// Change configuration settings for an existing container without requiring recreation.
    ///
    /// - Remark: HTTP `POST /containers/{name}/update`.
    /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)`.
    func ContainerUpdate(_ input: Operations.ContainerUpdate.Input) async throws -> Operations.ContainerUpdate.Output
    /// Wait on a container
    ///
    /// Block until a container stops or given condition is met.
    ///
    /// - Remark: HTTP `POST /containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)`.
    func ContainerWait(_ input: Operations.ContainerWait.Input) async throws -> Operations.ContainerWait.Output
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    func ContainerCreate(_ input: Operations.ContainerCreate.Input) async throws -> Operations.ContainerCreate.Output
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    func ContainerList(_ input: Operations.ContainerList.Input) async throws -> Operations.ContainerList.Output
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    func ContainerPrune(_ input: Operations.ContainerPrune.Input) async throws -> Operations.ContainerPrune.Output
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    func SystemEvents(_ input: Operations.SystemEvents.Input) async throws -> Operations.SystemEvents.Output
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    func ExecInspect(_ input: Operations.ExecInspect.Input) async throws -> Operations.ExecInspect.Output
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    func ExecResize(_ input: Operations.ExecResize.Input) async throws -> Operations.ExecResize.Output
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    func ExecStart(_ input: Operations.ExecStart.Input) async throws -> Operations.ExecStart.Output
    /// Remove Image
    ///
    /// Delete an image from local storage
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    func ImageDelete(_ input: Operations.ImageDelete.Input) async throws -> Operations.ImageDelete.Output
    /// Export an image
    ///
    /// Export an image in tarball format
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    func ImageGet(_ input: Operations.ImageGet.Input) async throws -> Operations.ImageGet.Output
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    func ImageHistory(_ input: Operations.ImageHistory.Input) async throws -> Operations.ImageHistory.Output
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    func ImageInspect(_ input: Operations.ImageInspect.Input) async throws -> Operations.ImageInspect.Output
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    func ImagePush(_ input: Operations.ImagePush.Input) async throws -> Operations.ImagePush.Output
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    func ImageTag(_ input: Operations.ImageTag.Input) async throws -> Operations.ImageTag.Output
    /// Create an image
    ///
    /// Create an image by either pulling it from a registry or importing it.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    func ImageCreate(_ input: Operations.ImageCreate.Input) async throws -> Operations.ImageCreate.Output
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image repositories
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    func ImageGetAll(_ input: Operations.ImageGetAll.Input) async throws -> Operations.ImageGetAll.Output
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    func ImageList(_ input: Operations.ImageList.Input) async throws -> Operations.ImageList.Output
    /// Import image
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    func ImageLoad(_ input: Operations.ImageLoad.Input) async throws -> Operations.ImageLoad.Output
    /// Prune unused images
    ///
    /// Remove images from local storage that are not being used by a container
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    func ImagePrune(_ input: Operations.ImagePrune.Input) async throws -> Operations.ImagePrune.Output
    /// Search images
    ///
    /// Search registries for an image
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    func ImageSearch(_ input: Operations.ImageSearch.Input) async throws -> Operations.ImageSearch.Output
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    func SystemInfo(_ input: Operations.SystemInfo.Input) async throws -> Operations.SystemInfo.Output
    /// Ping service
    ///
    /// Return protocol information in response headers.
    /// `HEAD /libpod/_ping` is also supported.
    /// `/_ping` is available for compatibility with other engines.
    /// The '_ping' endpoints are not versioned.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/_ping`.
    /// - Remark: Generated from `#/paths//libpod/_ping/get(SystemPing)`.
    func SystemPing(_ input: Operations.SystemPing.Input) async throws -> Operations.SystemPing.Output
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /libpod/build`.
    /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)`.
    func ImageBuildLibpod(_ input: Operations.ImageBuildLibpod.Input) async throws -> Operations.ImageBuildLibpod.Output
    /// Commit
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /libpod/commit`.
    /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)`.
    func ImageCommitLibpod(_ input: Operations.ImageCommitLibpod.Input) async throws -> Operations.ImageCommitLibpod.Output
    /// Delete container
    ///
    /// Delete container
    ///
    /// - Remark: HTTP `DELETE /libpod/containers/{name}`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)`.
    func ContainerDeleteLibpod(_ input: Operations.ContainerDeleteLibpod.Input) async throws -> Operations.ContainerDeleteLibpod.Output
    /// Copy files from a container
    ///
    /// Copy a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)`.
    func ContainerArchiveLibpod(_ input: Operations.ContainerArchiveLibpod.Input) async throws -> Operations.ContainerArchiveLibpod.Output
    /// Copy files into a container
    ///
    /// Copy a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)`.
    func PutContainerArchiveLibpod(_ input: Operations.PutContainerArchiveLibpod.Input) async throws -> Operations.PutContainerArchiveLibpod.Output
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the service for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To inform potential proxies about connection hijacking, the client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /v4.6.0/libpod/containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The service will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled for the container,
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// (starting with v4.7.0, previously application/vnd.docker.raw-stream was always used)
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information about the output stream type and the size of
    /// the payload.
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which contains the specified number of
    /// bytes as written in the size.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled for the container,
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)`.
    func ContainerAttachLibpod(_ input: Operations.ContainerAttachLibpod.Input) async throws -> Operations.ContainerAttachLibpod.Output
    /// Report on changes to container's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)`.
    func ContainerChangesLibpod(_ input: Operations.ContainerChangesLibpod.Input) async throws -> Operations.ContainerChangesLibpod.Output
    /// Checkpoint a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/checkpoint`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)`.
    func ContainerCheckpointLibpod(_ input: Operations.ContainerCheckpointLibpod.Input) async throws -> Operations.ContainerCheckpointLibpod.Output
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)`.
    func ContainerExecLibpod(_ input: Operations.ContainerExecLibpod.Input) async throws -> Operations.ContainerExecLibpod.Output
    /// Check if container exists
    ///
    /// Quick way to determine if a container exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)`.
    func ContainerExistsLibpod(_ input: Operations.ContainerExistsLibpod.Input) async throws -> Operations.ContainerExistsLibpod.Output
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/export`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)`.
    func ContainerExportLibpod(_ input: Operations.ContainerExportLibpod.Input) async throws -> Operations.ContainerExportLibpod.Output
    /// Run a container's healthcheck
    ///
    /// Execute the defined healthcheck and return information about the results
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/healthcheck`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)`.
    func ContainerHealthcheckLibpod(_ input: Operations.ContainerHealthcheckLibpod.Input) async throws -> Operations.ContainerHealthcheckLibpod.Output
    /// Initialize a container
    ///
    /// Performs all tasks necessary for initializing the container but does not start the container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/init`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)`.
    func ContainerInitLibpod(_ input: Operations.ContainerInitLibpod.Input) async throws -> Operations.ContainerInitLibpod.Output
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)`.
    func ContainerInspectLibpod(_ input: Operations.ContainerInspectLibpod.Input) async throws -> Operations.ContainerInspectLibpod.Output
    /// Kill container
    ///
    /// send a signal to a container, defaults to killing the container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)`.
    func ContainerKillLibpod(_ input: Operations.ContainerKillLibpod.Input) async throws -> Operations.ContainerKillLibpod.Output
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// The stream format is the same as described in the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)`.
    func ContainerLogsLibpod(_ input: Operations.ContainerLogsLibpod.Input) async throws -> Operations.ContainerLogsLibpod.Output
    /// Mount a container
    ///
    /// Mount a container to the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/mount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)`.
    func ContainerMountLibpod(_ input: Operations.ContainerMountLibpod.Input) async throws -> Operations.ContainerMountLibpod.Output
    /// Pause a container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)`.
    func ContainerPauseLibpod(_ input: Operations.ContainerPauseLibpod.Input) async throws -> Operations.ContainerPauseLibpod.Output
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)`.
    func ContainerRenameLibpod(_ input: Operations.ContainerRenameLibpod.Input) async throws -> Operations.ContainerRenameLibpod.Output
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)`.
    func ContainerResizeLibpod(_ input: Operations.ContainerResizeLibpod.Input) async throws -> Operations.ContainerResizeLibpod.Output
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)`.
    func ContainerRestartLibpod(_ input: Operations.ContainerRestartLibpod.Input) async throws -> Operations.ContainerRestartLibpod.Output
    /// Restore a container
    ///
    /// Restore a container from a checkpoint.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restore`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)`.
    func ContainerRestoreLibpod(_ input: Operations.ContainerRestoreLibpod.Input) async throws -> Operations.ContainerRestoreLibpod.Output
    /// Start a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)`.
    func ContainerStartLibpod(_ input: Operations.ContainerStartLibpod.Input) async throws -> Operations.ContainerStartLibpod.Output
    /// Get stats for a container
    ///
    /// DEPRECATED. This endpoint will be removed with the next major release. Please use /libpod/containers/stats instead.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)`.
    func ContainerStatsLibpod(_ input: Operations.ContainerStatsLibpod.Input) async throws -> Operations.ContainerStatsLibpod.Output
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)`.
    func ContainerStopLibpod(_ input: Operations.ContainerStopLibpod.Input) async throws -> Operations.ContainerStopLibpod.Output
    /// List processes
    ///
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)`.
    func ContainerTopLibpod(_ input: Operations.ContainerTopLibpod.Input) async throws -> Operations.ContainerTopLibpod.Output
    /// Unmount a container
    ///
    /// Unmount a container from the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unmount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)`.
    func ContainerUnmountLibpod(_ input: Operations.ContainerUnmountLibpod.Input) async throws -> Operations.ContainerUnmountLibpod.Output
    /// Unpause Container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)`.
    func ContainerUnpauseLibpod(_ input: Operations.ContainerUnpauseLibpod.Input) async throws -> Operations.ContainerUnpauseLibpod.Output
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks
    ///
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)`.
    func ContainerUpdateLibpod(_ input: Operations.ContainerUpdateLibpod.Input) async throws -> Operations.ContainerUpdateLibpod.Output
    /// Wait on a container
    ///
    /// Wait on a container to meet a given condition
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)`.
    func ContainerWaitLibpod(_ input: Operations.ContainerWaitLibpod.Input) async throws -> Operations.ContainerWaitLibpod.Output
    /// Create a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/create`.
    /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)`.
    func ContainerCreateLibpod(_ input: Operations.ContainerCreateLibpod.Input) async throws -> Operations.ContainerCreateLibpod.Output
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /libpod/containers/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)`.
    func ContainerListLibpod(_ input: Operations.ContainerListLibpod.Input) async throws -> Operations.ContainerListLibpod.Output
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /libpod/containers/prune`.
    /// - Remark: Generated from `#/paths//libpod/containers/prune/post(ContainerPruneLibpod)`.
    func ContainerPruneLibpod(_ input: Operations.ContainerPruneLibpod.Input) async throws -> Operations.ContainerPruneLibpod.Output
    /// Show mounted containers
    ///
    /// Lists all mounted containers mount points
    ///
    /// - Remark: HTTP `GET /libpod/containers/showmounted`.
    /// - Remark: Generated from `#/paths//libpod/containers/showmounted/get(ContainerShowMountedLibpod)`.
    func ContainerShowMountedLibpod(_ input: Operations.ContainerShowMountedLibpod.Input) async throws -> Operations.ContainerShowMountedLibpod.Output
    /// Get stats for one or more containers
    ///
    /// Return a live stream of resource usage statistics of one or more container. If no container is specified, the statistics of all containers are returned.
    ///
    /// - Remark: HTTP `GET /libpod/containers/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)`.
    func ContainersStatsAllLibpod(_ input: Operations.ContainersStatsAllLibpod.Input) async throws -> Operations.ContainersStatsAllLibpod.Output
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /libpod/events`.
    /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)`.
    func SystemEventsLibpod(_ input: Operations.SystemEventsLibpod.Input) async throws -> Operations.SystemEventsLibpod.Output
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /libpod/exec/{id}/json`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)`.
    func ExecInspectLibpod(_ input: Operations.ExecInspectLibpod.Input) async throws -> Operations.ExecInspectLibpod.Output
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)`.
    func ExecResizeLibpod(_ input: Operations.ExecResizeLibpod.Input) async throws -> Operations.ExecResizeLibpod.Output
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command.
    /// Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/start`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)`.
    func ExecStartLibpod(_ input: Operations.ExecStartLibpod.Input) async throws -> Operations.ExecStartLibpod.Output
    /// Generate Systemd Units
    ///
    /// Generate Systemd Units based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/{name}/systemd`.
    /// - Remark: Generated from `#/paths//libpod/generate/{name}/systemd/get(GenerateSystemdLibpod)`.
    func GenerateSystemdLibpod(_ input: Operations.GenerateSystemdLibpod.Input) async throws -> Operations.GenerateSystemdLibpod.Output
    /// Generate a Kubernetes YAML file.
    ///
    /// Generate Kubernetes YAML based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/kube`.
    /// - Remark: Generated from `#/paths//libpod/generate/kube/get(GenerateKubeLibpod)`.
    func GenerateKubeLibpod(_ input: Operations.GenerateKubeLibpod.Input) async throws -> Operations.GenerateKubeLibpod.Output
    /// Remove an image from the local storage.
    ///
    /// Remove an image from the local storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)`.
    func ImageDeleteLibpod(_ input: Operations.ImageDeleteLibpod.Input) async throws -> Operations.ImageDeleteLibpod.Output
    /// Report on changes to images's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in an image's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)`.
    func ImageChangesLibpod(_ input: Operations.ImageChangesLibpod.Input) async throws -> Operations.ImageChangesLibpod.Output
    /// Image exists
    ///
    /// Check if image exists in local store
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)`.
    func ImageExistsLibpod(_ input: Operations.ImageExistsLibpod.Input) async throws -> Operations.ImageExistsLibpod.Output
    /// Export an image
    ///
    /// Export an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/get`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)`.
    func ImageGetLibpod(_ input: Operations.ImageGetLibpod.Input) async throws -> Operations.ImageGetLibpod.Output
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/history`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)`.
    func ImageHistoryLibpod(_ input: Operations.ImageHistoryLibpod.Input) async throws -> Operations.ImageHistoryLibpod.Output
    /// Inspect an image
    ///
    /// Obtain low-level information about an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)`.
    func ImageInspectLibpod(_ input: Operations.ImageInspectLibpod.Input) async throws -> Operations.ImageInspectLibpod.Output
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)`.
    func ImagePushLibpod(_ input: Operations.ImagePushLibpod.Input) async throws -> Operations.ImagePushLibpod.Output
    /// Resolve an image (short) name
    ///
    /// Resolve the passed image name to a list of fully-qualified images referring to container registries.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/resolve`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)`.
    func ImageResolveLibpod(_ input: Operations.ImageResolveLibpod.Input) async throws -> Operations.ImageResolveLibpod.Output
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/tag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)`.
    func ImageTagLibpod(_ input: Operations.ImageTagLibpod.Input) async throws -> Operations.ImageTagLibpod.Output
    /// Image tree
    ///
    /// Retrieve the image tree for the provided image name or ID
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/tree`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)`.
    func ImageTreeLibpod(_ input: Operations.ImageTreeLibpod.Input) async throws -> Operations.ImageTreeLibpod.Output
    /// Untag an image
    ///
    /// Untag an image. If not repo and tag are specified, all tags are removed from the image.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/untag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)`.
    func ImageUntagLibpod(_ input: Operations.ImageUntagLibpod.Input) async throws -> Operations.ImageUntagLibpod.Output
    /// Export multiple images
    ///
    /// Export multiple images into a single object. Only `docker-archive` is currently supported.
    ///
    /// - Remark: HTTP `GET /libpod/images/export`.
    /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)`.
    func ImageExportLibpod(_ input: Operations.ImageExportLibpod.Input) async throws -> Operations.ImageExportLibpod.Output
    /// Import image
    ///
    /// Import a previously exported tarball as an image.
    ///
    /// - Remark: HTTP `POST /libpod/images/import`.
    /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)`.
    func ImageImportLibpod(_ input: Operations.ImageImportLibpod.Input) async throws -> Operations.ImageImportLibpod.Output
    /// List Images
    ///
    /// Returns a list of images on the server
    ///
    /// - Remark: HTTP `GET /libpod/images/json`.
    /// - Remark: Generated from `#/paths//libpod/images/json/get(ImageListLibpod)`.
    func ImageListLibpod(_ input: Operations.ImageListLibpod.Input) async throws -> Operations.ImageListLibpod.Output
    /// Load image
    ///
    /// Load an image (oci-archive or docker-archive) stream.
    ///
    /// - Remark: HTTP `POST /libpod/images/load`.
    /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)`.
    func ImageLoadLibpod(_ input: Operations.ImageLoadLibpod.Input) async throws -> Operations.ImageLoadLibpod.Output
    /// Prune unused images
    ///
    /// Remove images that are not being used by a container
    ///
    /// - Remark: HTTP `POST /libpod/images/prune`.
    /// - Remark: Generated from `#/paths//libpod/images/prune/post(ImagePruneLibpod)`.
    func ImagePruneLibpod(_ input: Operations.ImagePruneLibpod.Input) async throws -> Operations.ImagePruneLibpod.Output
    /// Pull images
    ///
    /// Pull one or more images from a container registry.
    ///
    /// - Remark: HTTP `POST /libpod/images/pull`.
    /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)`.
    func ImagePullLibpod(_ input: Operations.ImagePullLibpod.Input) async throws -> Operations.ImagePullLibpod.Output
    /// Remove one or more images from the storage.
    ///
    /// Remove one or more images from the storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/remove`.
    /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)`.
    func ImageDeleteAllLibpod(_ input: Operations.ImageDeleteAllLibpod.Input) async throws -> Operations.ImageDeleteAllLibpod.Output
    /// Copy an image from one host to another
    ///
    /// Copy an image from one host to another
    ///
    /// - Remark: HTTP `POST /libpod/images/scp/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)`.
    func ImageScpLibpod(_ input: Operations.ImageScpLibpod.Input) async throws -> Operations.ImageScpLibpod.Output
    /// Search images
    ///
    /// Search registries for images
    ///
    /// - Remark: HTTP `GET /libpod/images/search`.
    /// - Remark: Generated from `#/paths//libpod/images/search/get(ImageSearchLibpod)`.
    func ImageSearchLibpod(_ input: Operations.ImageSearchLibpod.Input) async throws -> Operations.ImageSearchLibpod.Output
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /libpod/info`.
    /// - Remark: Generated from `#/paths//libpod/info/get(SystemInfoLibpod)`.
    func SystemInfoLibpod(_ input: Operations.SystemInfoLibpod.Input) async throws -> Operations.SystemInfoLibpod.Output
    /// Apply a podman workload or Kubernetes YAML file.
    ///
    /// Deploy a podman container, pod, volume, or Kubernetes yaml to a Kubernetes cluster.
    ///
    /// - Remark: HTTP `POST /libpod/kube/apply`.
    /// - Remark: Generated from `#/paths//libpod/kube/apply/post(KubeApplyLibpod)`.
    func KubeApplyLibpod(_ input: Operations.KubeApplyLibpod.Input) async throws -> Operations.KubeApplyLibpod.Output
    /// Create
    ///
    /// Create a manifest list
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)`.
    func ManifestCreateLibpod(_ input: Operations.ManifestCreateLibpod.Input) async throws -> Operations.ManifestCreateLibpod.Output
    /// Modify manifest list
    ///
    /// Add/Remove an image(s) to a manifest list
    ///
    /// Note: operations are not atomic when multiple Images are provided.
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `PUT /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)`.
    func ManifestModifyLibpod(_ input: Operations.ManifestModifyLibpod.Input) async throws -> Operations.ManifestModifyLibpod.Output
    /// Delete manifest list
    ///
    /// Delete named manifest list
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `DELETE /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)`.
    func ManifestDeleteLibpod(_ input: Operations.ManifestDeleteLibpod.Input) async throws -> Operations.ManifestDeleteLibpod.Output
    /// Add image
    ///
    /// Add an image to a manifest list
    ///
    /// Deprecated: As of 4.0.0 use ManifestModifyLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/add`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)`.
    func ManifestAddLibpod(_ input: Operations.ManifestAddLibpod.Input) async throws -> Operations.ManifestAddLibpod.Output
    /// Exists
    ///
    /// Check if manifest list exists
    ///
    /// Note: There is no contract that the manifest list will exist for a follow-on operation
    ///
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)`.
    func ManifestExistsLibpod(_ input: Operations.ManifestExistsLibpod.Input) async throws -> Operations.ManifestExistsLibpod.Output
    /// Inspect
    ///
    /// Display attributes of given manifest list
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)`.
    func ManifestInspectLibpod(_ input: Operations.ManifestInspectLibpod.Input) async throws -> Operations.ManifestInspectLibpod.Output
    /// Push manifest to registry
    ///
    /// Push a manifest list or image index to a registry
    ///
    /// Deprecated: As of 4.0.0 use ManifestPushLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)`.
    func ManifestPushV3Libpod(_ input: Operations.ManifestPushV3Libpod.Input) async throws -> Operations.ManifestPushV3Libpod.Output
    /// Push manifest list to registry
    ///
    /// Push a manifest list or image index to the named registry
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/registry/{destination}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)`.
    func ManifestPushLibpod(_ input: Operations.ManifestPushLibpod.Input) async throws -> Operations.ManifestPushLibpod.Output
    /// Remove a network
    ///
    /// Remove a configured network
    ///
    /// - Remark: HTTP `DELETE /libpod/networks/{name}`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)`.
    func NetworkDeleteLibpod(_ input: Operations.NetworkDeleteLibpod.Input) async throws -> Operations.NetworkDeleteLibpod.Output
    /// Connect container to network
    ///
    /// Connect a container to a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)`.
    func NetworkConnectLibpod(_ input: Operations.NetworkConnectLibpod.Input) async throws -> Operations.NetworkConnectLibpod.Output
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)`.
    func NetworkDisconnectLibpod(_ input: Operations.NetworkDisconnectLibpod.Input) async throws -> Operations.NetworkDisconnectLibpod.Output
    /// Network exists
    ///
    /// Check if network exists
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)`.
    func NetworkExistsLibpod(_ input: Operations.NetworkExistsLibpod.Input) async throws -> Operations.NetworkExistsLibpod.Output
    /// Inspect a network
    ///
    /// Display configuration for a network.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)`.
    func NetworkInspectLibpod(_ input: Operations.NetworkInspectLibpod.Input) async throws -> Operations.NetworkInspectLibpod.Output
    /// Update existing podman network
    ///
    /// Update existing podman network
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)`.
    func NetworkUpdateLibpod(_ input: Operations.NetworkUpdateLibpod.Input) async throws -> Operations.NetworkUpdateLibpod.Output
    /// Create network
    ///
    /// Create a new network configuration
    ///
    /// - Remark: HTTP `POST /libpod/networks/create`.
    /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)`.
    func NetworkCreateLibpod(_ input: Operations.NetworkCreateLibpod.Input) async throws -> Operations.NetworkCreateLibpod.Output
    /// List networks
    ///
    /// Display summary of network configurations.
    ///   - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/json/get(NetworkListLibpod)`.
    func NetworkListLibpod(_ input: Operations.NetworkListLibpod.Input) async throws -> Operations.NetworkListLibpod.Output
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /libpod/networks/prune`.
    /// - Remark: Generated from `#/paths//libpod/networks/prune/post(NetworkPruneLibpod)`.
    func NetworkPruneLibpod(_ input: Operations.NetworkPruneLibpod.Input) async throws -> Operations.NetworkPruneLibpod.Output
    /// Play a Kubernetes YAML file.
    ///
    /// Create and run pods based on a Kubernetes YAML file.
    ///
    /// ### Content-Type
    ///
    /// Then endpoint support two Content-Type
    ///  - `plain/text` for yaml format
    ///  - `application/x-tar` for sending context(s) required for building images
    ///
    /// #### Tar format
    ///
    /// The tar format must contain a `play.yaml` file at the root that will be used.
    /// If the file format requires context to build an image, it uses the image name and
    /// check for corresponding folder.
    ///
    /// For example, the client sends a tar file with the following structure:
    ///
    /// ```
    /// â””â”€â”€ content.tar
    ///  â”œâ”€â”€ play.yaml
    ///  â””â”€â”€ foobar/
    ///      â””â”€â”€ Containerfile
    /// ```
    ///
    /// The `play.yaml` is the following, the `foobar` image means we are looking for a context with this name.
    /// ```
    /// apiVersion: v1
    /// kind: Pod
    /// metadata:
    /// name: demo-build-remote
    /// spec:
    /// containers:
    ///  - name: container
    ///    image: foobar
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/post(PlayKubeLibpod)`.
    func PlayKubeLibpod(_ input: Operations.PlayKubeLibpod.Input) async throws -> Operations.PlayKubeLibpod.Output
    /// Remove resources created from kube play
    ///
    /// Tears down pods, secrets, and volumes defined in a YAML file
    ///
    /// - Remark: HTTP `DELETE /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/delete(PlayKubeDownLibpod)`.
    func PlayKubeDownLibpod(_ input: Operations.PlayKubeDownLibpod.Input) async throws -> Operations.PlayKubeDownLibpod.Output
    /// Remove pod
    ///
    /// - Remark: HTTP `DELETE /libpod/pods/{name}`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)`.
    func PodDeleteLibpod(_ input: Operations.PodDeleteLibpod.Input) async throws -> Operations.PodDeleteLibpod.Output
    /// Pod exists
    ///
    /// Check if a pod exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)`.
    func PodExistsLibpod(_ input: Operations.PodExistsLibpod.Input) async throws -> Operations.PodExistsLibpod.Output
    /// Inspect pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)`.
    func PodInspectLibpod(_ input: Operations.PodInspectLibpod.Input) async throws -> Operations.PodInspectLibpod.Output
    /// Kill a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)`.
    func PodKillLibpod(_ input: Operations.PodKillLibpod.Input) async throws -> Operations.PodKillLibpod.Output
    /// Pause a pod
    ///
    /// Pause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)`.
    func PodPauseLibpod(_ input: Operations.PodPauseLibpod.Input) async throws -> Operations.PodPauseLibpod.Output
    /// Restart a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)`.
    func PodRestartLibpod(_ input: Operations.PodRestartLibpod.Input) async throws -> Operations.PodRestartLibpod.Output
    /// Start a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)`.
    func PodStartLibpod(_ input: Operations.PodStartLibpod.Input) async throws -> Operations.PodStartLibpod.Output
    /// Stop a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)`.
    func PodStopLibpod(_ input: Operations.PodStopLibpod.Input) async throws -> Operations.PodStopLibpod.Output
    /// List processes
    ///
    /// List processes running inside a pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)`.
    func PodTopLibpod(_ input: Operations.PodTopLibpod.Input) async throws -> Operations.PodTopLibpod.Output
    /// Unpause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)`.
    func PodUnpauseLibpod(_ input: Operations.PodUnpauseLibpod.Input) async throws -> Operations.PodUnpauseLibpod.Output
    /// Create a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/create`.
    /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)`.
    func PodCreateLibpod(_ input: Operations.PodCreateLibpod.Input) async throws -> Operations.PodCreateLibpod.Output
    /// List pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)`.
    func PodListLibpod(_ input: Operations.PodListLibpod.Input) async throws -> Operations.PodListLibpod.Output
    /// Prune unused pods
    ///
    /// - Remark: HTTP `POST /libpod/pods/prune`.
    /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)`.
    func PodPruneLibpod(_ input: Operations.PodPruneLibpod.Input) async throws -> Operations.PodPruneLibpod.Output
    /// Statistics for one or more pods
    ///
    /// Display a live stream of resource usage statistics for the containers in one or more pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/stats`.
    /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)`.
    func PodStatsAllLibpod(_ input: Operations.PodStatsAllLibpod.Input) async throws -> Operations.PodStatsAllLibpod.Output
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /libpod/secrets/{name}`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)`.
    func SecretDeleteLibpod(_ input: Operations.SecretDeleteLibpod.Input) async throws -> Operations.SecretDeleteLibpod.Output
    /// Secret exists
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)`.
    func SecretExistsLibpod(_ input: Operations.SecretExistsLibpod.Input) async throws -> Operations.SecretExistsLibpod.Output
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)`.
    func SecretInspectLibpod(_ input: Operations.SecretInspectLibpod.Input) async throws -> Operations.SecretInspectLibpod.Output
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /libpod/secrets/create`.
    /// - Remark: Generated from `#/paths//libpod/secrets/create/post(SecretCreateLibpod)`.
    func SecretCreateLibpod(_ input: Operations.SecretCreateLibpod.Input) async throws -> Operations.SecretCreateLibpod.Output
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /libpod/secrets/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/json/get(SecretListLibpod)`.
    func SecretListLibpod(_ input: Operations.SecretListLibpod.Input) async throws -> Operations.SecretListLibpod.Output
    /// Performs consistency checks on storage, optionally removing items which fail checks
    ///
    /// - Remark: HTTP `POST /libpod/system/check`.
    /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)`.
    func SystemCheckLibpod(_ input: Operations.SystemCheckLibpod.Input) async throws -> Operations.SystemCheckLibpod.Output
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /libpod/system/df`.
    /// - Remark: Generated from `#/paths//libpod/system/df/get(SystemDataUsageLibpod)`.
    func SystemDataUsageLibpod(_ input: Operations.SystemDataUsageLibpod.Input) async throws -> Operations.SystemDataUsageLibpod.Output
    /// Prune unused data
    ///
    /// - Remark: HTTP `POST /libpod/system/prune`.
    /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)`.
    func SystemPruneLibpod(_ input: Operations.SystemPruneLibpod.Input) async throws -> Operations.SystemPruneLibpod.Output
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /libpod/version`.
    /// - Remark: Generated from `#/paths//libpod/version/get(SystemVersionLibpod)`.
    func SystemVersionLibpod(_ input: Operations.SystemVersionLibpod.Input) async throws -> Operations.SystemVersionLibpod.Output
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /libpod/volumes/{name}`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)`.
    func VolumeDeleteLibpod(_ input: Operations.VolumeDeleteLibpod.Input) async throws -> Operations.VolumeDeleteLibpod.Output
    /// Volume exists
    ///
    /// Check if a volume exists
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)`.
    func VolumeExistsLibpod(_ input: Operations.VolumeExistsLibpod.Input) async throws -> Operations.VolumeExistsLibpod.Output
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)`.
    func VolumeInspectLibpod(_ input: Operations.VolumeInspectLibpod.Input) async throws -> Operations.VolumeInspectLibpod.Output
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /libpod/volumes/create`.
    /// - Remark: Generated from `#/paths//libpod/volumes/create/post(VolumeCreateLibpod)`.
    func VolumeCreateLibpod(_ input: Operations.VolumeCreateLibpod.Input) async throws -> Operations.VolumeCreateLibpod.Output
    /// List volumes
    ///
    /// Returns a list of volumes
    ///
    /// - Remark: HTTP `GET /libpod/volumes/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/json/get(VolumeListLibpod)`.
    func VolumeListLibpod(_ input: Operations.VolumeListLibpod.Input) async throws -> Operations.VolumeListLibpod.Output
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /libpod/volumes/prune`.
    /// - Remark: Generated from `#/paths//libpod/volumes/prune/post(VolumePruneLibpod)`.
    func VolumePruneLibpod(_ input: Operations.VolumePruneLibpod.Input) async throws -> Operations.VolumePruneLibpod.Output
    /// List networks
    ///
    /// Display summary of network configurations
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    func NetworkList(_ input: Operations.NetworkList.Input) async throws -> Operations.NetworkList.Output
    /// Inspect a network
    ///
    /// Display low level configuration network
    ///
    /// - Remark: HTTP `GET /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)`.
    func NetworkInspect(_ input: Operations.NetworkInspect.Input) async throws -> Operations.NetworkInspect.Output
    /// Remove a network
    ///
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)`.
    func NetworkDelete(_ input: Operations.NetworkDelete.Input) async throws -> Operations.NetworkDelete.Output
    /// Connect container to network
    ///
    /// Connect a container to a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)`.
    func NetworkConnect(_ input: Operations.NetworkConnect.Input) async throws -> Operations.NetworkConnect.Output
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)`.
    func NetworkDisconnect(_ input: Operations.NetworkDisconnect.Input) async throws -> Operations.NetworkDisconnect.Output
    /// Create network
    ///
    /// Create a network configuration
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    func NetworkCreate(_ input: Operations.NetworkCreate.Input) async throws -> Operations.NetworkCreate.Output
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    func NetworkPrune(_ input: Operations.NetworkPrune.Input) async throws -> Operations.NetworkPrune.Output
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    func SecretList(_ input: Operations.SecretList.Input) async throws -> Operations.SecretList.Output
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)`.
    func SecretInspect(_ input: Operations.SecretInspect.Input) async throws -> Operations.SecretInspect.Output
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)`.
    func SecretDelete(_ input: Operations.SecretDelete.Input) async throws -> Operations.SecretDelete.Output
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    func SecretCreate(_ input: Operations.SecretCreate.Input) async throws -> Operations.SecretCreate.Output
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    func SystemDataUsage(_ input: Operations.SystemDataUsage.Input) async throws -> Operations.SystemDataUsage.Output
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    func SystemVersion(_ input: Operations.SystemVersion.Input) async throws -> Operations.SystemVersion.Output
    /// List volumes
    ///
    /// Returns a list of volume
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    func VolumeList(_ input: Operations.VolumeList.Input) async throws -> Operations.VolumeList.Output
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    func VolumeInspect(_ input: Operations.VolumeInspect.Input) async throws -> Operations.VolumeInspect.Output
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    func VolumeDelete(_ input: Operations.VolumeDelete.Input) async throws -> Operations.VolumeDelete.Output
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    func VolumeCreate(_ input: Operations.VolumeCreate.Input) async throws -> Operations.VolumeCreate.Output
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    func VolumePrune(_ input: Operations.VolumePrune.Input) async throws -> Operations.VolumePrune.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Check auth configuration
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    internal func SystemAuth(
        headers: Operations.SystemAuth.Input.Headers = .init(),
        body: Operations.SystemAuth.Input.Body? = nil
    ) async throws -> Operations.SystemAuth.Output {
        try await SystemAuth(Operations.SystemAuth.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    internal func ImageBuild(
        query: Operations.ImageBuild.Input.Query = .init(),
        headers: Operations.ImageBuild.Input.Headers = .init(),
        body: Operations.ImageBuild.Input.Body? = nil
    ) async throws -> Operations.ImageBuild.Output {
        try await ImageBuild(Operations.ImageBuild.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// New Image
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    internal func ImageCommit(
        query: Operations.ImageCommit.Input.Query = .init(),
        headers: Operations.ImageCommit.Input.Headers = .init()
    ) async throws -> Operations.ImageCommit.Output {
        try await ImageCommit(Operations.ImageCommit.Input(
            query: query,
            headers: headers
        ))
    }
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{name}`.
    /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)`.
    internal func ContainerDelete(
        path: Operations.ContainerDelete.Input.Path,
        query: Operations.ContainerDelete.Input.Query = .init(),
        headers: Operations.ContainerDelete.Input.Headers = .init()
    ) async throws -> Operations.ContainerDelete.Output {
        try await ContainerDelete(Operations.ContainerDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get files from a container
    ///
    /// Get a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)`.
    internal func ContainerArchive(
        path: Operations.ContainerArchive.Input.Path,
        query: Operations.ContainerArchive.Input.Query,
        headers: Operations.ContainerArchive.Input.Headers = .init()
    ) async throws -> Operations.ContainerArchive.Output {
        try await ContainerArchive(Operations.ContainerArchive.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Put files into a container
    ///
    /// Put a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)`.
    internal func PutContainerArchive(
        path: Operations.PutContainerArchive.Input.Path,
        query: Operations.PutContainerArchive.Input.Query,
        headers: Operations.PutContainerArchive.Input.Headers = .init(),
        body: Components.RequestBodies.PutContainerArchiveRequest? = nil
    ) async throws -> Operations.PutContainerArchive.Output {
        try await PutContainerArchive(Operations.PutContainerArchive.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// It uses the same stream format as docker, see the libpod attach endpoint for a description of the format.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)`.
    internal func ContainerAttach(
        path: Operations.ContainerAttach.Input.Path,
        query: Operations.ContainerAttach.Input.Query = .init(),
        headers: Operations.ContainerAttach.Input.Headers = .init()
    ) async throws -> Operations.ContainerAttach.Output {
        try await ContainerAttach(Operations.ContainerAttach.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)`.
    internal func ContainerExec(
        path: Operations.ContainerExec.Input.Path,
        headers: Operations.ContainerExec.Input.Headers = .init(),
        body: Components.RequestBodies.ContainerExecControl? = nil
    ) async throws -> Operations.ContainerExec.Output {
        try await ContainerExec(Operations.ContainerExec.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{name}/export`.
    /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)`.
    internal func ContainerExport(
        path: Operations.ContainerExport.Input.Path,
        headers: Operations.ContainerExport.Input.Headers = .init()
    ) async throws -> Operations.ContainerExport.Output {
        try await ContainerExport(Operations.ContainerExport.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/json`.
    /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)`.
    internal func ContainerInspect(
        path: Operations.ContainerInspect.Input.Path,
        query: Operations.ContainerInspect.Input.Query = .init(),
        headers: Operations.ContainerInspect.Input.Headers = .init()
    ) async throws -> Operations.ContainerInspect.Output {
        try await ContainerInspect(Operations.ContainerInspect.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Kill container
    ///
    /// Signal to send to the container as an integer or string (e.g. SIGINT)
    ///
    /// - Remark: HTTP `POST /containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)`.
    internal func ContainerKill(
        path: Operations.ContainerKill.Input.Path,
        query: Operations.ContainerKill.Input.Query = .init(),
        headers: Operations.ContainerKill.Input.Headers = .init()
    ) async throws -> Operations.ContainerKill.Output {
        try await ContainerKill(Operations.ContainerKill.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)`.
    internal func ContainerLogs(
        path: Operations.ContainerLogs.Input.Path,
        query: Operations.ContainerLogs.Input.Query = .init(),
        headers: Operations.ContainerLogs.Input.Headers = .init()
    ) async throws -> Operations.ContainerLogs.Output {
        try await ContainerLogs(Operations.ContainerLogs.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Pause container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)`.
    internal func ContainerPause(
        path: Operations.ContainerPause.Input.Path,
        headers: Operations.ContainerPause.Input.Headers = .init()
    ) async throws -> Operations.ContainerPause.Output {
        try await ContainerPause(Operations.ContainerPause.Input(
            path: path,
            headers: headers
        ))
    }
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)`.
    internal func ContainerRename(
        path: Operations.ContainerRename.Input.Path,
        query: Operations.ContainerRename.Input.Query,
        headers: Operations.ContainerRename.Input.Headers = .init()
    ) async throws -> Operations.ContainerRename.Output {
        try await ContainerRename(Operations.ContainerRename.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)`.
    internal func ContainerResize(
        path: Operations.ContainerResize.Input.Path,
        query: Operations.ContainerResize.Input.Query = .init(),
        headers: Operations.ContainerResize.Input.Headers = .init()
    ) async throws -> Operations.ContainerResize.Output {
        try await ContainerResize(Operations.ContainerResize.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Restart container
    ///
    /// - Remark: HTTP `POST /containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)`.
    internal func ContainerRestart(
        path: Operations.ContainerRestart.Input.Path,
        query: Operations.ContainerRestart.Input.Query = .init(),
        headers: Operations.ContainerRestart.Input.Headers = .init()
    ) async throws -> Operations.ContainerRestart.Output {
        try await ContainerRestart(Operations.ContainerRestart.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/start`.
    /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)`.
    internal func ContainerStart(
        path: Operations.ContainerStart.Input.Path,
        query: Operations.ContainerStart.Input.Query = .init(),
        headers: Operations.ContainerStart.Input.Headers = .init()
    ) async throws -> Operations.ContainerStart.Output {
        try await ContainerStart(Operations.ContainerStart.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get stats for a container
    ///
    /// This returns a live stream of a containerâ€™s resource usage statistics.
    ///
    /// - Remark: HTTP `GET /containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)`.
    internal func ContainerStats(
        path: Operations.ContainerStats.Input.Path,
        query: Operations.ContainerStats.Input.Query = .init(),
        headers: Operations.ContainerStats.Input.Headers = .init()
    ) async throws -> Operations.ContainerStats.Output {
        try await ContainerStats(Operations.ContainerStats.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Stop a container
    ///
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)`.
    internal func ContainerStop(
        path: Operations.ContainerStop.Input.Path,
        query: Operations.ContainerStop.Input.Query = .init(),
        headers: Operations.ContainerStop.Input.Headers = .init()
    ) async throws -> Operations.ContainerStop.Output {
        try await ContainerStop(Operations.ContainerStop.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/top`.
    /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)`.
    internal func ContainerTop(
        path: Operations.ContainerTop.Input.Path,
        query: Operations.ContainerTop.Input.Query = .init(),
        headers: Operations.ContainerTop.Input.Headers = .init()
    ) async throws -> Operations.ContainerTop.Output {
        try await ContainerTop(Operations.ContainerTop.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Unpause container
    ///
    /// Resume a paused container
    ///
    /// - Remark: HTTP `POST /containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)`.
    internal func ContainerUnpause(
        path: Operations.ContainerUnpause.Input.Path,
        headers: Operations.ContainerUnpause.Input.Headers = .init()
    ) async throws -> Operations.ContainerUnpause.Output {
        try await ContainerUnpause(Operations.ContainerUnpause.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update configuration of an existing container
    ///
    /// Change configuration settings for an existing container without requiring recreation.
    ///
    /// - Remark: HTTP `POST /containers/{name}/update`.
    /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)`.
    internal func ContainerUpdate(
        path: Operations.ContainerUpdate.Input.Path,
        headers: Operations.ContainerUpdate.Input.Headers = .init(),
        body: Operations.ContainerUpdate.Input.Body? = nil
    ) async throws -> Operations.ContainerUpdate.Output {
        try await ContainerUpdate(Operations.ContainerUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Wait on a container
    ///
    /// Block until a container stops or given condition is met.
    ///
    /// - Remark: HTTP `POST /containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)`.
    internal func ContainerWait(
        path: Operations.ContainerWait.Input.Path,
        query: Operations.ContainerWait.Input.Query = .init(),
        headers: Operations.ContainerWait.Input.Headers = .init()
    ) async throws -> Operations.ContainerWait.Output {
        try await ContainerWait(Operations.ContainerWait.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    internal func ContainerCreate(
        query: Operations.ContainerCreate.Input.Query = .init(),
        headers: Operations.ContainerCreate.Input.Headers = .init(),
        body: Operations.ContainerCreate.Input.Body
    ) async throws -> Operations.ContainerCreate.Output {
        try await ContainerCreate(Operations.ContainerCreate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    internal func ContainerList(
        query: Operations.ContainerList.Input.Query = .init(),
        headers: Operations.ContainerList.Input.Headers = .init()
    ) async throws -> Operations.ContainerList.Output {
        try await ContainerList(Operations.ContainerList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    internal func ContainerPrune(
        query: Operations.ContainerPrune.Input.Query = .init(),
        headers: Operations.ContainerPrune.Input.Headers = .init()
    ) async throws -> Operations.ContainerPrune.Output {
        try await ContainerPrune(Operations.ContainerPrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    internal func SystemEvents(
        query: Operations.SystemEvents.Input.Query = .init(),
        headers: Operations.SystemEvents.Input.Headers = .init()
    ) async throws -> Operations.SystemEvents.Output {
        try await SystemEvents(Operations.SystemEvents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    internal func ExecInspect(
        path: Operations.ExecInspect.Input.Path,
        headers: Operations.ExecInspect.Input.Headers = .init()
    ) async throws -> Operations.ExecInspect.Output {
        try await ExecInspect(Operations.ExecInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    internal func ExecResize(
        path: Operations.ExecResize.Input.Path,
        query: Operations.ExecResize.Input.Query = .init(),
        headers: Operations.ExecResize.Input.Headers = .init()
    ) async throws -> Operations.ExecResize.Output {
        try await ExecResize(Operations.ExecResize.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    internal func ExecStart(
        path: Operations.ExecStart.Input.Path,
        headers: Operations.ExecStart.Input.Headers = .init(),
        body: Operations.ExecStart.Input.Body? = nil
    ) async throws -> Operations.ExecStart.Output {
        try await ExecStart(Operations.ExecStart.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove Image
    ///
    /// Delete an image from local storage
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    internal func ImageDelete(
        path: Operations.ImageDelete.Input.Path,
        query: Operations.ImageDelete.Input.Query = .init(),
        headers: Operations.ImageDelete.Input.Headers = .init()
    ) async throws -> Operations.ImageDelete.Output {
        try await ImageDelete(Operations.ImageDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export an image
    ///
    /// Export an image in tarball format
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    internal func ImageGet(
        path: Operations.ImageGet.Input.Path,
        headers: Operations.ImageGet.Input.Headers = .init()
    ) async throws -> Operations.ImageGet.Output {
        try await ImageGet(Operations.ImageGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    internal func ImageHistory(
        path: Operations.ImageHistory.Input.Path,
        headers: Operations.ImageHistory.Input.Headers = .init()
    ) async throws -> Operations.ImageHistory.Output {
        try await ImageHistory(Operations.ImageHistory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    internal func ImageInspect(
        path: Operations.ImageInspect.Input.Path,
        headers: Operations.ImageInspect.Input.Headers = .init()
    ) async throws -> Operations.ImageInspect.Output {
        try await ImageInspect(Operations.ImageInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    internal func ImagePush(
        path: Operations.ImagePush.Input.Path,
        query: Operations.ImagePush.Input.Query = .init(),
        headers: Operations.ImagePush.Input.Headers = .init()
    ) async throws -> Operations.ImagePush.Output {
        try await ImagePush(Operations.ImagePush.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    internal func ImageTag(
        path: Operations.ImageTag.Input.Path,
        query: Operations.ImageTag.Input.Query = .init(),
        headers: Operations.ImageTag.Input.Headers = .init()
    ) async throws -> Operations.ImageTag.Output {
        try await ImageTag(Operations.ImageTag.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an image
    ///
    /// Create an image by either pulling it from a registry or importing it.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    internal func ImageCreate(
        query: Operations.ImageCreate.Input.Query = .init(),
        headers: Operations.ImageCreate.Input.Headers = .init(),
        body: Operations.ImageCreate.Input.Body? = nil
    ) async throws -> Operations.ImageCreate.Output {
        try await ImageCreate(Operations.ImageCreate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image repositories
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    internal func ImageGetAll(
        query: Operations.ImageGetAll.Input.Query,
        headers: Operations.ImageGetAll.Input.Headers = .init()
    ) async throws -> Operations.ImageGetAll.Output {
        try await ImageGetAll(Operations.ImageGetAll.Input(
            query: query,
            headers: headers
        ))
    }
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    internal func ImageList(
        query: Operations.ImageList.Input.Query = .init(),
        headers: Operations.ImageList.Input.Headers = .init()
    ) async throws -> Operations.ImageList.Output {
        try await ImageList(Operations.ImageList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Import image
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    internal func ImageLoad(
        query: Operations.ImageLoad.Input.Query = .init(),
        headers: Operations.ImageLoad.Input.Headers = .init(),
        body: Operations.ImageLoad.Input.Body? = nil
    ) async throws -> Operations.ImageLoad.Output {
        try await ImageLoad(Operations.ImageLoad.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Prune unused images
    ///
    /// Remove images from local storage that are not being used by a container
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    internal func ImagePrune(
        query: Operations.ImagePrune.Input.Query = .init(),
        headers: Operations.ImagePrune.Input.Headers = .init()
    ) async throws -> Operations.ImagePrune.Output {
        try await ImagePrune(Operations.ImagePrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search images
    ///
    /// Search registries for an image
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    internal func ImageSearch(
        query: Operations.ImageSearch.Input.Query = .init(),
        headers: Operations.ImageSearch.Input.Headers = .init()
    ) async throws -> Operations.ImageSearch.Output {
        try await ImageSearch(Operations.ImageSearch.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    internal func SystemInfo(headers: Operations.SystemInfo.Input.Headers = .init()) async throws -> Operations.SystemInfo.Output {
        try await SystemInfo(Operations.SystemInfo.Input(headers: headers))
    }
    /// Ping service
    ///
    /// Return protocol information in response headers.
    /// `HEAD /libpod/_ping` is also supported.
    /// `/_ping` is available for compatibility with other engines.
    /// The '_ping' endpoints are not versioned.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/_ping`.
    /// - Remark: Generated from `#/paths//libpod/_ping/get(SystemPing)`.
    internal func SystemPing(headers: Operations.SystemPing.Input.Headers = .init()) async throws -> Operations.SystemPing.Output {
        try await SystemPing(Operations.SystemPing.Input(headers: headers))
    }
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /libpod/build`.
    /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)`.
    internal func ImageBuildLibpod(
        query: Operations.ImageBuildLibpod.Input.Query = .init(),
        headers: Operations.ImageBuildLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageBuildLibpod.Output {
        try await ImageBuildLibpod(Operations.ImageBuildLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Commit
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /libpod/commit`.
    /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)`.
    internal func ImageCommitLibpod(
        query: Operations.ImageCommitLibpod.Input.Query,
        headers: Operations.ImageCommitLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageCommitLibpod.Output {
        try await ImageCommitLibpod(Operations.ImageCommitLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Delete container
    ///
    /// Delete container
    ///
    /// - Remark: HTTP `DELETE /libpod/containers/{name}`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)`.
    internal func ContainerDeleteLibpod(
        path: Operations.ContainerDeleteLibpod.Input.Path,
        query: Operations.ContainerDeleteLibpod.Input.Query = .init(),
        headers: Operations.ContainerDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerDeleteLibpod.Output {
        try await ContainerDeleteLibpod(Operations.ContainerDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Copy files from a container
    ///
    /// Copy a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)`.
    internal func ContainerArchiveLibpod(
        path: Operations.ContainerArchiveLibpod.Input.Path,
        query: Operations.ContainerArchiveLibpod.Input.Query,
        headers: Operations.ContainerArchiveLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerArchiveLibpod.Output {
        try await ContainerArchiveLibpod(Operations.ContainerArchiveLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Copy files into a container
    ///
    /// Copy a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)`.
    internal func PutContainerArchiveLibpod(
        path: Operations.PutContainerArchiveLibpod.Input.Path,
        query: Operations.PutContainerArchiveLibpod.Input.Query,
        headers: Operations.PutContainerArchiveLibpod.Input.Headers = .init(),
        body: Components.RequestBodies.PutContainerArchiveRequest? = nil
    ) async throws -> Operations.PutContainerArchiveLibpod.Output {
        try await PutContainerArchiveLibpod(Operations.PutContainerArchiveLibpod.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the service for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To inform potential proxies about connection hijacking, the client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /v4.6.0/libpod/containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The service will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled for the container,
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// (starting with v4.7.0, previously application/vnd.docker.raw-stream was always used)
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information about the output stream type and the size of
    /// the payload.
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which contains the specified number of
    /// bytes as written in the size.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled for the container,
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)`.
    internal func ContainerAttachLibpod(
        path: Operations.ContainerAttachLibpod.Input.Path,
        query: Operations.ContainerAttachLibpod.Input.Query = .init(),
        headers: Operations.ContainerAttachLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerAttachLibpod.Output {
        try await ContainerAttachLibpod(Operations.ContainerAttachLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Report on changes to container's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)`.
    internal func ContainerChangesLibpod(
        path: Operations.ContainerChangesLibpod.Input.Path,
        query: Operations.ContainerChangesLibpod.Input.Query = .init(),
        headers: Operations.ContainerChangesLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerChangesLibpod.Output {
        try await ContainerChangesLibpod(Operations.ContainerChangesLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Checkpoint a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/checkpoint`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)`.
    internal func ContainerCheckpointLibpod(
        path: Operations.ContainerCheckpointLibpod.Input.Path,
        query: Operations.ContainerCheckpointLibpod.Input.Query = .init(),
        headers: Operations.ContainerCheckpointLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerCheckpointLibpod.Output {
        try await ContainerCheckpointLibpod(Operations.ContainerCheckpointLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)`.
    internal func ContainerExecLibpod(
        path: Operations.ContainerExecLibpod.Input.Path,
        headers: Operations.ContainerExecLibpod.Input.Headers = .init(),
        body: Components.RequestBodies.ContainerExecControl? = nil
    ) async throws -> Operations.ContainerExecLibpod.Output {
        try await ContainerExecLibpod(Operations.ContainerExecLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Check if container exists
    ///
    /// Quick way to determine if a container exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)`.
    internal func ContainerExistsLibpod(
        path: Operations.ContainerExistsLibpod.Input.Path,
        headers: Operations.ContainerExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerExistsLibpod.Output {
        try await ContainerExistsLibpod(Operations.ContainerExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/export`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)`.
    internal func ContainerExportLibpod(
        path: Operations.ContainerExportLibpod.Input.Path,
        headers: Operations.ContainerExportLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerExportLibpod.Output {
        try await ContainerExportLibpod(Operations.ContainerExportLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Run a container's healthcheck
    ///
    /// Execute the defined healthcheck and return information about the results
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/healthcheck`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)`.
    internal func ContainerHealthcheckLibpod(
        path: Operations.ContainerHealthcheckLibpod.Input.Path,
        headers: Operations.ContainerHealthcheckLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerHealthcheckLibpod.Output {
        try await ContainerHealthcheckLibpod(Operations.ContainerHealthcheckLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Initialize a container
    ///
    /// Performs all tasks necessary for initializing the container but does not start the container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/init`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)`.
    internal func ContainerInitLibpod(
        path: Operations.ContainerInitLibpod.Input.Path,
        headers: Operations.ContainerInitLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerInitLibpod.Output {
        try await ContainerInitLibpod(Operations.ContainerInitLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)`.
    internal func ContainerInspectLibpod(
        path: Operations.ContainerInspectLibpod.Input.Path,
        query: Operations.ContainerInspectLibpod.Input.Query = .init(),
        headers: Operations.ContainerInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerInspectLibpod.Output {
        try await ContainerInspectLibpod(Operations.ContainerInspectLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Kill container
    ///
    /// send a signal to a container, defaults to killing the container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)`.
    internal func ContainerKillLibpod(
        path: Operations.ContainerKillLibpod.Input.Path,
        query: Operations.ContainerKillLibpod.Input.Query = .init(),
        headers: Operations.ContainerKillLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerKillLibpod.Output {
        try await ContainerKillLibpod(Operations.ContainerKillLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// The stream format is the same as described in the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)`.
    internal func ContainerLogsLibpod(
        path: Operations.ContainerLogsLibpod.Input.Path,
        query: Operations.ContainerLogsLibpod.Input.Query = .init(),
        headers: Operations.ContainerLogsLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerLogsLibpod.Output {
        try await ContainerLogsLibpod(Operations.ContainerLogsLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Mount a container
    ///
    /// Mount a container to the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/mount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)`.
    internal func ContainerMountLibpod(
        path: Operations.ContainerMountLibpod.Input.Path,
        headers: Operations.ContainerMountLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerMountLibpod.Output {
        try await ContainerMountLibpod(Operations.ContainerMountLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Pause a container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)`.
    internal func ContainerPauseLibpod(
        path: Operations.ContainerPauseLibpod.Input.Path,
        headers: Operations.ContainerPauseLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerPauseLibpod.Output {
        try await ContainerPauseLibpod(Operations.ContainerPauseLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)`.
    internal func ContainerRenameLibpod(
        path: Operations.ContainerRenameLibpod.Input.Path,
        query: Operations.ContainerRenameLibpod.Input.Query,
        headers: Operations.ContainerRenameLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerRenameLibpod.Output {
        try await ContainerRenameLibpod(Operations.ContainerRenameLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)`.
    internal func ContainerResizeLibpod(
        path: Operations.ContainerResizeLibpod.Input.Path,
        query: Operations.ContainerResizeLibpod.Input.Query = .init(),
        headers: Operations.ContainerResizeLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerResizeLibpod.Output {
        try await ContainerResizeLibpod(Operations.ContainerResizeLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)`.
    internal func ContainerRestartLibpod(
        path: Operations.ContainerRestartLibpod.Input.Path,
        query: Operations.ContainerRestartLibpod.Input.Query = .init(),
        headers: Operations.ContainerRestartLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerRestartLibpod.Output {
        try await ContainerRestartLibpod(Operations.ContainerRestartLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Restore a container
    ///
    /// Restore a container from a checkpoint.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restore`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)`.
    internal func ContainerRestoreLibpod(
        path: Operations.ContainerRestoreLibpod.Input.Path,
        query: Operations.ContainerRestoreLibpod.Input.Query = .init(),
        headers: Operations.ContainerRestoreLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerRestoreLibpod.Output {
        try await ContainerRestoreLibpod(Operations.ContainerRestoreLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)`.
    internal func ContainerStartLibpod(
        path: Operations.ContainerStartLibpod.Input.Path,
        query: Operations.ContainerStartLibpod.Input.Query = .init(),
        headers: Operations.ContainerStartLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerStartLibpod.Output {
        try await ContainerStartLibpod(Operations.ContainerStartLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get stats for a container
    ///
    /// DEPRECATED. This endpoint will be removed with the next major release. Please use /libpod/containers/stats instead.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)`.
    internal func ContainerStatsLibpod(
        path: Operations.ContainerStatsLibpod.Input.Path,
        query: Operations.ContainerStatsLibpod.Input.Query = .init(),
        headers: Operations.ContainerStatsLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerStatsLibpod.Output {
        try await ContainerStatsLibpod(Operations.ContainerStatsLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)`.
    internal func ContainerStopLibpod(
        path: Operations.ContainerStopLibpod.Input.Path,
        query: Operations.ContainerStopLibpod.Input.Query = .init(),
        headers: Operations.ContainerStopLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerStopLibpod.Output {
        try await ContainerStopLibpod(Operations.ContainerStopLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List processes
    ///
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)`.
    internal func ContainerTopLibpod(
        path: Operations.ContainerTopLibpod.Input.Path,
        query: Operations.ContainerTopLibpod.Input.Query = .init(),
        headers: Operations.ContainerTopLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerTopLibpod.Output {
        try await ContainerTopLibpod(Operations.ContainerTopLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Unmount a container
    ///
    /// Unmount a container from the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unmount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)`.
    internal func ContainerUnmountLibpod(
        path: Operations.ContainerUnmountLibpod.Input.Path,
        headers: Operations.ContainerUnmountLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerUnmountLibpod.Output {
        try await ContainerUnmountLibpod(Operations.ContainerUnmountLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unpause Container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)`.
    internal func ContainerUnpauseLibpod(
        path: Operations.ContainerUnpauseLibpod.Input.Path,
        headers: Operations.ContainerUnpauseLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerUnpauseLibpod.Output {
        try await ContainerUnpauseLibpod(Operations.ContainerUnpauseLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks
    ///
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)`.
    internal func ContainerUpdateLibpod(
        path: Operations.ContainerUpdateLibpod.Input.Path,
        query: Operations.ContainerUpdateLibpod.Input.Query = .init(),
        headers: Operations.ContainerUpdateLibpod.Input.Headers = .init(),
        body: Operations.ContainerUpdateLibpod.Input.Body? = nil
    ) async throws -> Operations.ContainerUpdateLibpod.Output {
        try await ContainerUpdateLibpod(Operations.ContainerUpdateLibpod.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Wait on a container
    ///
    /// Wait on a container to meet a given condition
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)`.
    internal func ContainerWaitLibpod(
        path: Operations.ContainerWaitLibpod.Input.Path,
        query: Operations.ContainerWaitLibpod.Input.Query = .init(),
        headers: Operations.ContainerWaitLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerWaitLibpod.Output {
        try await ContainerWaitLibpod(Operations.ContainerWaitLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/create`.
    /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)`.
    internal func ContainerCreateLibpod(
        headers: Operations.ContainerCreateLibpod.Input.Headers = .init(),
        body: Operations.ContainerCreateLibpod.Input.Body
    ) async throws -> Operations.ContainerCreateLibpod.Output {
        try await ContainerCreateLibpod(Operations.ContainerCreateLibpod.Input(
            headers: headers,
            body: body
        ))
    }
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /libpod/containers/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)`.
    internal func ContainerListLibpod(
        query: Operations.ContainerListLibpod.Input.Query = .init(),
        headers: Operations.ContainerListLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerListLibpod.Output {
        try await ContainerListLibpod(Operations.ContainerListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /libpod/containers/prune`.
    /// - Remark: Generated from `#/paths//libpod/containers/prune/post(ContainerPruneLibpod)`.
    internal func ContainerPruneLibpod(
        query: Operations.ContainerPruneLibpod.Input.Query = .init(),
        headers: Operations.ContainerPruneLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainerPruneLibpod.Output {
        try await ContainerPruneLibpod(Operations.ContainerPruneLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Show mounted containers
    ///
    /// Lists all mounted containers mount points
    ///
    /// - Remark: HTTP `GET /libpod/containers/showmounted`.
    /// - Remark: Generated from `#/paths//libpod/containers/showmounted/get(ContainerShowMountedLibpod)`.
    internal func ContainerShowMountedLibpod(headers: Operations.ContainerShowMountedLibpod.Input.Headers = .init()) async throws -> Operations.ContainerShowMountedLibpod.Output {
        try await ContainerShowMountedLibpod(Operations.ContainerShowMountedLibpod.Input(headers: headers))
    }
    /// Get stats for one or more containers
    ///
    /// Return a live stream of resource usage statistics of one or more container. If no container is specified, the statistics of all containers are returned.
    ///
    /// - Remark: HTTP `GET /libpod/containers/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)`.
    internal func ContainersStatsAllLibpod(
        query: Operations.ContainersStatsAllLibpod.Input.Query = .init(),
        headers: Operations.ContainersStatsAllLibpod.Input.Headers = .init()
    ) async throws -> Operations.ContainersStatsAllLibpod.Output {
        try await ContainersStatsAllLibpod(Operations.ContainersStatsAllLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /libpod/events`.
    /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)`.
    internal func SystemEventsLibpod(
        query: Operations.SystemEventsLibpod.Input.Query = .init(),
        headers: Operations.SystemEventsLibpod.Input.Headers = .init()
    ) async throws -> Operations.SystemEventsLibpod.Output {
        try await SystemEventsLibpod(Operations.SystemEventsLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /libpod/exec/{id}/json`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)`.
    internal func ExecInspectLibpod(
        path: Operations.ExecInspectLibpod.Input.Path,
        headers: Operations.ExecInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.ExecInspectLibpod.Output {
        try await ExecInspectLibpod(Operations.ExecInspectLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)`.
    internal func ExecResizeLibpod(
        path: Operations.ExecResizeLibpod.Input.Path,
        query: Operations.ExecResizeLibpod.Input.Query = .init(),
        headers: Operations.ExecResizeLibpod.Input.Headers = .init()
    ) async throws -> Operations.ExecResizeLibpod.Output {
        try await ExecResizeLibpod(Operations.ExecResizeLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command.
    /// Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/start`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)`.
    internal func ExecStartLibpod(
        path: Operations.ExecStartLibpod.Input.Path,
        headers: Operations.ExecStartLibpod.Input.Headers = .init(),
        body: Operations.ExecStartLibpod.Input.Body? = nil
    ) async throws -> Operations.ExecStartLibpod.Output {
        try await ExecStartLibpod(Operations.ExecStartLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Generate Systemd Units
    ///
    /// Generate Systemd Units based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/{name}/systemd`.
    /// - Remark: Generated from `#/paths//libpod/generate/{name}/systemd/get(GenerateSystemdLibpod)`.
    internal func GenerateSystemdLibpod(
        path: Operations.GenerateSystemdLibpod.Input.Path,
        query: Operations.GenerateSystemdLibpod.Input.Query = .init(),
        headers: Operations.GenerateSystemdLibpod.Input.Headers = .init()
    ) async throws -> Operations.GenerateSystemdLibpod.Output {
        try await GenerateSystemdLibpod(Operations.GenerateSystemdLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Generate a Kubernetes YAML file.
    ///
    /// Generate Kubernetes YAML based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/kube`.
    /// - Remark: Generated from `#/paths//libpod/generate/kube/get(GenerateKubeLibpod)`.
    internal func GenerateKubeLibpod(
        query: Operations.GenerateKubeLibpod.Input.Query,
        headers: Operations.GenerateKubeLibpod.Input.Headers = .init()
    ) async throws -> Operations.GenerateKubeLibpod.Output {
        try await GenerateKubeLibpod(Operations.GenerateKubeLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Remove an image from the local storage.
    ///
    /// Remove an image from the local storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)`.
    internal func ImageDeleteLibpod(
        path: Operations.ImageDeleteLibpod.Input.Path,
        query: Operations.ImageDeleteLibpod.Input.Query = .init(),
        headers: Operations.ImageDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageDeleteLibpod.Output {
        try await ImageDeleteLibpod(Operations.ImageDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Report on changes to images's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in an image's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)`.
    internal func ImageChangesLibpod(
        path: Operations.ImageChangesLibpod.Input.Path,
        query: Operations.ImageChangesLibpod.Input.Query = .init(),
        headers: Operations.ImageChangesLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageChangesLibpod.Output {
        try await ImageChangesLibpod(Operations.ImageChangesLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Image exists
    ///
    /// Check if image exists in local store
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)`.
    internal func ImageExistsLibpod(
        path: Operations.ImageExistsLibpod.Input.Path,
        headers: Operations.ImageExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageExistsLibpod.Output {
        try await ImageExistsLibpod(Operations.ImageExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export an image
    ///
    /// Export an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/get`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)`.
    internal func ImageGetLibpod(
        path: Operations.ImageGetLibpod.Input.Path,
        query: Operations.ImageGetLibpod.Input.Query = .init(),
        headers: Operations.ImageGetLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageGetLibpod.Output {
        try await ImageGetLibpod(Operations.ImageGetLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/history`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)`.
    internal func ImageHistoryLibpod(
        path: Operations.ImageHistoryLibpod.Input.Path,
        headers: Operations.ImageHistoryLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageHistoryLibpod.Output {
        try await ImageHistoryLibpod(Operations.ImageHistoryLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect an image
    ///
    /// Obtain low-level information about an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)`.
    internal func ImageInspectLibpod(
        path: Operations.ImageInspectLibpod.Input.Path,
        headers: Operations.ImageInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageInspectLibpod.Output {
        try await ImageInspectLibpod(Operations.ImageInspectLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)`.
    internal func ImagePushLibpod(
        path: Operations.ImagePushLibpod.Input.Path,
        query: Operations.ImagePushLibpod.Input.Query = .init(),
        headers: Operations.ImagePushLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImagePushLibpod.Output {
        try await ImagePushLibpod(Operations.ImagePushLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Resolve an image (short) name
    ///
    /// Resolve the passed image name to a list of fully-qualified images referring to container registries.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/resolve`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)`.
    internal func ImageResolveLibpod(
        path: Operations.ImageResolveLibpod.Input.Path,
        headers: Operations.ImageResolveLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageResolveLibpod.Output {
        try await ImageResolveLibpod(Operations.ImageResolveLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/tag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)`.
    internal func ImageTagLibpod(
        path: Operations.ImageTagLibpod.Input.Path,
        query: Operations.ImageTagLibpod.Input.Query = .init(),
        headers: Operations.ImageTagLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageTagLibpod.Output {
        try await ImageTagLibpod(Operations.ImageTagLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Image tree
    ///
    /// Retrieve the image tree for the provided image name or ID
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/tree`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)`.
    internal func ImageTreeLibpod(
        path: Operations.ImageTreeLibpod.Input.Path,
        query: Operations.ImageTreeLibpod.Input.Query = .init(),
        headers: Operations.ImageTreeLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageTreeLibpod.Output {
        try await ImageTreeLibpod(Operations.ImageTreeLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Untag an image
    ///
    /// Untag an image. If not repo and tag are specified, all tags are removed from the image.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/untag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)`.
    internal func ImageUntagLibpod(
        path: Operations.ImageUntagLibpod.Input.Path,
        query: Operations.ImageUntagLibpod.Input.Query = .init(),
        headers: Operations.ImageUntagLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageUntagLibpod.Output {
        try await ImageUntagLibpod(Operations.ImageUntagLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export multiple images
    ///
    /// Export multiple images into a single object. Only `docker-archive` is currently supported.
    ///
    /// - Remark: HTTP `GET /libpod/images/export`.
    /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)`.
    internal func ImageExportLibpod(
        query: Operations.ImageExportLibpod.Input.Query = .init(),
        headers: Operations.ImageExportLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageExportLibpod.Output {
        try await ImageExportLibpod(Operations.ImageExportLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Import image
    ///
    /// Import a previously exported tarball as an image.
    ///
    /// - Remark: HTTP `POST /libpod/images/import`.
    /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)`.
    internal func ImageImportLibpod(
        query: Operations.ImageImportLibpod.Input.Query = .init(),
        headers: Operations.ImageImportLibpod.Input.Headers = .init(),
        body: Operations.ImageImportLibpod.Input.Body
    ) async throws -> Operations.ImageImportLibpod.Output {
        try await ImageImportLibpod(Operations.ImageImportLibpod.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// List Images
    ///
    /// Returns a list of images on the server
    ///
    /// - Remark: HTTP `GET /libpod/images/json`.
    /// - Remark: Generated from `#/paths//libpod/images/json/get(ImageListLibpod)`.
    internal func ImageListLibpod(
        query: Operations.ImageListLibpod.Input.Query = .init(),
        headers: Operations.ImageListLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageListLibpod.Output {
        try await ImageListLibpod(Operations.ImageListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Load image
    ///
    /// Load an image (oci-archive or docker-archive) stream.
    ///
    /// - Remark: HTTP `POST /libpod/images/load`.
    /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)`.
    internal func ImageLoadLibpod(
        headers: Operations.ImageLoadLibpod.Input.Headers = .init(),
        body: Operations.ImageLoadLibpod.Input.Body
    ) async throws -> Operations.ImageLoadLibpod.Output {
        try await ImageLoadLibpod(Operations.ImageLoadLibpod.Input(
            headers: headers,
            body: body
        ))
    }
    /// Prune unused images
    ///
    /// Remove images that are not being used by a container
    ///
    /// - Remark: HTTP `POST /libpod/images/prune`.
    /// - Remark: Generated from `#/paths//libpod/images/prune/post(ImagePruneLibpod)`.
    internal func ImagePruneLibpod(
        query: Operations.ImagePruneLibpod.Input.Query = .init(),
        headers: Operations.ImagePruneLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImagePruneLibpod.Output {
        try await ImagePruneLibpod(Operations.ImagePruneLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Pull images
    ///
    /// Pull one or more images from a container registry.
    ///
    /// - Remark: HTTP `POST /libpod/images/pull`.
    /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)`.
    internal func ImagePullLibpod(
        query: Operations.ImagePullLibpod.Input.Query = .init(),
        headers: Operations.ImagePullLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImagePullLibpod.Output {
        try await ImagePullLibpod(Operations.ImagePullLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Remove one or more images from the storage.
    ///
    /// Remove one or more images from the storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/remove`.
    /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)`.
    internal func ImageDeleteAllLibpod(
        query: Operations.ImageDeleteAllLibpod.Input.Query = .init(),
        headers: Operations.ImageDeleteAllLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageDeleteAllLibpod.Output {
        try await ImageDeleteAllLibpod(Operations.ImageDeleteAllLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Copy an image from one host to another
    ///
    /// Copy an image from one host to another
    ///
    /// - Remark: HTTP `POST /libpod/images/scp/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)`.
    internal func ImageScpLibpod(
        path: Operations.ImageScpLibpod.Input.Path,
        query: Operations.ImageScpLibpod.Input.Query = .init(),
        headers: Operations.ImageScpLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageScpLibpod.Output {
        try await ImageScpLibpod(Operations.ImageScpLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Search images
    ///
    /// Search registries for images
    ///
    /// - Remark: HTTP `GET /libpod/images/search`.
    /// - Remark: Generated from `#/paths//libpod/images/search/get(ImageSearchLibpod)`.
    internal func ImageSearchLibpod(
        query: Operations.ImageSearchLibpod.Input.Query = .init(),
        headers: Operations.ImageSearchLibpod.Input.Headers = .init()
    ) async throws -> Operations.ImageSearchLibpod.Output {
        try await ImageSearchLibpod(Operations.ImageSearchLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /libpod/info`.
    /// - Remark: Generated from `#/paths//libpod/info/get(SystemInfoLibpod)`.
    internal func SystemInfoLibpod(headers: Operations.SystemInfoLibpod.Input.Headers = .init()) async throws -> Operations.SystemInfoLibpod.Output {
        try await SystemInfoLibpod(Operations.SystemInfoLibpod.Input(headers: headers))
    }
    /// Apply a podman workload or Kubernetes YAML file.
    ///
    /// Deploy a podman container, pod, volume, or Kubernetes yaml to a Kubernetes cluster.
    ///
    /// - Remark: HTTP `POST /libpod/kube/apply`.
    /// - Remark: Generated from `#/paths//libpod/kube/apply/post(KubeApplyLibpod)`.
    internal func KubeApplyLibpod(
        query: Operations.KubeApplyLibpod.Input.Query = .init(),
        headers: Operations.KubeApplyLibpod.Input.Headers = .init(),
        body: Components.RequestBodies.KubeApplyLibpodRequest? = nil
    ) async throws -> Operations.KubeApplyLibpod.Output {
        try await KubeApplyLibpod(Operations.KubeApplyLibpod.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Create
    ///
    /// Create a manifest list
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)`.
    internal func ManifestCreateLibpod(
        path: Operations.ManifestCreateLibpod.Input.Path,
        query: Operations.ManifestCreateLibpod.Input.Query,
        headers: Operations.ManifestCreateLibpod.Input.Headers = .init(),
        body: Operations.ManifestCreateLibpod.Input.Body? = nil
    ) async throws -> Operations.ManifestCreateLibpod.Output {
        try await ManifestCreateLibpod(Operations.ManifestCreateLibpod.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Modify manifest list
    ///
    /// Add/Remove an image(s) to a manifest list
    ///
    /// Note: operations are not atomic when multiple Images are provided.
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `PUT /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)`.
    internal func ManifestModifyLibpod(
        path: Operations.ManifestModifyLibpod.Input.Path,
        query: Operations.ManifestModifyLibpod.Input.Query = .init(),
        headers: Operations.ManifestModifyLibpod.Input.Headers = .init(),
        body: Operations.ManifestModifyLibpod.Input.Body
    ) async throws -> Operations.ManifestModifyLibpod.Output {
        try await ManifestModifyLibpod(Operations.ManifestModifyLibpod.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Delete manifest list
    ///
    /// Delete named manifest list
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `DELETE /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)`.
    internal func ManifestDeleteLibpod(
        path: Operations.ManifestDeleteLibpod.Input.Path,
        query: Operations.ManifestDeleteLibpod.Input.Query = .init(),
        headers: Operations.ManifestDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.ManifestDeleteLibpod.Output {
        try await ManifestDeleteLibpod(Operations.ManifestDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add image
    ///
    /// Add an image to a manifest list
    ///
    /// Deprecated: As of 4.0.0 use ManifestModifyLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/add`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)`.
    internal func ManifestAddLibpod(
        path: Operations.ManifestAddLibpod.Input.Path,
        headers: Operations.ManifestAddLibpod.Input.Headers = .init(),
        body: Operations.ManifestAddLibpod.Input.Body? = nil
    ) async throws -> Operations.ManifestAddLibpod.Output {
        try await ManifestAddLibpod(Operations.ManifestAddLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Exists
    ///
    /// Check if manifest list exists
    ///
    /// Note: There is no contract that the manifest list will exist for a follow-on operation
    ///
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)`.
    internal func ManifestExistsLibpod(
        path: Operations.ManifestExistsLibpod.Input.Path,
        headers: Operations.ManifestExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.ManifestExistsLibpod.Output {
        try await ManifestExistsLibpod(Operations.ManifestExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect
    ///
    /// Display attributes of given manifest list
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)`.
    internal func ManifestInspectLibpod(
        path: Operations.ManifestInspectLibpod.Input.Path,
        query: Operations.ManifestInspectLibpod.Input.Query = .init(),
        headers: Operations.ManifestInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.ManifestInspectLibpod.Output {
        try await ManifestInspectLibpod(Operations.ManifestInspectLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Push manifest to registry
    ///
    /// Push a manifest list or image index to a registry
    ///
    /// Deprecated: As of 4.0.0 use ManifestPushLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)`.
    internal func ManifestPushV3Libpod(
        path: Operations.ManifestPushV3Libpod.Input.Path,
        query: Operations.ManifestPushV3Libpod.Input.Query,
        headers: Operations.ManifestPushV3Libpod.Input.Headers = .init()
    ) async throws -> Operations.ManifestPushV3Libpod.Output {
        try await ManifestPushV3Libpod(Operations.ManifestPushV3Libpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Push manifest list to registry
    ///
    /// Push a manifest list or image index to the named registry
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/registry/{destination}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)`.
    internal func ManifestPushLibpod(
        path: Operations.ManifestPushLibpod.Input.Path,
        query: Operations.ManifestPushLibpod.Input.Query = .init(),
        headers: Operations.ManifestPushLibpod.Input.Headers = .init()
    ) async throws -> Operations.ManifestPushLibpod.Output {
        try await ManifestPushLibpod(Operations.ManifestPushLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Remove a network
    ///
    /// Remove a configured network
    ///
    /// - Remark: HTTP `DELETE /libpod/networks/{name}`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)`.
    internal func NetworkDeleteLibpod(
        path: Operations.NetworkDeleteLibpod.Input.Path,
        query: Operations.NetworkDeleteLibpod.Input.Query = .init(),
        headers: Operations.NetworkDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.NetworkDeleteLibpod.Output {
        try await NetworkDeleteLibpod(Operations.NetworkDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Connect container to network
    ///
    /// Connect a container to a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)`.
    internal func NetworkConnectLibpod(
        path: Operations.NetworkConnectLibpod.Input.Path,
        headers: Operations.NetworkConnectLibpod.Input.Headers = .init(),
        body: Operations.NetworkConnectLibpod.Input.Body? = nil
    ) async throws -> Operations.NetworkConnectLibpod.Output {
        try await NetworkConnectLibpod(Operations.NetworkConnectLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)`.
    internal func NetworkDisconnectLibpod(
        path: Operations.NetworkDisconnectLibpod.Input.Path,
        headers: Operations.NetworkDisconnectLibpod.Input.Headers = .init(),
        body: Components.RequestBodies.networkDisconnectRequest? = nil
    ) async throws -> Operations.NetworkDisconnectLibpod.Output {
        try await NetworkDisconnectLibpod(Operations.NetworkDisconnectLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Network exists
    ///
    /// Check if network exists
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)`.
    internal func NetworkExistsLibpod(
        path: Operations.NetworkExistsLibpod.Input.Path,
        headers: Operations.NetworkExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.NetworkExistsLibpod.Output {
        try await NetworkExistsLibpod(Operations.NetworkExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect a network
    ///
    /// Display configuration for a network.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)`.
    internal func NetworkInspectLibpod(
        path: Operations.NetworkInspectLibpod.Input.Path,
        headers: Operations.NetworkInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.NetworkInspectLibpod.Output {
        try await NetworkInspectLibpod(Operations.NetworkInspectLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update existing podman network
    ///
    /// Update existing podman network
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)`.
    internal func NetworkUpdateLibpod(
        path: Operations.NetworkUpdateLibpod.Input.Path,
        headers: Operations.NetworkUpdateLibpod.Input.Headers = .init(),
        body: Operations.NetworkUpdateLibpod.Input.Body? = nil
    ) async throws -> Operations.NetworkUpdateLibpod.Output {
        try await NetworkUpdateLibpod(Operations.NetworkUpdateLibpod.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create network
    ///
    /// Create a new network configuration
    ///
    /// - Remark: HTTP `POST /libpod/networks/create`.
    /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)`.
    internal func NetworkCreateLibpod(
        headers: Operations.NetworkCreateLibpod.Input.Headers = .init(),
        body: Operations.NetworkCreateLibpod.Input.Body? = nil
    ) async throws -> Operations.NetworkCreateLibpod.Output {
        try await NetworkCreateLibpod(Operations.NetworkCreateLibpod.Input(
            headers: headers,
            body: body
        ))
    }
    /// List networks
    ///
    /// Display summary of network configurations.
    ///   - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/json/get(NetworkListLibpod)`.
    internal func NetworkListLibpod(
        query: Operations.NetworkListLibpod.Input.Query = .init(),
        headers: Operations.NetworkListLibpod.Input.Headers = .init()
    ) async throws -> Operations.NetworkListLibpod.Output {
        try await NetworkListLibpod(Operations.NetworkListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /libpod/networks/prune`.
    /// - Remark: Generated from `#/paths//libpod/networks/prune/post(NetworkPruneLibpod)`.
    internal func NetworkPruneLibpod(
        query: Operations.NetworkPruneLibpod.Input.Query = .init(),
        headers: Operations.NetworkPruneLibpod.Input.Headers = .init()
    ) async throws -> Operations.NetworkPruneLibpod.Output {
        try await NetworkPruneLibpod(Operations.NetworkPruneLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Play a Kubernetes YAML file.
    ///
    /// Create and run pods based on a Kubernetes YAML file.
    ///
    /// ### Content-Type
    ///
    /// Then endpoint support two Content-Type
    ///  - `plain/text` for yaml format
    ///  - `application/x-tar` for sending context(s) required for building images
    ///
    /// #### Tar format
    ///
    /// The tar format must contain a `play.yaml` file at the root that will be used.
    /// If the file format requires context to build an image, it uses the image name and
    /// check for corresponding folder.
    ///
    /// For example, the client sends a tar file with the following structure:
    ///
    /// ```
    /// â””â”€â”€ content.tar
    ///  â”œâ”€â”€ play.yaml
    ///  â””â”€â”€ foobar/
    ///      â””â”€â”€ Containerfile
    /// ```
    ///
    /// The `play.yaml` is the following, the `foobar` image means we are looking for a context with this name.
    /// ```
    /// apiVersion: v1
    /// kind: Pod
    /// metadata:
    /// name: demo-build-remote
    /// spec:
    /// containers:
    ///  - name: container
    ///    image: foobar
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/post(PlayKubeLibpod)`.
    internal func PlayKubeLibpod(
        query: Operations.PlayKubeLibpod.Input.Query = .init(),
        headers: Operations.PlayKubeLibpod.Input.Headers = .init(),
        body: Components.RequestBodies.KubeApplyLibpodRequest? = nil
    ) async throws -> Operations.PlayKubeLibpod.Output {
        try await PlayKubeLibpod(Operations.PlayKubeLibpod.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Remove resources created from kube play
    ///
    /// Tears down pods, secrets, and volumes defined in a YAML file
    ///
    /// - Remark: HTTP `DELETE /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/delete(PlayKubeDownLibpod)`.
    internal func PlayKubeDownLibpod(
        query: Operations.PlayKubeDownLibpod.Input.Query = .init(),
        headers: Operations.PlayKubeDownLibpod.Input.Headers = .init()
    ) async throws -> Operations.PlayKubeDownLibpod.Output {
        try await PlayKubeDownLibpod(Operations.PlayKubeDownLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Remove pod
    ///
    /// - Remark: HTTP `DELETE /libpod/pods/{name}`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)`.
    internal func PodDeleteLibpod(
        path: Operations.PodDeleteLibpod.Input.Path,
        query: Operations.PodDeleteLibpod.Input.Query = .init(),
        headers: Operations.PodDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodDeleteLibpod.Output {
        try await PodDeleteLibpod(Operations.PodDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Pod exists
    ///
    /// Check if a pod exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)`.
    internal func PodExistsLibpod(
        path: Operations.PodExistsLibpod.Input.Path,
        headers: Operations.PodExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodExistsLibpod.Output {
        try await PodExistsLibpod(Operations.PodExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)`.
    internal func PodInspectLibpod(
        path: Operations.PodInspectLibpod.Input.Path,
        headers: Operations.PodInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodInspectLibpod.Output {
        try await PodInspectLibpod(Operations.PodInspectLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Kill a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)`.
    internal func PodKillLibpod(
        path: Operations.PodKillLibpod.Input.Path,
        query: Operations.PodKillLibpod.Input.Query = .init(),
        headers: Operations.PodKillLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodKillLibpod.Output {
        try await PodKillLibpod(Operations.PodKillLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Pause a pod
    ///
    /// Pause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)`.
    internal func PodPauseLibpod(
        path: Operations.PodPauseLibpod.Input.Path,
        headers: Operations.PodPauseLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodPauseLibpod.Output {
        try await PodPauseLibpod(Operations.PodPauseLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restart a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)`.
    internal func PodRestartLibpod(
        path: Operations.PodRestartLibpod.Input.Path,
        headers: Operations.PodRestartLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodRestartLibpod.Output {
        try await PodRestartLibpod(Operations.PodRestartLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Start a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)`.
    internal func PodStartLibpod(
        path: Operations.PodStartLibpod.Input.Path,
        headers: Operations.PodStartLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodStartLibpod.Output {
        try await PodStartLibpod(Operations.PodStartLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Stop a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)`.
    internal func PodStopLibpod(
        path: Operations.PodStopLibpod.Input.Path,
        query: Operations.PodStopLibpod.Input.Query = .init(),
        headers: Operations.PodStopLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodStopLibpod.Output {
        try await PodStopLibpod(Operations.PodStopLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List processes
    ///
    /// List processes running inside a pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)`.
    internal func PodTopLibpod(
        path: Operations.PodTopLibpod.Input.Path,
        query: Operations.PodTopLibpod.Input.Query = .init(),
        headers: Operations.PodTopLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodTopLibpod.Output {
        try await PodTopLibpod(Operations.PodTopLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Unpause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)`.
    internal func PodUnpauseLibpod(
        path: Operations.PodUnpauseLibpod.Input.Path,
        headers: Operations.PodUnpauseLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodUnpauseLibpod.Output {
        try await PodUnpauseLibpod(Operations.PodUnpauseLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/create`.
    /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)`.
    internal func PodCreateLibpod(
        headers: Operations.PodCreateLibpod.Input.Headers = .init(),
        body: Operations.PodCreateLibpod.Input.Body? = nil
    ) async throws -> Operations.PodCreateLibpod.Output {
        try await PodCreateLibpod(Operations.PodCreateLibpod.Input(
            headers: headers,
            body: body
        ))
    }
    /// List pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)`.
    internal func PodListLibpod(
        query: Operations.PodListLibpod.Input.Query = .init(),
        headers: Operations.PodListLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodListLibpod.Output {
        try await PodListLibpod(Operations.PodListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Prune unused pods
    ///
    /// - Remark: HTTP `POST /libpod/pods/prune`.
    /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)`.
    internal func PodPruneLibpod(headers: Operations.PodPruneLibpod.Input.Headers = .init()) async throws -> Operations.PodPruneLibpod.Output {
        try await PodPruneLibpod(Operations.PodPruneLibpod.Input(headers: headers))
    }
    /// Statistics for one or more pods
    ///
    /// Display a live stream of resource usage statistics for the containers in one or more pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/stats`.
    /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)`.
    internal func PodStatsAllLibpod(
        query: Operations.PodStatsAllLibpod.Input.Query = .init(),
        headers: Operations.PodStatsAllLibpod.Input.Headers = .init()
    ) async throws -> Operations.PodStatsAllLibpod.Output {
        try await PodStatsAllLibpod(Operations.PodStatsAllLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /libpod/secrets/{name}`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)`.
    internal func SecretDeleteLibpod(
        path: Operations.SecretDeleteLibpod.Input.Path,
        query: Operations.SecretDeleteLibpod.Input.Query = .init(),
        headers: Operations.SecretDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.SecretDeleteLibpod.Output {
        try await SecretDeleteLibpod(Operations.SecretDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Secret exists
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)`.
    internal func SecretExistsLibpod(
        path: Operations.SecretExistsLibpod.Input.Path,
        headers: Operations.SecretExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.SecretExistsLibpod.Output {
        try await SecretExistsLibpod(Operations.SecretExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)`.
    internal func SecretInspectLibpod(
        path: Operations.SecretInspectLibpod.Input.Path,
        query: Operations.SecretInspectLibpod.Input.Query = .init(),
        headers: Operations.SecretInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.SecretInspectLibpod.Output {
        try await SecretInspectLibpod(Operations.SecretInspectLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /libpod/secrets/create`.
    /// - Remark: Generated from `#/paths//libpod/secrets/create/post(SecretCreateLibpod)`.
    internal func SecretCreateLibpod(
        query: Operations.SecretCreateLibpod.Input.Query,
        headers: Operations.SecretCreateLibpod.Input.Headers = .init(),
        body: Operations.SecretCreateLibpod.Input.Body? = nil
    ) async throws -> Operations.SecretCreateLibpod.Output {
        try await SecretCreateLibpod(Operations.SecretCreateLibpod.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /libpod/secrets/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/json/get(SecretListLibpod)`.
    internal func SecretListLibpod(
        query: Operations.SecretListLibpod.Input.Query = .init(),
        headers: Operations.SecretListLibpod.Input.Headers = .init()
    ) async throws -> Operations.SecretListLibpod.Output {
        try await SecretListLibpod(Operations.SecretListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Performs consistency checks on storage, optionally removing items which fail checks
    ///
    /// - Remark: HTTP `POST /libpod/system/check`.
    /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)`.
    internal func SystemCheckLibpod(
        query: Operations.SystemCheckLibpod.Input.Query = .init(),
        headers: Operations.SystemCheckLibpod.Input.Headers = .init()
    ) async throws -> Operations.SystemCheckLibpod.Output {
        try await SystemCheckLibpod(Operations.SystemCheckLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /libpod/system/df`.
    /// - Remark: Generated from `#/paths//libpod/system/df/get(SystemDataUsageLibpod)`.
    internal func SystemDataUsageLibpod(headers: Operations.SystemDataUsageLibpod.Input.Headers = .init()) async throws -> Operations.SystemDataUsageLibpod.Output {
        try await SystemDataUsageLibpod(Operations.SystemDataUsageLibpod.Input(headers: headers))
    }
    /// Prune unused data
    ///
    /// - Remark: HTTP `POST /libpod/system/prune`.
    /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)`.
    internal func SystemPruneLibpod(headers: Operations.SystemPruneLibpod.Input.Headers = .init()) async throws -> Operations.SystemPruneLibpod.Output {
        try await SystemPruneLibpod(Operations.SystemPruneLibpod.Input(headers: headers))
    }
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /libpod/version`.
    /// - Remark: Generated from `#/paths//libpod/version/get(SystemVersionLibpod)`.
    internal func SystemVersionLibpod(headers: Operations.SystemVersionLibpod.Input.Headers = .init()) async throws -> Operations.SystemVersionLibpod.Output {
        try await SystemVersionLibpod(Operations.SystemVersionLibpod.Input(headers: headers))
    }
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /libpod/volumes/{name}`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)`.
    internal func VolumeDeleteLibpod(
        path: Operations.VolumeDeleteLibpod.Input.Path,
        query: Operations.VolumeDeleteLibpod.Input.Query = .init(),
        headers: Operations.VolumeDeleteLibpod.Input.Headers = .init()
    ) async throws -> Operations.VolumeDeleteLibpod.Output {
        try await VolumeDeleteLibpod(Operations.VolumeDeleteLibpod.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Volume exists
    ///
    /// Check if a volume exists
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)`.
    internal func VolumeExistsLibpod(
        path: Operations.VolumeExistsLibpod.Input.Path,
        headers: Operations.VolumeExistsLibpod.Input.Headers = .init()
    ) async throws -> Operations.VolumeExistsLibpod.Output {
        try await VolumeExistsLibpod(Operations.VolumeExistsLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)`.
    internal func VolumeInspectLibpod(
        path: Operations.VolumeInspectLibpod.Input.Path,
        headers: Operations.VolumeInspectLibpod.Input.Headers = .init()
    ) async throws -> Operations.VolumeInspectLibpod.Output {
        try await VolumeInspectLibpod(Operations.VolumeInspectLibpod.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /libpod/volumes/create`.
    /// - Remark: Generated from `#/paths//libpod/volumes/create/post(VolumeCreateLibpod)`.
    internal func VolumeCreateLibpod(
        headers: Operations.VolumeCreateLibpod.Input.Headers = .init(),
        body: Operations.VolumeCreateLibpod.Input.Body? = nil
    ) async throws -> Operations.VolumeCreateLibpod.Output {
        try await VolumeCreateLibpod(Operations.VolumeCreateLibpod.Input(
            headers: headers,
            body: body
        ))
    }
    /// List volumes
    ///
    /// Returns a list of volumes
    ///
    /// - Remark: HTTP `GET /libpod/volumes/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/json/get(VolumeListLibpod)`.
    internal func VolumeListLibpod(
        query: Operations.VolumeListLibpod.Input.Query = .init(),
        headers: Operations.VolumeListLibpod.Input.Headers = .init()
    ) async throws -> Operations.VolumeListLibpod.Output {
        try await VolumeListLibpod(Operations.VolumeListLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /libpod/volumes/prune`.
    /// - Remark: Generated from `#/paths//libpod/volumes/prune/post(VolumePruneLibpod)`.
    internal func VolumePruneLibpod(
        query: Operations.VolumePruneLibpod.Input.Query = .init(),
        headers: Operations.VolumePruneLibpod.Input.Headers = .init()
    ) async throws -> Operations.VolumePruneLibpod.Output {
        try await VolumePruneLibpod(Operations.VolumePruneLibpod.Input(
            query: query,
            headers: headers
        ))
    }
    /// List networks
    ///
    /// Display summary of network configurations
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    internal func NetworkList(
        query: Operations.NetworkList.Input.Query = .init(),
        headers: Operations.NetworkList.Input.Headers = .init()
    ) async throws -> Operations.NetworkList.Output {
        try await NetworkList(Operations.NetworkList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect a network
    ///
    /// Display low level configuration network
    ///
    /// - Remark: HTTP `GET /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)`.
    internal func NetworkInspect(
        path: Operations.NetworkInspect.Input.Path,
        query: Operations.NetworkInspect.Input.Query = .init(),
        headers: Operations.NetworkInspect.Input.Headers = .init()
    ) async throws -> Operations.NetworkInspect.Output {
        try await NetworkInspect(Operations.NetworkInspect.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Remove a network
    ///
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)`.
    internal func NetworkDelete(
        path: Operations.NetworkDelete.Input.Path,
        headers: Operations.NetworkDelete.Input.Headers = .init()
    ) async throws -> Operations.NetworkDelete.Output {
        try await NetworkDelete(Operations.NetworkDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Connect container to network
    ///
    /// Connect a container to a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)`.
    internal func NetworkConnect(
        path: Operations.NetworkConnect.Input.Path,
        headers: Operations.NetworkConnect.Input.Headers = .init(),
        body: Operations.NetworkConnect.Input.Body? = nil
    ) async throws -> Operations.NetworkConnect.Output {
        try await NetworkConnect(Operations.NetworkConnect.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)`.
    internal func NetworkDisconnect(
        path: Operations.NetworkDisconnect.Input.Path,
        headers: Operations.NetworkDisconnect.Input.Headers = .init(),
        body: Components.RequestBodies.networkDisconnectRequest? = nil
    ) async throws -> Operations.NetworkDisconnect.Output {
        try await NetworkDisconnect(Operations.NetworkDisconnect.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create network
    ///
    /// Create a network configuration
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    internal func NetworkCreate(
        headers: Operations.NetworkCreate.Input.Headers = .init(),
        body: Operations.NetworkCreate.Input.Body? = nil
    ) async throws -> Operations.NetworkCreate.Output {
        try await NetworkCreate(Operations.NetworkCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    internal func NetworkPrune(
        query: Operations.NetworkPrune.Input.Query = .init(),
        headers: Operations.NetworkPrune.Input.Headers = .init()
    ) async throws -> Operations.NetworkPrune.Output {
        try await NetworkPrune(Operations.NetworkPrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    internal func SecretList(
        query: Operations.SecretList.Input.Query = .init(),
        headers: Operations.SecretList.Input.Headers = .init()
    ) async throws -> Operations.SecretList.Output {
        try await SecretList(Operations.SecretList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)`.
    internal func SecretInspect(
        path: Operations.SecretInspect.Input.Path,
        headers: Operations.SecretInspect.Input.Headers = .init()
    ) async throws -> Operations.SecretInspect.Output {
        try await SecretInspect(Operations.SecretInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)`.
    internal func SecretDelete(
        path: Operations.SecretDelete.Input.Path,
        headers: Operations.SecretDelete.Input.Headers = .init()
    ) async throws -> Operations.SecretDelete.Output {
        try await SecretDelete(Operations.SecretDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    internal func SecretCreate(
        headers: Operations.SecretCreate.Input.Headers = .init(),
        body: Operations.SecretCreate.Input.Body? = nil
    ) async throws -> Operations.SecretCreate.Output {
        try await SecretCreate(Operations.SecretCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    internal func SystemDataUsage(headers: Operations.SystemDataUsage.Input.Headers = .init()) async throws -> Operations.SystemDataUsage.Output {
        try await SystemDataUsage(Operations.SystemDataUsage.Input(headers: headers))
    }
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    internal func SystemVersion(headers: Operations.SystemVersion.Input.Headers = .init()) async throws -> Operations.SystemVersion.Output {
        try await SystemVersion(Operations.SystemVersion.Input(headers: headers))
    }
    /// List volumes
    ///
    /// Returns a list of volume
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    internal func VolumeList(
        query: Operations.VolumeList.Input.Query = .init(),
        headers: Operations.VolumeList.Input.Headers = .init()
    ) async throws -> Operations.VolumeList.Output {
        try await VolumeList(Operations.VolumeList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    internal func VolumeInspect(
        path: Operations.VolumeInspect.Input.Path,
        headers: Operations.VolumeInspect.Input.Headers = .init()
    ) async throws -> Operations.VolumeInspect.Output {
        try await VolumeInspect(Operations.VolumeInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    internal func VolumeDelete(
        path: Operations.VolumeDelete.Input.Path,
        query: Operations.VolumeDelete.Input.Query = .init(),
        headers: Operations.VolumeDelete.Input.Headers = .init()
    ) async throws -> Operations.VolumeDelete.Output {
        try await VolumeDelete(Operations.VolumeDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    internal func VolumeCreate(
        headers: Operations.VolumeCreate.Input.Headers = .init(),
        body: Operations.VolumeCreate.Input.Body? = nil
    ) async throws -> Operations.VolumeCreate.Output {
        try await VolumeCreate(Operations.VolumeCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    internal func VolumePrune(
        query: Operations.VolumePrune.Input.Query = .init(),
        headers: Operations.VolumePrune.Input.Headers = .init()
    ) async throws -> Operations.VolumePrune.Output {
        try await VolumePrune(Operations.VolumePrune.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal enum Server1 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "http://podman.io",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://podman.io",
            variables: []
        )
    }
    internal enum Server2 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://podman.io",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server2.url")
    internal static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://podman.io",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AccessMode`.
        internal struct AccessMode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessMode/BlockVolume`.
            internal var BlockVolume: Components.Schemas.TypeBlock?
            /// - Remark: Generated from `#/components/schemas/AccessMode/MountVolume`.
            internal var MountVolume: Components.Schemas.TypeMount?
            /// - Remark: Generated from `#/components/schemas/AccessMode/Scope`.
            internal var Scope: Components.Schemas.Scope?
            /// - Remark: Generated from `#/components/schemas/AccessMode/Sharing`.
            internal var Sharing: Components.Schemas.SharingMode?
            /// Creates a new `AccessMode`.
            ///
            /// - Parameters:
            ///   - BlockVolume:
            ///   - MountVolume:
            ///   - Scope:
            ///   - Sharing:
            internal init(
                BlockVolume: Components.Schemas.TypeBlock? = nil,
                MountVolume: Components.Schemas.TypeMount? = nil,
                Scope: Components.Schemas.Scope? = nil,
                Sharing: Components.Schemas.SharingMode? = nil
            ) {
                self.BlockVolume = BlockVolume
                self.MountVolume = MountVolume
                self.Scope = Scope
                self.Sharing = Sharing
            }
            internal enum CodingKeys: String, CodingKey {
                case BlockVolume
                case MountVolume
                case Scope
                case Sharing
            }
        }
        /// - Remark: Generated from `#/components/schemas/Address`.
        internal struct Address: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Address/Addr`.
            internal var Addr: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Address/PrefixLength`.
            internal var PrefixLength: Swift.Int64?
            /// Creates a new `Address`.
            ///
            /// - Parameters:
            ///   - Addr:
            ///   - PrefixLength:
            internal init(
                Addr: Swift.String? = nil,
                PrefixLength: Swift.Int64? = nil
            ) {
                self.Addr = Addr
                self.PrefixLength = PrefixLength
            }
            internal enum CodingKeys: String, CodingKey {
                case Addr
                case PrefixLength
            }
        }
        /// - Remark: Generated from `#/components/schemas/AttestationProperties`.
        internal struct AttestationProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AttestationProperties/For`.
            internal var For: Components.Schemas.Digest?
            /// Creates a new `AttestationProperties`.
            ///
            /// - Parameters:
            ///   - For:
            internal init(For: Components.Schemas.Digest? = nil) {
                self.For = For
            }
            internal enum CodingKeys: String, CodingKey {
                case For
            }
        }
        /// AuthConfig contains authorization information for connecting to a Registry
        ///
        /// - Remark: Generated from `#/components/schemas/AuthConfig`.
        internal struct AuthConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthConfig/auth`.
            internal var auth: Swift.String?
            /// Email is an optional value associated with the username.
            /// This field is deprecated and will be removed in a later
            /// version of docker.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthConfig/email`.
            internal var email: Swift.String?
            /// IdentityToken is used to authenticate the user and get
            /// an access token for the registry.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthConfig/identitytoken`.
            internal var identitytoken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/password`.
            internal var password: Swift.String?
            /// RegistryToken is a bearer token to be sent to a registry
            ///
            /// - Remark: Generated from `#/components/schemas/AuthConfig/registrytoken`.
            internal var registrytoken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/serveraddress`.
            internal var serveraddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/username`.
            internal var username: Swift.String?
            /// Creates a new `AuthConfig`.
            ///
            /// - Parameters:
            ///   - auth:
            ///   - email: Email is an optional value associated with the username.
            ///   - identitytoken: IdentityToken is used to authenticate the user and get
            ///   - password:
            ///   - registrytoken: RegistryToken is a bearer token to be sent to a registry
            ///   - serveraddress:
            ///   - username:
            internal init(
                auth: Swift.String? = nil,
                email: Swift.String? = nil,
                identitytoken: Swift.String? = nil,
                password: Swift.String? = nil,
                registrytoken: Swift.String? = nil,
                serveraddress: Swift.String? = nil,
                username: Swift.String? = nil
            ) {
                self.auth = auth
                self.email = email
                self.identitytoken = identitytoken
                self.password = password
                self.registrytoken = registrytoken
                self.serveraddress = serveraddress
                self.username = username
            }
            internal enum CodingKeys: String, CodingKey {
                case auth
                case email
                case identitytoken
                case password
                case registrytoken
                case serveraddress
                case username
            }
        }
        /// AuthReport describes the response for authentication check
        ///
        /// - Remark: Generated from `#/components/schemas/AuthReport`.
        internal struct AuthReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthReport/IdentityToken`.
            internal var IdentityToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthReport/Status`.
            internal var Status: Swift.String?
            /// Creates a new `AuthReport`.
            ///
            /// - Parameters:
            ///   - IdentityToken:
            ///   - Status:
            internal init(
                IdentityToken: Swift.String? = nil,
                Status: Swift.String? = nil
            ) {
                self.IdentityToken = IdentityToken
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case IdentityToken
                case Status
            }
        }
        /// AuthenticateOKBody authenticate o k body
        ///
        /// - Remark: Generated from `#/components/schemas/AuthenticateOKBody`.
        internal struct AuthenticateOKBody: Codable, Hashable, Sendable {
            /// An opaque token used to authenticate a user after a successful login
            ///
            /// - Remark: Generated from `#/components/schemas/AuthenticateOKBody/IdentityToken`.
            internal var IdentityToken: Swift.String
            /// The status of the authentication
            ///
            /// - Remark: Generated from `#/components/schemas/AuthenticateOKBody/Status`.
            internal var Status: Swift.String
            /// Creates a new `AuthenticateOKBody`.
            ///
            /// - Parameters:
            ///   - IdentityToken: An opaque token used to authenticate a user after a successful login
            ///   - Status: The status of the authentication
            internal init(
                IdentityToken: Swift.String,
                Status: Swift.String
            ) {
                self.IdentityToken = IdentityToken
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case IdentityToken
                case Status
            }
        }
        /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions`.
        internal struct AutoUserNsOptions: Codable, Hashable, Sendable {
            /// AdditionalGIDMappings specified additional GID mappings to include in
            /// the generated user namespace.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/AdditionalGIDMappings`.
            internal var AdditionalGIDMappings: [Components.Schemas.IDMap]?
            /// AdditionalUIDMappings specified additional UID mappings to include in
            /// the generated user namespace.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/AdditionalUIDMappings`.
            internal var AdditionalUIDMappings: [Components.Schemas.IDMap]?
            /// GroupFile to use if the container uses a volume.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/GroupFile`.
            internal var GroupFile: Swift.String?
            /// InitialSize defines the minimum size for the user namespace.
            /// The created user namespace will have at least this size.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/InitialSize`.
            internal var InitialSize: Swift.Int?
            /// PasswdFile to use if the container uses a volume.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/PasswdFile`.
            internal var PasswdFile: Swift.String?
            /// Size defines the size for the user namespace.  If it is set to a
            /// value bigger than 0, the user namespace will have exactly this size.
            /// If it is not set, some heuristics will be used to find its size.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoUserNsOptions/Size`.
            internal var Size: Swift.Int?
            /// Creates a new `AutoUserNsOptions`.
            ///
            /// - Parameters:
            ///   - AdditionalGIDMappings: AdditionalGIDMappings specified additional GID mappings to include in
            ///   - AdditionalUIDMappings: AdditionalUIDMappings specified additional UID mappings to include in
            ///   - GroupFile: GroupFile to use if the container uses a volume.
            ///   - InitialSize: InitialSize defines the minimum size for the user namespace.
            ///   - PasswdFile: PasswdFile to use if the container uses a volume.
            ///   - Size: Size defines the size for the user namespace.  If it is set to a
            internal init(
                AdditionalGIDMappings: [Components.Schemas.IDMap]? = nil,
                AdditionalUIDMappings: [Components.Schemas.IDMap]? = nil,
                GroupFile: Swift.String? = nil,
                InitialSize: Swift.Int? = nil,
                PasswdFile: Swift.String? = nil,
                Size: Swift.Int? = nil
            ) {
                self.AdditionalGIDMappings = AdditionalGIDMappings
                self.AdditionalUIDMappings = AdditionalUIDMappings
                self.GroupFile = GroupFile
                self.InitialSize = InitialSize
                self.PasswdFile = PasswdFile
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case AdditionalGIDMappings
                case AdditionalUIDMappings
                case GroupFile
                case InitialSize
                case PasswdFile
                case Size
            }
        }
        /// - Remark: Generated from `#/components/schemas/Availability`.
        internal typealias Availability = Swift.String
        /// - Remark: Generated from `#/components/schemas/BindOptions`.
        internal struct BindOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BindOptions/CreateMountpoint`.
            internal var CreateMountpoint: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BindOptions/NonRecursive`.
            internal var NonRecursive: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BindOptions/Propagation`.
            internal var Propagation: Components.Schemas.Propagation?
            /// ReadOnlyForceRecursive raises an error if the mount cannot be made recursively read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/BindOptions/ReadOnlyForceRecursive`.
            internal var ReadOnlyForceRecursive: Swift.Bool?
            /// ReadOnlyNonRecursive makes the mount non-recursively read-only, but still leaves the mount recursive
            /// (unless NonRecursive is set to true in conjunction).
            ///
            /// - Remark: Generated from `#/components/schemas/BindOptions/ReadOnlyNonRecursive`.
            internal var ReadOnlyNonRecursive: Swift.Bool?
            /// Creates a new `BindOptions`.
            ///
            /// - Parameters:
            ///   - CreateMountpoint:
            ///   - NonRecursive:
            ///   - Propagation:
            ///   - ReadOnlyForceRecursive: ReadOnlyForceRecursive raises an error if the mount cannot be made recursively read-only.
            ///   - ReadOnlyNonRecursive: ReadOnlyNonRecursive makes the mount non-recursively read-only, but still leaves the mount recursive
            internal init(
                CreateMountpoint: Swift.Bool? = nil,
                NonRecursive: Swift.Bool? = nil,
                Propagation: Components.Schemas.Propagation? = nil,
                ReadOnlyForceRecursive: Swift.Bool? = nil,
                ReadOnlyNonRecursive: Swift.Bool? = nil
            ) {
                self.CreateMountpoint = CreateMountpoint
                self.NonRecursive = NonRecursive
                self.Propagation = Propagation
                self.ReadOnlyForceRecursive = ReadOnlyForceRecursive
                self.ReadOnlyNonRecursive = ReadOnlyNonRecursive
            }
            internal enum CodingKeys: String, CodingKey {
                case CreateMountpoint
                case NonRecursive
                case Propagation
                case ReadOnlyForceRecursive
                case ReadOnlyNonRecursive
            }
        }
        /// - Remark: Generated from `#/components/schemas/CPUUsage`.
        internal struct CPUUsage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CPUUsage/idlePercent`.
            internal var idlePercent: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CPUUsage/systemPercent`.
            internal var systemPercent: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CPUUsage/userPercent`.
            internal var userPercent: Swift.Double?
            /// Creates a new `CPUUsage`.
            ///
            /// - Parameters:
            ///   - idlePercent:
            ///   - systemPercent:
            ///   - userPercent:
            internal init(
                idlePercent: Swift.Double? = nil,
                systemPercent: Swift.Double? = nil,
                userPercent: Swift.Double? = nil
            ) {
                self.idlePercent = idlePercent
                self.systemPercent = systemPercent
                self.userPercent = userPercent
            }
            internal enum CodingKeys: String, CodingKey {
                case idlePercent
                case systemPercent
                case userPercent
            }
        }
        /// CapacityRange describes the minimum and maximum capacity a volume should be
        /// created with
        ///
        /// - Remark: Generated from `#/components/schemas/CapacityRange`.
        internal struct CapacityRange: Codable, Hashable, Sendable {
            /// LimitBytes specifies that a volume must not be bigger than this. The
            /// value of 0 indicates an unspecified maximum
            ///
            /// - Remark: Generated from `#/components/schemas/CapacityRange/LimitBytes`.
            internal var LimitBytes: Swift.Int64?
            /// RequiredBytes specifies that a volume must be at least this big. The
            /// value of 0 indicates an unspecified minimum.
            ///
            /// - Remark: Generated from `#/components/schemas/CapacityRange/RequiredBytes`.
            internal var RequiredBytes: Swift.Int64?
            /// Creates a new `CapacityRange`.
            ///
            /// - Parameters:
            ///   - LimitBytes: LimitBytes specifies that a volume must not be bigger than this. The
            ///   - RequiredBytes: RequiredBytes specifies that a volume must be at least this big. The
            internal init(
                LimitBytes: Swift.Int64? = nil,
                RequiredBytes: Swift.Int64? = nil
            ) {
                self.LimitBytes = LimitBytes
                self.RequiredBytes = RequiredBytes
            }
            internal enum CodingKeys: String, CodingKey {
                case LimitBytes
                case RequiredBytes
            }
        }
        /// - Remark: Generated from `#/components/schemas/CgroupSpec`.
        internal typealias CgroupSpec = Swift.String
        /// CgroupnsMode represents the cgroup namespace mode of the container
        ///
        /// - Remark: Generated from `#/components/schemas/CgroupnsMode`.
        internal typealias CgroupnsMode = Swift.String
        /// Can be one of:
        ///
        /// `0`: Modified ("C")
        /// `1`: Added ("A")
        /// `2`: Deleted ("D")
        ///
        /// - Remark: Generated from `#/components/schemas/ChangeType`.
        internal typealias ChangeType = Swift.Int
        /// - Remark: Generated from `#/components/schemas/ClusterOptions`.
        internal typealias ClusterOptions = OpenAPIRuntime.OpenAPIObjectContainer
        /// ClusterVolume contains options and information specific to, and only present
        /// on, Swarm CSI cluster volumes.
        ///
        /// - Remark: Generated from `#/components/schemas/ClusterVolume`.
        internal struct ClusterVolume: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/CreatedAt`.
            internal var CreatedAt: Foundation.Date?
            /// ID is the Swarm ID of the volume. Because cluster volumes are Swarm
            /// objects, they have an ID, unlike non-cluster volumes, which only have a
            /// Name. This ID can be used to refer to the cluster volume.
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/ID`.
            internal var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info`.
            internal var Info: Components.Schemas.Info?
            /// PublishStatus contains the status of the volume as it pertains to its
            /// publishing on Nodes.
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatus`.
            internal var PublishStatus: [Components.Schemas.PublishStatus]?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Spec`.
            internal var Spec: Components.Schemas.ClusterVolumeSpec?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/UpdatedAt`.
            internal var UpdatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Version`.
            internal var Version: Components.Schemas.Version?
            /// Creates a new `ClusterVolume`.
            ///
            /// - Parameters:
            ///   - CreatedAt:
            ///   - ID: ID is the Swarm ID of the volume. Because cluster volumes are Swarm
            ///   - Info:
            ///   - PublishStatus: PublishStatus contains the status of the volume as it pertains to its
            ///   - Spec:
            ///   - UpdatedAt:
            ///   - Version:
            internal init(
                CreatedAt: Foundation.Date? = nil,
                ID: Swift.String? = nil,
                Info: Components.Schemas.Info? = nil,
                PublishStatus: [Components.Schemas.PublishStatus]? = nil,
                Spec: Components.Schemas.ClusterVolumeSpec? = nil,
                UpdatedAt: Foundation.Date? = nil,
                Version: Components.Schemas.Version? = nil
            ) {
                self.CreatedAt = CreatedAt
                self.ID = ID
                self.Info = Info
                self.PublishStatus = PublishStatus
                self.Spec = Spec
                self.UpdatedAt = UpdatedAt
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case CreatedAt
                case ID
                case Info
                case PublishStatus
                case Spec
                case UpdatedAt
                case Version
            }
        }
        /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec`.
        internal struct ClusterVolumeSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode`.
            internal var AccessMode: Components.Schemas.AccessMode?
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessibilityRequirements`.
            internal var AccessibilityRequirements: Components.Schemas.TopologyRequirement?
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/Availability`.
            internal var Availability: Components.Schemas.Availability?
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/CapacityRange`.
            internal var CapacityRange: Components.Schemas.CapacityRange?
            /// Group defines the volume group of this volume. Volumes belonging to the
            /// same group can be referred to by group name when creating Services.
            /// Referring to a volume by group instructs swarm to treat volumes in that
            /// group interchangeably for the purpose of scheduling. Volumes with an
            /// empty string for a group technically all belong to the same, emptystring
            /// group.
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/Group`.
            internal var Group: Swift.String?
            /// Secrets defines Swarm Secrets that are passed to the CSI storage plugin
            /// when operating on this volume.
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/Secrets`.
            internal var Secrets: [Components.Schemas.Secret]?
            /// Creates a new `ClusterVolumeSpec`.
            ///
            /// - Parameters:
            ///   - AccessMode:
            ///   - AccessibilityRequirements:
            ///   - Availability:
            ///   - CapacityRange:
            ///   - Group: Group defines the volume group of this volume. Volumes belonging to the
            ///   - Secrets: Secrets defines Swarm Secrets that are passed to the CSI storage plugin
            internal init(
                AccessMode: Components.Schemas.AccessMode? = nil,
                AccessibilityRequirements: Components.Schemas.TopologyRequirement? = nil,
                Availability: Components.Schemas.Availability? = nil,
                CapacityRange: Components.Schemas.CapacityRange? = nil,
                Group: Swift.String? = nil,
                Secrets: [Components.Schemas.Secret]? = nil
            ) {
                self.AccessMode = AccessMode
                self.AccessibilityRequirements = AccessibilityRequirements
                self.Availability = Availability
                self.CapacityRange = CapacityRange
                self.Group = Group
                self.Secrets = Secrets
            }
            internal enum CodingKeys: String, CodingKey {
                case AccessMode
                case AccessibilityRequirements
                case Availability
                case CapacityRange
                case Group
                case Secrets
            }
        }
        /// - Remark: Generated from `#/components/schemas/ComponentVersion`.
        internal struct ComponentVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ComponentVersion/Details`.
            internal struct DetailsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DetailsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ComponentVersion/Details`.
            internal var Details: Components.Schemas.ComponentVersion.DetailsPayload?
            /// - Remark: Generated from `#/components/schemas/ComponentVersion/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ComponentVersion/Version`.
            internal var Version: Swift.String?
            /// Creates a new `ComponentVersion`.
            ///
            /// - Parameters:
            ///   - Details:
            ///   - Name:
            ///   - Version:
            internal init(
                Details: Components.Schemas.ComponentVersion.DetailsPayload? = nil,
                Name: Swift.String? = nil,
                Version: Swift.String? = nil
            ) {
                self.Details = Details
                self.Name = Name
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case Details
                case Name
                case Version
            }
        }
        /// It should hold only portable information about the container.
        /// Here, "portable" means "independent from the host we are running on".
        /// Non-portable information *should* appear in HostConfig.
        /// All fields added to this struct must be marked `omitempty` to keep getting
        /// predictable hashes from the old `v1Compatibility` configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/Config`.
        internal struct Config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Config/ArgsEscaped`.
            internal var ArgsEscaped: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/AttachStderr`.
            internal var AttachStderr: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/AttachStdin`.
            internal var AttachStdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/AttachStdout`.
            internal var AttachStdout: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/Cmd`.
            internal var Cmd: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/Config/Domainname`.
            internal var Domainname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Entrypoint`.
            internal var Entrypoint: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/Config/Env`.
            internal var Env: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Config/ExposedPorts`.
            internal var ExposedPorts: Components.Schemas.PortSet?
            /// - Remark: Generated from `#/components/schemas/Config/Healthcheck`.
            internal var Healthcheck: Components.Schemas.HealthcheckConfig?
            /// - Remark: Generated from `#/components/schemas/Config/Hostname`.
            internal var Hostname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Config/Labels`.
            internal var Labels: Components.Schemas.Config.LabelsPayload?
            /// Mac Address of the container.
            ///
            /// Deprecated: this field is deprecated since API v1.44. Use EndpointSettings.MacAddress instead.
            ///
            /// - Remark: Generated from `#/components/schemas/Config/MacAddress`.
            internal var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/NetworkDisabled`.
            internal var NetworkDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/OnBuild`.
            internal var OnBuild: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Config/OpenStdin`.
            internal var OpenStdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/Shell`.
            internal var Shell: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/Config/StdinOnce`.
            internal var StdinOnce: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/StopSignal`.
            internal var StopSignal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/StopTimeout`.
            internal var StopTimeout: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Config/Tty`.
            internal var Tty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Config/User`.
            internal var User: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Volumes`.
            internal struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Config/Volumes`.
            internal var Volumes: Components.Schemas.Config.VolumesPayload?
            /// - Remark: Generated from `#/components/schemas/Config/WorkingDir`.
            internal var WorkingDir: Swift.String?
            /// Creates a new `Config`.
            ///
            /// - Parameters:
            ///   - ArgsEscaped:
            ///   - AttachStderr:
            ///   - AttachStdin:
            ///   - AttachStdout:
            ///   - Cmd:
            ///   - Domainname:
            ///   - Entrypoint:
            ///   - Env:
            ///   - ExposedPorts:
            ///   - Healthcheck:
            ///   - Hostname:
            ///   - Image:
            ///   - Labels:
            ///   - MacAddress: Mac Address of the container.
            ///   - NetworkDisabled:
            ///   - OnBuild:
            ///   - OpenStdin:
            ///   - Shell:
            ///   - StdinOnce:
            ///   - StopSignal:
            ///   - StopTimeout:
            ///   - Tty:
            ///   - User:
            ///   - Volumes:
            ///   - WorkingDir:
            internal init(
                ArgsEscaped: Swift.Bool? = nil,
                AttachStderr: Swift.Bool? = nil,
                AttachStdin: Swift.Bool? = nil,
                AttachStdout: Swift.Bool? = nil,
                Cmd: Components.Schemas.StrSlice? = nil,
                Domainname: Swift.String? = nil,
                Entrypoint: Components.Schemas.StrSlice? = nil,
                Env: [Swift.String]? = nil,
                ExposedPorts: Components.Schemas.PortSet? = nil,
                Healthcheck: Components.Schemas.HealthcheckConfig? = nil,
                Hostname: Swift.String? = nil,
                Image: Swift.String? = nil,
                Labels: Components.Schemas.Config.LabelsPayload? = nil,
                MacAddress: Swift.String? = nil,
                NetworkDisabled: Swift.Bool? = nil,
                OnBuild: [Swift.String]? = nil,
                OpenStdin: Swift.Bool? = nil,
                Shell: Components.Schemas.StrSlice? = nil,
                StdinOnce: Swift.Bool? = nil,
                StopSignal: Swift.String? = nil,
                StopTimeout: Swift.Int64? = nil,
                Tty: Swift.Bool? = nil,
                User: Swift.String? = nil,
                Volumes: Components.Schemas.Config.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil
            ) {
                self.ArgsEscaped = ArgsEscaped
                self.AttachStderr = AttachStderr
                self.AttachStdin = AttachStdin
                self.AttachStdout = AttachStdout
                self.Cmd = Cmd
                self.Domainname = Domainname
                self.Entrypoint = Entrypoint
                self.Env = Env
                self.ExposedPorts = ExposedPorts
                self.Healthcheck = Healthcheck
                self.Hostname = Hostname
                self.Image = Image
                self.Labels = Labels
                self.MacAddress = MacAddress
                self.NetworkDisabled = NetworkDisabled
                self.OnBuild = OnBuild
                self.OpenStdin = OpenStdin
                self.Shell = Shell
                self.StdinOnce = StdinOnce
                self.StopSignal = StopSignal
                self.StopTimeout = StopTimeout
                self.Tty = Tty
                self.User = User
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
            }
            internal enum CodingKeys: String, CodingKey {
                case ArgsEscaped
                case AttachStderr
                case AttachStdin
                case AttachStdout
                case Cmd
                case Domainname
                case Entrypoint
                case Env
                case ExposedPorts
                case Healthcheck
                case Hostname
                case Image
                case Labels
                case MacAddress
                case NetworkDisabled
                case OnBuild
                case OpenStdin
                case Shell
                case StdinOnce
                case StopSignal
                case StopTimeout
                case Tty
                case User
                case Volumes
                case WorkingDir
            }
        }
        /// ConfigReference specifies the source which provides a network's configuration
        ///
        /// - Remark: Generated from `#/components/schemas/ConfigReference`.
        internal struct ConfigReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfigReference/Network`.
            internal var Network: Swift.String?
            /// Creates a new `ConfigReference`.
            ///
            /// - Parameters:
            ///   - Network:
            internal init(Network: Swift.String? = nil) {
                self.Network = Network
            }
            internal enum CodingKeys: String, CodingKey {
                case Network
            }
        }
        /// ConmonInfo describes the conmon executable being used
        ///
        /// - Remark: Generated from `#/components/schemas/ConmonInfo`.
        internal struct ConmonInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConmonInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConmonInfo/path`.
            internal var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConmonInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `ConmonInfo`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - path:
            ///   - version:
            internal init(
                package: Swift.String? = nil,
                path: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.package = package
                self.path = path
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case package
                case path
                case version
            }
        }
        /// ConnectOptions represents the data to be used to connect a container to the
        /// network.
        ///
        /// - Remark: Generated from `#/components/schemas/ConnectOptions`.
        internal struct ConnectOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConnectOptions/Container`.
            internal var Container: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConnectOptions/EndpointConfig`.
            internal var EndpointConfig: Components.Schemas.EndpointSettings?
            /// Creates a new `ConnectOptions`.
            ///
            /// - Parameters:
            ///   - Container:
            ///   - EndpointConfig:
            internal init(
                Container: Swift.String? = nil,
                EndpointConfig: Components.Schemas.EndpointSettings? = nil
            ) {
                self.Container = Container
                self.EndpointConfig = EndpointConfig
            }
            internal enum CodingKeys: String, CodingKey {
                case Container
                case EndpointConfig
            }
        }
        /// - Remark: Generated from `#/components/schemas/Consistency`.
        internal typealias Consistency = Swift.String
        /// - Remark: Generated from `#/components/schemas/Container`.
        internal struct Container: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Container/Command`.
            internal var Command: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/Config`.
            internal var Config: Components.Schemas.Config?
            /// - Remark: Generated from `#/components/schemas/Container/Created`.
            internal var Created: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Container/DefaultReadOnlyNonRecursive`.
            internal var DefaultReadOnlyNonRecursive: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Container/HostConfig`.
            internal var HostConfig: Components.Schemas.HostConfig?
            /// - Remark: Generated from `#/components/schemas/Container/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/ImageID`.
            internal var ImageID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Container/Labels`.
            internal var Labels: Components.Schemas.Container.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/Container/Mounts`.
            internal var Mounts: [Components.Schemas.MountPoint]?
            /// - Remark: Generated from `#/components/schemas/Container/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/Names`.
            internal var Names: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Container/NetworkSettings`.
            internal var NetworkSettings: Components.Schemas.SummaryNetworkSettings?
            /// - Remark: Generated from `#/components/schemas/Container/NetworkingConfig`.
            internal var NetworkingConfig: Components.Schemas.NetworkingConfig?
            /// - Remark: Generated from `#/components/schemas/Container/Platform`.
            internal var Platform: Components.Schemas.Platform?
            /// - Remark: Generated from `#/components/schemas/Container/Ports`.
            internal var Ports: [Components.Schemas.Port]?
            /// - Remark: Generated from `#/components/schemas/Container/SizeRootFs`.
            internal var SizeRootFs: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Container/SizeRw`.
            internal var SizeRw: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Container/State`.
            internal var State: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Container/Status`.
            internal var Status: Swift.String?
            /// Creates a new `Container`.
            ///
            /// - Parameters:
            ///   - Command:
            ///   - Config:
            ///   - Created:
            ///   - DefaultReadOnlyNonRecursive:
            ///   - HostConfig:
            ///   - Id:
            ///   - Image:
            ///   - ImageID:
            ///   - Labels:
            ///   - Mounts:
            ///   - Name:
            ///   - Names:
            ///   - NetworkSettings:
            ///   - NetworkingConfig:
            ///   - Platform:
            ///   - Ports:
            ///   - SizeRootFs:
            ///   - SizeRw:
            ///   - State:
            ///   - Status:
            internal init(
                Command: Swift.String? = nil,
                Config: Components.Schemas.Config? = nil,
                Created: Swift.Int64? = nil,
                DefaultReadOnlyNonRecursive: Swift.Bool? = nil,
                HostConfig: Components.Schemas.HostConfig? = nil,
                Id: Swift.String? = nil,
                Image: Swift.String? = nil,
                ImageID: Swift.String? = nil,
                Labels: Components.Schemas.Container.LabelsPayload? = nil,
                Mounts: [Components.Schemas.MountPoint]? = nil,
                Name: Swift.String? = nil,
                Names: [Swift.String]? = nil,
                NetworkSettings: Components.Schemas.SummaryNetworkSettings? = nil,
                NetworkingConfig: Components.Schemas.NetworkingConfig? = nil,
                Platform: Components.Schemas.Platform? = nil,
                Ports: [Components.Schemas.Port]? = nil,
                SizeRootFs: Swift.Int64? = nil,
                SizeRw: Swift.Int64? = nil,
                State: Swift.String? = nil,
                Status: Swift.String? = nil
            ) {
                self.Command = Command
                self.Config = Config
                self.Created = Created
                self.DefaultReadOnlyNonRecursive = DefaultReadOnlyNonRecursive
                self.HostConfig = HostConfig
                self.Id = Id
                self.Image = Image
                self.ImageID = ImageID
                self.Labels = Labels
                self.Mounts = Mounts
                self.Name = Name
                self.Names = Names
                self.NetworkSettings = NetworkSettings
                self.NetworkingConfig = NetworkingConfig
                self.Platform = Platform
                self.Ports = Ports
                self.SizeRootFs = SizeRootFs
                self.SizeRw = SizeRw
                self.State = State
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case Command
                case Config
                case Created
                case DefaultReadOnlyNonRecursive
                case HostConfig
                case Id
                case Image
                case ImageID
                case Labels
                case Mounts
                case Name
                case Names
                case NetworkSettings
                case NetworkingConfig
                case Platform
                case Ports
                case SizeRootFs
                case SizeRw
                case State
                case Status
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig`.
        internal struct ContainerBasicConfig: Codable, Hashable, Sendable {
            /// Annotations are key-value options passed into the container runtime
            /// that can be used to trigger special behavior.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations are key-value options passed into the container runtime
            /// that can be used to trigger special behavior.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/annotations`.
            internal var annotations: Components.Schemas.ContainerBasicConfig.annotationsPayload?
            /// Command is the container's command.
            /// If not given and Image is specified, this will be populated by the
            /// image's configuration.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/command`.
            internal var command: [Swift.String]?
            /// ConmonPidFile is a path at which a PID file for Conmon will be
            /// placed.
            /// If not given, a default location will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/conmon_pid_file`.
            internal var conmon_pid_file: Swift.String?
            /// ContainerCreateCommand is the command that was used to create this
            /// container.
            /// This will be shown in the output of Inspect() on the container, and
            /// may also be used by some tools that wish to recreate the container
            /// (e.g. `podman generate systemd --new`).
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/containerCreateCommand`.
            internal var containerCreateCommand: [Swift.String]?
            /// DependencyContainers is an array of containers this container
            /// depends on. Dependency containers must be started before this
            /// container. Dependencies can be specified by name or full/partial ID.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/dependencyContainers`.
            internal var dependencyContainers: [Swift.String]?
            /// Entrypoint is the container's entrypoint.
            /// If not given and Image is specified, this will be populated by the
            /// image's configuration.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/entrypoint`.
            internal var entrypoint: [Swift.String]?
            /// Env is a set of environment variables that will be set in the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/env`.
            internal struct envPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `envPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Env is a set of environment variables that will be set in the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/env`.
            internal var env: Components.Schemas.ContainerBasicConfig.envPayload?
            /// EnvHost indicates that the host environment should be added to container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/env_host`.
            internal var env_host: Swift.Bool?
            /// EnvMerge takes the specified environment variables from image and preprocess them before injecting them into the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/envmerge`.
            internal var envmerge: [Swift.String]?
            /// GroupEntry specifies an arbitrary string to append to the container's /etc/group file.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/group_entry`.
            internal var group_entry: Swift.String?
            /// Hostname is the container's hostname. If not set, the hostname will
            /// not be modified (if UtsNS is not private) or will be set to the
            /// container ID (if UtsNS is private).
            /// Conflicts with UtsNS if UtsNS is not set to private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/hostname`.
            internal var hostname: Swift.String?
            /// HostUsers is a list of host usernames or UIDs to add to the container
            /// etc/passwd file
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/hostusers`.
            internal var hostusers: [Swift.String]?
            /// EnvHTTPProxy indicates that the http host proxy environment variables
            /// should be added to container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/httpproxy`.
            internal var httpproxy: Swift.Bool?
            /// InitContainerType describes if this container is an init container
            /// and if so, what type: always or once.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/init_container_type`.
            internal var init_container_type: Swift.String?
            /// Labels are key-value pairs that are used to add metadata to
            /// containers.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels are key-value pairs that are used to add metadata to
            /// containers.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/labels`.
            internal var labels: Components.Schemas.ContainerBasicConfig.labelsPayload?
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/log_configuration`.
            internal var log_configuration: Components.Schemas.LogConfigLibpod?
            /// Passwd is a container run option that determines if we are validating users/groups before running the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/manage_password`.
            internal var manage_password: Swift.Bool?
            /// Name is the name the container will be given.
            /// If no name is provided, one will be randomly generated.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/name`.
            internal var name: Swift.String?
            /// OCIRuntime is the name of the OCI runtime that will be used to create
            /// the container.
            /// If not specified, the default will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/oci_runtime`.
            internal var oci_runtime: Swift.String?
            /// PasswdEntry specifies an arbitrary string to append to the container's /etc/passwd file.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/passwd_entry`.
            internal var passwd_entry: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/personality`.
            internal var personality: Components.Schemas.LinuxPersonality?
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/pidns`.
            internal var pidns: Components.Schemas.Namespace?
            /// Pod is the ID of the pod the container will join.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/pod`.
            internal var pod: Swift.String?
            /// Remove indicates if the container should be removed once it has been started
            /// and exits.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/remove`.
            internal var remove: Swift.Bool?
            /// RemoveImage indicates that the container should remove the image it
            /// was created from after it exits.
            /// Only allowed if Remove is set to true and Image, not Rootfs, is in
            /// use.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/removeImage`.
            internal var removeImage: Swift.Bool?
            /// RestartPolicy is the container's restart policy - an action which
            /// will be taken when the container exits.
            /// If not given, the default policy, which does nothing, will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/restart_policy`.
            internal var restart_policy: Swift.String?
            /// RestartRetries is the number of attempts that will be made to restart
            /// the container.
            /// Only available when RestartPolicy is set to "on-failure".
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/restart_tries`.
            internal var restart_tries: Swift.Int?
            /// Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through
            /// "container" - let the OCI runtime deal with it, advertise conmon's MAINPID
            /// "conmon-only" - advertise conmon's MAINPID, send READY when started, don't pass to OCI
            /// "ignore" - unset NOTIFY_SOCKET
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/sdnotifyMode`.
            internal var sdnotifyMode: Swift.String?
            /// EnvSecrets are secrets that will be set as environment variables
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/secret_env`.
            internal struct secret_envPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `secret_envPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// EnvSecrets are secrets that will be set as environment variables
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/secret_env`.
            internal var secret_env: Components.Schemas.ContainerBasicConfig.secret_envPayload?
            /// Stdin is whether the container will keep its STDIN open.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/stdin`.
            internal var stdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/stop_signal`.
            internal var stop_signal: Components.Schemas.Signal?
            /// StopTimeout is a timeout between the container's stop signal being
            /// sent and SIGKILL being sent.
            /// If not provided, the default will be used.
            /// If 0 is used, stop signal will not be sent, and SIGKILL will be sent
            /// instead.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/stop_timeout`.
            internal var stop_timeout: Swift.Int?
            /// Sysctl sets kernel parameters for the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/sysctl`.
            internal struct sysctlPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `sysctlPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Sysctl sets kernel parameters for the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/sysctl`.
            internal var sysctl: Components.Schemas.ContainerBasicConfig.sysctlPayload?
            /// Systemd is whether the container will be started in systemd mode.
            /// Valid options are "true", "false", and "always".
            /// "true" enables this mode only if the binary run in the container is
            /// sbin/init or systemd. "always" unconditionally enables systemd mode.
            /// "false" unconditionally disables systemd mode.
            /// If enabled, mounts and stop signal will be modified.
            /// If set to "always" or set to "true" and conditionally triggered,
            /// conflicts with StopSignal.
            /// If not specified, "false" will be assumed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/systemd`.
            internal var systemd: Swift.String?
            /// Terminal is whether the container will create a PTY.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/terminal`.
            internal var terminal: Swift.Bool?
            /// Timeout is a maximum time in seconds the container will run before
            /// main process is sent SIGKILL.
            /// If 0 is used, signal will not be sent. Container can run indefinitely
            /// if they do not stop after the default termination signal.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/timeout`.
            internal var timeout: Swift.Int?
            /// Timezone is the timezone inside the container.
            /// Local means it has the same timezone as the host machine
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/timezone`.
            internal var timezone: Swift.String?
            /// UnsetEnv unsets the specified default environment variables from the image or from built-in or containers.conf
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/unsetenv`.
            internal var unsetenv: [Swift.String]?
            /// UnsetEnvAll unsetall default environment variables from the image or from built-in or containers.conf
            /// UnsetEnvAll unsets all default environment variables from the image or from built-in
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/unsetenvall`.
            internal var unsetenvall: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerBasicConfig/utsns`.
            internal var utsns: Components.Schemas.Namespace?
            /// Creates a new `ContainerBasicConfig`.
            ///
            /// - Parameters:
            ///   - annotations: Annotations are key-value options passed into the container runtime
            ///   - command: Command is the container's command.
            ///   - conmon_pid_file: ConmonPidFile is a path at which a PID file for Conmon will be
            ///   - containerCreateCommand: ContainerCreateCommand is the command that was used to create this
            ///   - dependencyContainers: DependencyContainers is an array of containers this container
            ///   - entrypoint: Entrypoint is the container's entrypoint.
            ///   - env: Env is a set of environment variables that will be set in the
            ///   - env_host: EnvHost indicates that the host environment should be added to container
            ///   - envmerge: EnvMerge takes the specified environment variables from image and preprocess them before injecting them into the
            ///   - group_entry: GroupEntry specifies an arbitrary string to append to the container's /etc/group file.
            ///   - hostname: Hostname is the container's hostname. If not set, the hostname will
            ///   - hostusers: HostUsers is a list of host usernames or UIDs to add to the container
            ///   - httpproxy: EnvHTTPProxy indicates that the http host proxy environment variables
            ///   - init_container_type: InitContainerType describes if this container is an init container
            ///   - labels: Labels are key-value pairs that are used to add metadata to
            ///   - log_configuration:
            ///   - manage_password: Passwd is a container run option that determines if we are validating users/groups before running the container
            ///   - name: Name is the name the container will be given.
            ///   - oci_runtime: OCIRuntime is the name of the OCI runtime that will be used to create
            ///   - passwd_entry: PasswdEntry specifies an arbitrary string to append to the container's /etc/passwd file.
            ///   - personality:
            ///   - pidns:
            ///   - pod: Pod is the ID of the pod the container will join.
            ///   - remove: Remove indicates if the container should be removed once it has been started
            ///   - removeImage: RemoveImage indicates that the container should remove the image it
            ///   - restart_policy: RestartPolicy is the container's restart policy - an action which
            ///   - restart_tries: RestartRetries is the number of attempts that will be made to restart
            ///   - sdnotifyMode: Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through
            ///   - secret_env: EnvSecrets are secrets that will be set as environment variables
            ///   - stdin: Stdin is whether the container will keep its STDIN open.
            ///   - stop_signal:
            ///   - stop_timeout: StopTimeout is a timeout between the container's stop signal being
            ///   - sysctl: Sysctl sets kernel parameters for the container
            ///   - systemd: Systemd is whether the container will be started in systemd mode.
            ///   - terminal: Terminal is whether the container will create a PTY.
            ///   - timeout: Timeout is a maximum time in seconds the container will run before
            ///   - timezone: Timezone is the timezone inside the container.
            ///   - unsetenv: UnsetEnv unsets the specified default environment variables from the image or from built-in or containers.conf
            ///   - unsetenvall: UnsetEnvAll unsetall default environment variables from the image or from built-in or containers.conf
            ///   - utsns:
            internal init(
                annotations: Components.Schemas.ContainerBasicConfig.annotationsPayload? = nil,
                command: [Swift.String]? = nil,
                conmon_pid_file: Swift.String? = nil,
                containerCreateCommand: [Swift.String]? = nil,
                dependencyContainers: [Swift.String]? = nil,
                entrypoint: [Swift.String]? = nil,
                env: Components.Schemas.ContainerBasicConfig.envPayload? = nil,
                env_host: Swift.Bool? = nil,
                envmerge: [Swift.String]? = nil,
                group_entry: Swift.String? = nil,
                hostname: Swift.String? = nil,
                hostusers: [Swift.String]? = nil,
                httpproxy: Swift.Bool? = nil,
                init_container_type: Swift.String? = nil,
                labels: Components.Schemas.ContainerBasicConfig.labelsPayload? = nil,
                log_configuration: Components.Schemas.LogConfigLibpod? = nil,
                manage_password: Swift.Bool? = nil,
                name: Swift.String? = nil,
                oci_runtime: Swift.String? = nil,
                passwd_entry: Swift.String? = nil,
                personality: Components.Schemas.LinuxPersonality? = nil,
                pidns: Components.Schemas.Namespace? = nil,
                pod: Swift.String? = nil,
                remove: Swift.Bool? = nil,
                removeImage: Swift.Bool? = nil,
                restart_policy: Swift.String? = nil,
                restart_tries: Swift.Int? = nil,
                sdnotifyMode: Swift.String? = nil,
                secret_env: Components.Schemas.ContainerBasicConfig.secret_envPayload? = nil,
                stdin: Swift.Bool? = nil,
                stop_signal: Components.Schemas.Signal? = nil,
                stop_timeout: Swift.Int? = nil,
                sysctl: Components.Schemas.ContainerBasicConfig.sysctlPayload? = nil,
                systemd: Swift.String? = nil,
                terminal: Swift.Bool? = nil,
                timeout: Swift.Int? = nil,
                timezone: Swift.String? = nil,
                unsetenv: [Swift.String]? = nil,
                unsetenvall: Swift.Bool? = nil,
                utsns: Components.Schemas.Namespace? = nil
            ) {
                self.annotations = annotations
                self.command = command
                self.conmon_pid_file = conmon_pid_file
                self.containerCreateCommand = containerCreateCommand
                self.dependencyContainers = dependencyContainers
                self.entrypoint = entrypoint
                self.env = env
                self.env_host = env_host
                self.envmerge = envmerge
                self.group_entry = group_entry
                self.hostname = hostname
                self.hostusers = hostusers
                self.httpproxy = httpproxy
                self.init_container_type = init_container_type
                self.labels = labels
                self.log_configuration = log_configuration
                self.manage_password = manage_password
                self.name = name
                self.oci_runtime = oci_runtime
                self.passwd_entry = passwd_entry
                self.personality = personality
                self.pidns = pidns
                self.pod = pod
                self.remove = remove
                self.removeImage = removeImage
                self.restart_policy = restart_policy
                self.restart_tries = restart_tries
                self.sdnotifyMode = sdnotifyMode
                self.secret_env = secret_env
                self.stdin = stdin
                self.stop_signal = stop_signal
                self.stop_timeout = stop_timeout
                self.sysctl = sysctl
                self.systemd = systemd
                self.terminal = terminal
                self.timeout = timeout
                self.timezone = timezone
                self.unsetenv = unsetenv
                self.unsetenvall = unsetenvall
                self.utsns = utsns
            }
            internal enum CodingKeys: String, CodingKey {
                case annotations
                case command
                case conmon_pid_file
                case containerCreateCommand
                case dependencyContainers
                case entrypoint
                case env
                case env_host
                case envmerge
                case group_entry
                case hostname
                case hostusers
                case httpproxy
                case init_container_type
                case labels
                case log_configuration
                case manage_password
                case name
                case oci_runtime
                case passwd_entry
                case personality
                case pidns
                case pod
                case remove
                case removeImage
                case restart_policy
                case restart_tries
                case sdnotifyMode
                case secret_env
                case stdin
                case stop_signal
                case stop_timeout
                case sysctl
                case systemd
                case terminal
                case timeout
                case timezone
                case unsetenv
                case unsetenvall
                case utsns
            }
        }
        /// ContainerCgroupConfig contains configuration information about a container's
        /// cgroups.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerCgroupConfig`.
        internal struct ContainerCgroupConfig: Codable, Hashable, Sendable {
            /// CgroupParent is the container's Cgroup parent.
            /// If not set, the default for the current cgroup driver will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCgroupConfig/cgroup_parent`.
            internal var cgroup_parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerCgroupConfig/cgroupns`.
            internal var cgroupns: Components.Schemas.Namespace?
            /// CgroupsMode sets a policy for how cgroups will be created for the
            /// container, including the ability to disable creation entirely.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCgroupConfig/cgroups_mode`.
            internal var cgroups_mode: Swift.String?
            /// Creates a new `ContainerCgroupConfig`.
            ///
            /// - Parameters:
            ///   - cgroup_parent: CgroupParent is the container's Cgroup parent.
            ///   - cgroupns:
            ///   - cgroups_mode: CgroupsMode sets a policy for how cgroups will be created for the
            internal init(
                cgroup_parent: Swift.String? = nil,
                cgroupns: Components.Schemas.Namespace? = nil,
                cgroups_mode: Swift.String? = nil
            ) {
                self.cgroup_parent = cgroup_parent
                self.cgroupns = cgroupns
                self.cgroups_mode = cgroups_mode
            }
            internal enum CodingKeys: String, CodingKey {
                case cgroup_parent
                case cgroupns
                case cgroups_mode
            }
        }
        /// ContainerCreateResponse is the response struct for creating a container
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse`.
        internal struct ContainerCreateResponse: Codable, Hashable, Sendable {
            /// ID of the container created
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse/Id`.
            internal var Id: Swift.String
            /// Warnings during container creation
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse/Warnings`.
            internal var Warnings: [Swift.String]
            /// Creates a new `ContainerCreateResponse`.
            ///
            /// - Parameters:
            ///   - Id: ID of the container created
            ///   - Warnings: Warnings during container creation
            internal init(
                Id: Swift.String,
                Warnings: [Swift.String]
            ) {
                self.Id = Id
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case Warnings
            }
        }
        /// ContainerHealthCheckConfig describes a container healthcheck with attributes
        /// like command, retries, interval, start period, and timeout.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig`.
        internal struct ContainerHealthCheckConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/health_check_on_failure_action`.
            internal var health_check_on_failure_action: Components.Schemas.HealthCheckOnFailureAction?
            /// HealthLogDestination defines the destination where the log is stored.
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/healthLogDestination`.
            internal var healthLogDestination: Swift.String?
            /// HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            /// ('0' value means an infinite number of attempts in the log file).
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/healthMaxLogCount`.
            internal var healthMaxLogCount: Swift.Int?
            /// HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            /// ("0" value means an infinite log length).
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/healthMaxLogSize`.
            internal var healthMaxLogSize: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/healthconfig`.
            internal var healthconfig: Components.Schemas.Schema2HealthConfig?
            /// - Remark: Generated from `#/components/schemas/ContainerHealthCheckConfig/startupHealthConfig`.
            internal var startupHealthConfig: Components.Schemas.StartupHealthCheck?
            /// Creates a new `ContainerHealthCheckConfig`.
            ///
            /// - Parameters:
            ///   - health_check_on_failure_action:
            ///   - healthLogDestination: HealthLogDestination defines the destination where the log is stored.
            ///   - healthMaxLogCount: HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            ///   - healthMaxLogSize: HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            ///   - healthconfig:
            ///   - startupHealthConfig:
            internal init(
                health_check_on_failure_action: Components.Schemas.HealthCheckOnFailureAction? = nil,
                healthLogDestination: Swift.String? = nil,
                healthMaxLogCount: Swift.Int? = nil,
                healthMaxLogSize: Swift.Int? = nil,
                healthconfig: Components.Schemas.Schema2HealthConfig? = nil,
                startupHealthConfig: Components.Schemas.StartupHealthCheck? = nil
            ) {
                self.health_check_on_failure_action = health_check_on_failure_action
                self.healthLogDestination = healthLogDestination
                self.healthMaxLogCount = healthMaxLogCount
                self.healthMaxLogSize = healthMaxLogSize
                self.healthconfig = healthconfig
                self.startupHealthConfig = startupHealthConfig
            }
            internal enum CodingKeys: String, CodingKey {
                case health_check_on_failure_action
                case healthLogDestination
                case healthMaxLogCount
                case healthMaxLogSize
                case healthconfig
                case startupHealthConfig
            }
        }
        /// ContainerJSON is newly used struct along with MountPoint
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerJSON`.
        internal struct ContainerJSON: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/AppArmorProfile`.
            internal var AppArmorProfile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Args`.
            internal var Args: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Config`.
            internal var Config: Components.Schemas.Config?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Created`.
            internal var Created: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/ExecIDs`.
            internal var ExecIDs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/GraphDriver`.
            internal var GraphDriver: Components.Schemas.GraphDriverData?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/HostConfig`.
            internal var HostConfig: Components.Schemas.HostConfig?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/HostnamePath`.
            internal var HostnamePath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/HostsPath`.
            internal var HostsPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/LogPath`.
            internal var LogPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/MountLabel`.
            internal var MountLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Mounts`.
            internal var Mounts: [Components.Schemas.MountPoint]?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/NetworkSettings`.
            internal var NetworkSettings: Components.Schemas.NetworkSettings?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Node`.
            internal var Node: Components.Schemas.ContainerNode?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/Platform`.
            internal var Platform: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/ProcessLabel`.
            internal var ProcessLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/ResolvConfPath`.
            internal var ResolvConfPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/RestartCount`.
            internal var RestartCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/SizeRootFs`.
            internal var SizeRootFs: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/SizeRw`.
            internal var SizeRw: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerJSON/State`.
            internal var State: Components.Schemas.ContainerState?
            /// Creates a new `ContainerJSON`.
            ///
            /// - Parameters:
            ///   - AppArmorProfile:
            ///   - Args:
            ///   - Config:
            ///   - Created:
            ///   - Driver:
            ///   - ExecIDs:
            ///   - GraphDriver:
            ///   - HostConfig:
            ///   - HostnamePath:
            ///   - HostsPath:
            ///   - Id:
            ///   - Image:
            ///   - LogPath:
            ///   - MountLabel:
            ///   - Mounts:
            ///   - Name:
            ///   - NetworkSettings:
            ///   - Node:
            ///   - Path:
            ///   - Platform:
            ///   - ProcessLabel:
            ///   - ResolvConfPath:
            ///   - RestartCount:
            ///   - SizeRootFs:
            ///   - SizeRw:
            ///   - State:
            internal init(
                AppArmorProfile: Swift.String? = nil,
                Args: [Swift.String]? = nil,
                Config: Components.Schemas.Config? = nil,
                Created: Swift.String? = nil,
                Driver: Swift.String? = nil,
                ExecIDs: [Swift.String]? = nil,
                GraphDriver: Components.Schemas.GraphDriverData? = nil,
                HostConfig: Components.Schemas.HostConfig? = nil,
                HostnamePath: Swift.String? = nil,
                HostsPath: Swift.String? = nil,
                Id: Swift.String? = nil,
                Image: Swift.String? = nil,
                LogPath: Swift.String? = nil,
                MountLabel: Swift.String? = nil,
                Mounts: [Components.Schemas.MountPoint]? = nil,
                Name: Swift.String? = nil,
                NetworkSettings: Components.Schemas.NetworkSettings? = nil,
                Node: Components.Schemas.ContainerNode? = nil,
                Path: Swift.String? = nil,
                Platform: Swift.String? = nil,
                ProcessLabel: Swift.String? = nil,
                ResolvConfPath: Swift.String? = nil,
                RestartCount: Swift.Int64? = nil,
                SizeRootFs: Swift.Int64? = nil,
                SizeRw: Swift.Int64? = nil,
                State: Components.Schemas.ContainerState? = nil
            ) {
                self.AppArmorProfile = AppArmorProfile
                self.Args = Args
                self.Config = Config
                self.Created = Created
                self.Driver = Driver
                self.ExecIDs = ExecIDs
                self.GraphDriver = GraphDriver
                self.HostConfig = HostConfig
                self.HostnamePath = HostnamePath
                self.HostsPath = HostsPath
                self.Id = Id
                self.Image = Image
                self.LogPath = LogPath
                self.MountLabel = MountLabel
                self.Mounts = Mounts
                self.Name = Name
                self.NetworkSettings = NetworkSettings
                self.Node = Node
                self.Path = Path
                self.Platform = Platform
                self.ProcessLabel = ProcessLabel
                self.ResolvConfPath = ResolvConfPath
                self.RestartCount = RestartCount
                self.SizeRootFs = SizeRootFs
                self.SizeRw = SizeRw
                self.State = State
            }
            internal enum CodingKeys: String, CodingKey {
                case AppArmorProfile
                case Args
                case Config
                case Created
                case Driver
                case ExecIDs
                case GraphDriver
                case HostConfig
                case HostnamePath
                case HostsPath
                case Id
                case Image
                case LogPath
                case MountLabel
                case Mounts
                case Name
                case NetworkSettings
                case Node
                case Path
                case Platform
                case ProcessLabel
                case ResolvConfPath
                case RestartCount
                case SizeRootFs
                case SizeRw
                case State
            }
        }
        /// ContainerNetworkConfig contains information on a container's network
        /// configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig`.
        internal struct ContainerNetworkConfig: Codable, Hashable, Sendable {
            /// Map of networks names or ids that the container should join.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PerNetworkOptions]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PerNetworkOptions] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of networks names or ids that the container should join.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/Networks`.
            internal var Networks: Components.Schemas.ContainerNetworkConfig.NetworksPayload?
            /// BaseHostsFile is the base file to create the `/etc/hosts` file inside the container.
            /// This must either be an absolute path to a file on the host system, or one of the
            /// special flags `image` or `none`.
            /// If it is empty it defaults to the base_hosts_file configuration in containers.conf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/base_hosts_file`.
            internal var base_hosts_file: Swift.String?
            /// CNINetworks is a list of CNI networks to join the container to.
            /// If this list is empty, the default CNI network will be joined
            /// instead. If at least one entry is present, we will not join the
            /// default network (unless it is part of this list).
            /// Only available if NetNS is set to bridge.
            /// Optional.
            /// Deprecated: as of podman 4.0 use "Networks" instead.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/cni_networks`.
            internal var cni_networks: [Swift.String]?
            /// DNSOptions is a set of DNS options that will be used in the
            /// container's resolv.conf, replacing the host's DNS options which are
            /// used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/dns_option`.
            internal var dns_option: [Swift.String]?
            /// DNSSearch is a set of DNS search domains that will be used in the
            /// container's resolv.conf, replacing the host's DNS search domains
            /// which are used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/dns_search`.
            internal var dns_search: [Swift.String]?
            /// DNSServers is a set of DNS servers that will be used in the
            /// container's resolv.conf, replacing the host's DNS Servers which are
            /// used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/dns_server`.
            internal var dns_server: [Swift.String]?
            /// Expose is a number of ports that will be forwarded to the container
            /// if PublishExposedPorts is set.
            /// Expose is a map of uint16 (port number) to a string representing
            /// protocol i.e map[uint16]string. Allowed protocols are "tcp", "udp", and "sctp", or some
            /// combination of the three separated by commas.
            /// If protocol is set to "" we will assume TCP.
            /// Only available if NetNS is set to Bridge or Slirp, and
            /// PublishExposedPorts is set.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/expose`.
            internal var expose: OpenAPIRuntime.OpenAPIValueContainer?
            /// HostAdd is a set of hosts which will be added to the container's
            /// etc/hosts file.
            /// Conflicts with UseImageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/hostadd`.
            internal var hostadd: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/netns`.
            internal var netns: Components.Schemas.Namespace?
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/network_options`.
            internal struct network_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `network_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/network_options`.
            internal var network_options: Components.Schemas.ContainerNetworkConfig.network_optionsPayload?
            /// PortBindings is a set of ports to map into the container.
            /// Only available if NetNS is set to bridge, slirp, or pasta.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/portmappings`.
            internal var portmappings: [Components.Schemas.PortMapping]?
            /// PublishExposedPorts will publish ports specified in the image to
            /// random unused ports (guaranteed to be above 1024) on the host.
            /// This is based on ports set in Expose below, and any ports specified
            /// by the Image (if one is given).
            /// Only available if NetNS is set to Bridge or Slirp.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/publish_image_ports`.
            internal var publish_image_ports: Swift.Bool?
            /// UseImageHostname indicates that /etc/hostname should not be managed by
            /// Podman, and instead sourced from the image.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/use_image_hostname`.
            internal var use_image_hostname: Swift.Bool?
            /// UseImageHosts indicates that /etc/hosts should not be managed by
            /// Podman, and instead sourced from the image.
            /// Conflicts with HostAdd.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/use_image_hosts`.
            internal var use_image_hosts: Swift.Bool?
            /// UseImageResolvConf indicates that resolv.conf should not be managed
            /// by Podman, but instead sourced from the image.
            /// Conflicts with DNSServer, DNSSearch, DNSOption.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkConfig/use_image_resolve_conf`.
            internal var use_image_resolve_conf: Swift.Bool?
            /// Creates a new `ContainerNetworkConfig`.
            ///
            /// - Parameters:
            ///   - Networks: Map of networks names or ids that the container should join.
            ///   - base_hosts_file: BaseHostsFile is the base file to create the `/etc/hosts` file inside the container.
            ///   - cni_networks: CNINetworks is a list of CNI networks to join the container to.
            ///   - dns_option: DNSOptions is a set of DNS options that will be used in the
            ///   - dns_search: DNSSearch is a set of DNS search domains that will be used in the
            ///   - dns_server: DNSServers is a set of DNS servers that will be used in the
            ///   - expose: Expose is a number of ports that will be forwarded to the container
            ///   - hostadd: HostAdd is a set of hosts which will be added to the container's
            ///   - netns:
            ///   - network_options: NetworkOptions are additional options for each network
            ///   - portmappings: PortBindings is a set of ports to map into the container.
            ///   - publish_image_ports: PublishExposedPorts will publish ports specified in the image to
            ///   - use_image_hostname: UseImageHostname indicates that /etc/hostname should not be managed by
            ///   - use_image_hosts: UseImageHosts indicates that /etc/hosts should not be managed by
            ///   - use_image_resolve_conf: UseImageResolvConf indicates that resolv.conf should not be managed
            internal init(
                Networks: Components.Schemas.ContainerNetworkConfig.NetworksPayload? = nil,
                base_hosts_file: Swift.String? = nil,
                cni_networks: [Swift.String]? = nil,
                dns_option: [Swift.String]? = nil,
                dns_search: [Swift.String]? = nil,
                dns_server: [Swift.String]? = nil,
                expose: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                hostadd: [Swift.String]? = nil,
                netns: Components.Schemas.Namespace? = nil,
                network_options: Components.Schemas.ContainerNetworkConfig.network_optionsPayload? = nil,
                portmappings: [Components.Schemas.PortMapping]? = nil,
                publish_image_ports: Swift.Bool? = nil,
                use_image_hostname: Swift.Bool? = nil,
                use_image_hosts: Swift.Bool? = nil,
                use_image_resolve_conf: Swift.Bool? = nil
            ) {
                self.Networks = Networks
                self.base_hosts_file = base_hosts_file
                self.cni_networks = cni_networks
                self.dns_option = dns_option
                self.dns_search = dns_search
                self.dns_server = dns_server
                self.expose = expose
                self.hostadd = hostadd
                self.netns = netns
                self.network_options = network_options
                self.portmappings = portmappings
                self.publish_image_ports = publish_image_ports
                self.use_image_hostname = use_image_hostname
                self.use_image_hosts = use_image_hosts
                self.use_image_resolve_conf = use_image_resolve_conf
            }
            internal enum CodingKeys: String, CodingKey {
                case Networks
                case base_hosts_file
                case cni_networks
                case dns_option
                case dns_search
                case dns_server
                case expose
                case hostadd
                case netns
                case network_options
                case portmappings
                case publish_image_ports
                case use_image_hostname
                case use_image_hosts
                case use_image_resolve_conf
            }
        }
        /// Statistics for an individual container network interface
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats`.
        internal struct ContainerNetworkStats: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/RxBytes`.
            internal var RxBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/RxDropped`.
            internal var RxDropped: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/RxErrors`.
            internal var RxErrors: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/RxPackets`.
            internal var RxPackets: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/TxBytes`.
            internal var TxBytes: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/TxDropped`.
            internal var TxDropped: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/TxErrors`.
            internal var TxErrors: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerNetworkStats/TxPackets`.
            internal var TxPackets: Swift.Int?
            /// Creates a new `ContainerNetworkStats`.
            ///
            /// - Parameters:
            ///   - RxBytes:
            ///   - RxDropped:
            ///   - RxErrors:
            ///   - RxPackets:
            ///   - TxBytes:
            ///   - TxDropped:
            ///   - TxErrors:
            ///   - TxPackets:
            internal init(
                RxBytes: Swift.Int? = nil,
                RxDropped: Swift.Int? = nil,
                RxErrors: Swift.Int? = nil,
                RxPackets: Swift.Int? = nil,
                TxBytes: Swift.Int? = nil,
                TxDropped: Swift.Int? = nil,
                TxErrors: Swift.Int? = nil,
                TxPackets: Swift.Int? = nil
            ) {
                self.RxBytes = RxBytes
                self.RxDropped = RxDropped
                self.RxErrors = RxErrors
                self.RxPackets = RxPackets
                self.TxBytes = TxBytes
                self.TxDropped = TxDropped
                self.TxErrors = TxErrors
                self.TxPackets = TxPackets
            }
            internal enum CodingKeys: String, CodingKey {
                case RxBytes
                case RxDropped
                case RxErrors
                case RxPackets
                case TxBytes
                case TxDropped
                case TxErrors
                case TxPackets
            }
        }
        /// Deprecated: ContainerNode was used for the classic Docker Swarm standalone API. It will be removed in the next release.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerNode`.
        internal struct ContainerNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Addr`.
            internal var Addr: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Cpus`.
            internal var Cpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/ID`.
            internal var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/IP`.
            internal var IP: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Labels`.
            internal var Labels: Components.Schemas.ContainerNode.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Memory`.
            internal var Memory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerNode/Name`.
            internal var Name: Swift.String?
            /// Creates a new `ContainerNode`.
            ///
            /// - Parameters:
            ///   - Addr:
            ///   - Cpus:
            ///   - ID:
            ///   - IP:
            ///   - Labels:
            ///   - Memory:
            ///   - Name:
            internal init(
                Addr: Swift.String? = nil,
                Cpus: Swift.Int64? = nil,
                ID: Swift.String? = nil,
                IP: Swift.String? = nil,
                Labels: Components.Schemas.ContainerNode.LabelsPayload? = nil,
                Memory: Swift.Int64? = nil,
                Name: Swift.String? = nil
            ) {
                self.Addr = Addr
                self.Cpus = Cpus
                self.ID = ID
                self.IP = IP
                self.Labels = Labels
                self.Memory = Memory
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Addr
                case Cpus
                case ID
                case IP
                case Labels
                case Memory
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig`.
        internal struct ContainerResourceConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/intelRdt`.
            internal var intelRdt: Components.Schemas.LinuxIntelRdt?
            /// OOMScoreAdj adjusts the score used by the OOM killer to determine
            /// processes to kill for the container's process.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/oom_score_adj`.
            internal var oom_score_adj: Swift.Int64?
            /// Rlimits are POSIX rlimits to apply to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/r_limits`.
            internal var r_limits: [Components.Schemas.POSIXRlimit]?
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/resource_limits`.
            internal var resource_limits: Components.Schemas.LinuxResources?
            /// IO read rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleReadBpsDevice`.
            internal struct throttleReadBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO read rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleReadBpsDevice`.
            internal var throttleReadBpsDevice: Components.Schemas.ContainerResourceConfig.throttleReadBpsDevicePayload?
            /// IO read rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleReadIOPSDevice`.
            internal struct throttleReadIOPSDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadIOPSDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO read rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleReadIOPSDevice`.
            internal var throttleReadIOPSDevice: Components.Schemas.ContainerResourceConfig.throttleReadIOPSDevicePayload?
            /// IO write rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleWriteBpsDevice`.
            internal struct throttleWriteBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleWriteBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO write rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleWriteBpsDevice`.
            internal var throttleWriteBpsDevice: Components.Schemas.ContainerResourceConfig.throttleWriteBpsDevicePayload?
            /// IO write rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleWriteIOPSDevice`.
            internal struct throttleWriteIOPSDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleWriteIOPSDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO write rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/throttleWriteIOPSDevice`.
            internal var throttleWriteIOPSDevice: Components.Schemas.ContainerResourceConfig.throttleWriteIOPSDevicePayload?
            /// CgroupConf are key-value options passed into the container runtime
            /// that are used to configure cgroup v2.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/unified`.
            internal struct unifiedPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `unifiedPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// CgroupConf are key-value options passed into the container runtime
            /// that are used to configure cgroup v2.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/unified`.
            internal var unified: Components.Schemas.ContainerResourceConfig.unifiedPayload?
            /// Weight per cgroup per device, can override BlkioWeight
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/weightDevice`.
            internal struct weightDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxWeightDevice]
                /// Creates a new `weightDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxWeightDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Weight per cgroup per device, can override BlkioWeight
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerResourceConfig/weightDevice`.
            internal var weightDevice: Components.Schemas.ContainerResourceConfig.weightDevicePayload?
            /// Creates a new `ContainerResourceConfig`.
            ///
            /// - Parameters:
            ///   - intelRdt:
            ///   - oom_score_adj: OOMScoreAdj adjusts the score used by the OOM killer to determine
            ///   - r_limits: Rlimits are POSIX rlimits to apply to the container.
            ///   - resource_limits:
            ///   - throttleReadBpsDevice: IO read rate limit per cgroup per device, bytes per second
            ///   - throttleReadIOPSDevice: IO read rate limit per cgroup per device, IO per second
            ///   - throttleWriteBpsDevice: IO write rate limit per cgroup per device, bytes per second
            ///   - throttleWriteIOPSDevice: IO write rate limit per cgroup per device, IO per second
            ///   - unified: CgroupConf are key-value options passed into the container runtime
            ///   - weightDevice: Weight per cgroup per device, can override BlkioWeight
            internal init(
                intelRdt: Components.Schemas.LinuxIntelRdt? = nil,
                oom_score_adj: Swift.Int64? = nil,
                r_limits: [Components.Schemas.POSIXRlimit]? = nil,
                resource_limits: Components.Schemas.LinuxResources? = nil,
                throttleReadBpsDevice: Components.Schemas.ContainerResourceConfig.throttleReadBpsDevicePayload? = nil,
                throttleReadIOPSDevice: Components.Schemas.ContainerResourceConfig.throttleReadIOPSDevicePayload? = nil,
                throttleWriteBpsDevice: Components.Schemas.ContainerResourceConfig.throttleWriteBpsDevicePayload? = nil,
                throttleWriteIOPSDevice: Components.Schemas.ContainerResourceConfig.throttleWriteIOPSDevicePayload? = nil,
                unified: Components.Schemas.ContainerResourceConfig.unifiedPayload? = nil,
                weightDevice: Components.Schemas.ContainerResourceConfig.weightDevicePayload? = nil
            ) {
                self.intelRdt = intelRdt
                self.oom_score_adj = oom_score_adj
                self.r_limits = r_limits
                self.resource_limits = resource_limits
                self.throttleReadBpsDevice = throttleReadBpsDevice
                self.throttleReadIOPSDevice = throttleReadIOPSDevice
                self.throttleWriteBpsDevice = throttleWriteBpsDevice
                self.throttleWriteIOPSDevice = throttleWriteIOPSDevice
                self.unified = unified
                self.weightDevice = weightDevice
            }
            internal enum CodingKeys: String, CodingKey {
                case intelRdt
                case oom_score_adj
                case r_limits
                case resource_limits
                case throttleReadBpsDevice
                case throttleReadIOPSDevice
                case throttleWriteBpsDevice
                case throttleWriteIOPSDevice
                case unified
                case weightDevice
            }
        }
        /// ContainerSecurityConfig is a container's security features, including
        /// SELinux, Apparmor, and Seccomp.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig`.
        internal struct ContainerSecurityConfig: Codable, Hashable, Sendable {
            /// ApparmorProfile is the name of the Apparmor profile the container
            /// will use.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/apparmor_profile`.
            internal var apparmor_profile: Swift.String?
            /// CapAdd are capabilities which will be added to the container.
            /// Conflicts with Privileged.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/cap_add`.
            internal var cap_add: [Swift.String]?
            /// CapDrop are capabilities which will be removed from the container.
            /// Conflicts with Privileged.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/cap_drop`.
            internal var cap_drop: [Swift.String]?
            /// Groups are a list of supplemental groups the container's user will
            /// be granted access to.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/groups`.
            internal var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/idmappings`.
            internal var idmappings: Components.Schemas.IDMappingOptions?
            /// LabelNested indicates whether or not the container is allowed to
            /// run fully nested containers including SELinux labelling.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/label_nested`.
            internal var label_nested: Swift.Bool?
            /// Mask is the path we want to mask in the container. This masks the paths
            /// given in addition to the default list.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/mask`.
            internal var mask: [Swift.String]?
            /// NoNewPrivileges is whether the container will set the no new
            /// privileges flag on create, which disables gaining additional
            /// privileges (e.g. via setuid) in the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/no_new_privileges`.
            internal var no_new_privileges: Swift.Bool?
            /// Privileged is whether the container is privileged.
            /// Privileged does the following:
            /// Adds all devices on the system to the container.
            /// Adds all capabilities to the container.
            /// Disables Seccomp, SELinux, and Apparmor confinement.
            /// (Though SELinux can be manually re-enabled).
            /// TODO: this conflicts with things.
            /// TODO: this does more.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/privileged`.
            internal var privileged: Swift.Bool?
            /// ProcOpts are the options used for the proc mount.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/procfs_opts`.
            internal var procfs_opts: [Swift.String]?
            /// ReadOnlyFilesystem indicates that everything will be mounted
            /// as read-only.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/read_only_filesystem`.
            internal var read_only_filesystem: Swift.Bool?
            /// ReadWriteTmpfs indicates that when running with a ReadOnlyFilesystem
            /// mount temporary file systems.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/read_write_tmpfs`.
            internal var read_write_tmpfs: Swift.Bool?
            /// SeccompPolicy determines which seccomp profile gets applied
            /// the container. valid values: empty,default,image
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/seccomp_policy`.
            internal var seccomp_policy: Swift.String?
            /// SeccompProfilePath is the path to a JSON file containing the
            /// container's Seccomp profile.
            /// If not specified, no Seccomp profile will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/seccomp_profile_path`.
            internal var seccomp_profile_path: Swift.String?
            /// SelinuxProcessLabel is the process label the container will use.
            /// If SELinux is enabled and this is not specified, a label will be
            /// automatically generated if not specified.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/selinux_opts`.
            internal var selinux_opts: [Swift.String]?
            /// Umask is the umask the init process of the container will be run with.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/umask`.
            internal var umask: Swift.String?
            /// Unmask a path in the container. Some paths are masked by default,
            /// preventing them from being accessed within the container; this undoes
            /// that masking. If ALL is passed, all paths will be unmasked.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/unmask`.
            internal var unmask: [Swift.String]?
            /// User is the user the container will be run as.
            /// Can be given as a UID or a username; if a username, it will be
            /// resolved within the container, using the container's /etc/passwd.
            /// If unset, the container will be run as root.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/user`.
            internal var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerSecurityConfig/userns`.
            internal var userns: Components.Schemas.Namespace?
            /// Creates a new `ContainerSecurityConfig`.
            ///
            /// - Parameters:
            ///   - apparmor_profile: ApparmorProfile is the name of the Apparmor profile the container
            ///   - cap_add: CapAdd are capabilities which will be added to the container.
            ///   - cap_drop: CapDrop are capabilities which will be removed from the container.
            ///   - groups: Groups are a list of supplemental groups the container's user will
            ///   - idmappings:
            ///   - label_nested: LabelNested indicates whether or not the container is allowed to
            ///   - mask: Mask is the path we want to mask in the container. This masks the paths
            ///   - no_new_privileges: NoNewPrivileges is whether the container will set the no new
            ///   - privileged: Privileged is whether the container is privileged.
            ///   - procfs_opts: ProcOpts are the options used for the proc mount.
            ///   - read_only_filesystem: ReadOnlyFilesystem indicates that everything will be mounted
            ///   - read_write_tmpfs: ReadWriteTmpfs indicates that when running with a ReadOnlyFilesystem
            ///   - seccomp_policy: SeccompPolicy determines which seccomp profile gets applied
            ///   - seccomp_profile_path: SeccompProfilePath is the path to a JSON file containing the
            ///   - selinux_opts: SelinuxProcessLabel is the process label the container will use.
            ///   - umask: Umask is the umask the init process of the container will be run with.
            ///   - unmask: Unmask a path in the container. Some paths are masked by default,
            ///   - user: User is the user the container will be run as.
            ///   - userns:
            internal init(
                apparmor_profile: Swift.String? = nil,
                cap_add: [Swift.String]? = nil,
                cap_drop: [Swift.String]? = nil,
                groups: [Swift.String]? = nil,
                idmappings: Components.Schemas.IDMappingOptions? = nil,
                label_nested: Swift.Bool? = nil,
                mask: [Swift.String]? = nil,
                no_new_privileges: Swift.Bool? = nil,
                privileged: Swift.Bool? = nil,
                procfs_opts: [Swift.String]? = nil,
                read_only_filesystem: Swift.Bool? = nil,
                read_write_tmpfs: Swift.Bool? = nil,
                seccomp_policy: Swift.String? = nil,
                seccomp_profile_path: Swift.String? = nil,
                selinux_opts: [Swift.String]? = nil,
                umask: Swift.String? = nil,
                unmask: [Swift.String]? = nil,
                user: Swift.String? = nil,
                userns: Components.Schemas.Namespace? = nil
            ) {
                self.apparmor_profile = apparmor_profile
                self.cap_add = cap_add
                self.cap_drop = cap_drop
                self.groups = groups
                self.idmappings = idmappings
                self.label_nested = label_nested
                self.mask = mask
                self.no_new_privileges = no_new_privileges
                self.privileged = privileged
                self.procfs_opts = procfs_opts
                self.read_only_filesystem = read_only_filesystem
                self.read_write_tmpfs = read_write_tmpfs
                self.seccomp_policy = seccomp_policy
                self.seccomp_profile_path = seccomp_profile_path
                self.selinux_opts = selinux_opts
                self.umask = umask
                self.unmask = unmask
                self.user = user
                self.userns = userns
            }
            internal enum CodingKeys: String, CodingKey {
                case apparmor_profile
                case cap_add
                case cap_drop
                case groups
                case idmappings
                case label_nested
                case mask
                case no_new_privileges
                case privileged
                case procfs_opts
                case read_only_filesystem
                case read_write_tmpfs
                case seccomp_policy
                case seccomp_profile_path
                case selinux_opts
                case umask
                case unmask
                case user
                case userns
            }
        }
        /// ContainerSize holds the size of the container's root filesystem and top
        /// read-write layer.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerSize`.
        internal struct ContainerSize: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerSize/rootFsSize`.
            internal var rootFsSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerSize/rwSize`.
            internal var rwSize: Swift.Int64?
            /// Creates a new `ContainerSize`.
            ///
            /// - Parameters:
            ///   - rootFsSize:
            ///   - rwSize:
            internal init(
                rootFsSize: Swift.Int64? = nil,
                rwSize: Swift.Int64? = nil
            ) {
                self.rootFsSize = rootFsSize
                self.rwSize = rwSize
            }
            internal enum CodingKeys: String, CodingKey {
                case rootFsSize
                case rwSize
            }
        }
        /// ContainerState stores container's running state
        /// it's part of ContainerJSONBase and will return by "inspect" command
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerState`.
        internal struct ContainerState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerState/Dead`.
            internal var Dead: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Error`.
            internal var _Error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerState/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerState/FinishedAt`.
            internal var FinishedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Health`.
            internal var Health: Components.Schemas.Health?
            /// - Remark: Generated from `#/components/schemas/ContainerState/OOMKilled`.
            internal var OOMKilled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Paused`.
            internal var Paused: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Pid`.
            internal var Pid: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Restarting`.
            internal var Restarting: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Running`.
            internal var Running: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/StartedAt`.
            internal var StartedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Status`.
            internal var Status: Swift.String?
            /// Creates a new `ContainerState`.
            ///
            /// - Parameters:
            ///   - Dead:
            ///   - _Error:
            ///   - ExitCode:
            ///   - FinishedAt:
            ///   - Health:
            ///   - OOMKilled:
            ///   - Paused:
            ///   - Pid:
            ///   - Restarting:
            ///   - Running:
            ///   - StartedAt:
            ///   - Status:
            internal init(
                Dead: Swift.Bool? = nil,
                _Error: Swift.String? = nil,
                ExitCode: Swift.Int64? = nil,
                FinishedAt: Swift.String? = nil,
                Health: Components.Schemas.Health? = nil,
                OOMKilled: Swift.Bool? = nil,
                Paused: Swift.Bool? = nil,
                Pid: Swift.Int64? = nil,
                Restarting: Swift.Bool? = nil,
                Running: Swift.Bool? = nil,
                StartedAt: Swift.String? = nil,
                Status: Swift.String? = nil
            ) {
                self.Dead = Dead
                self._Error = _Error
                self.ExitCode = ExitCode
                self.FinishedAt = FinishedAt
                self.Health = Health
                self.OOMKilled = OOMKilled
                self.Paused = Paused
                self.Pid = Pid
                self.Restarting = Restarting
                self.Running = Running
                self.StartedAt = StartedAt
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case Dead
                case _Error = "Error"
                case ExitCode
                case FinishedAt
                case Health
                case OOMKilled
                case Paused
                case Pid
                case Restarting
                case Running
                case StartedAt
                case Status
            }
        }
        /// ContainerStats contains the statistics information for a running container
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerStats`.
        internal struct ContainerStats: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerStats/AvgCPU`.
            internal var AvgCPU: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/BlockInput`.
            internal var BlockInput: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/BlockOutput`.
            internal var BlockOutput: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/CPU`.
            internal var CPU: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/CPUNano`.
            internal var CPUNano: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/CPUSystemNano`.
            internal var CPUSystemNano: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/ContainerID`.
            internal var ContainerID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/Duration`.
            internal var Duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/MemLimit`.
            internal var MemLimit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/MemPerc`.
            internal var MemPerc: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/MemUsage`.
            internal var MemUsage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/Name`.
            internal var Name: Swift.String?
            /// Map of interface name to network statistics for that interface.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStats/Network`.
            internal struct NetworkPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.ContainerNetworkStats]
                /// Creates a new `NetworkPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.ContainerNetworkStats] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of interface name to network statistics for that interface.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStats/Network`.
            internal var Network: Components.Schemas.ContainerStats.NetworkPayload?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/PIDs`.
            internal var PIDs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/PerCPU`.
            internal var PerCPU: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/SystemNano`.
            internal var SystemNano: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStats/UpTime`.
            internal var UpTime: Components.Schemas.Duration?
            /// Creates a new `ContainerStats`.
            ///
            /// - Parameters:
            ///   - AvgCPU:
            ///   - BlockInput:
            ///   - BlockOutput:
            ///   - CPU:
            ///   - CPUNano:
            ///   - CPUSystemNano:
            ///   - ContainerID:
            ///   - Duration:
            ///   - MemLimit:
            ///   - MemPerc:
            ///   - MemUsage:
            ///   - Name:
            ///   - Network: Map of interface name to network statistics for that interface.
            ///   - PIDs:
            ///   - PerCPU:
            ///   - SystemNano:
            ///   - UpTime:
            internal init(
                AvgCPU: Swift.Double? = nil,
                BlockInput: Swift.Int? = nil,
                BlockOutput: Swift.Int? = nil,
                CPU: Swift.Double? = nil,
                CPUNano: Swift.Int? = nil,
                CPUSystemNano: Swift.Int? = nil,
                ContainerID: Swift.String? = nil,
                Duration: Swift.Int? = nil,
                MemLimit: Swift.Int? = nil,
                MemPerc: Swift.Double? = nil,
                MemUsage: Swift.Int? = nil,
                Name: Swift.String? = nil,
                Network: Components.Schemas.ContainerStats.NetworkPayload? = nil,
                PIDs: Swift.Int? = nil,
                PerCPU: [Swift.Int]? = nil,
                SystemNano: Swift.Int? = nil,
                UpTime: Components.Schemas.Duration? = nil
            ) {
                self.AvgCPU = AvgCPU
                self.BlockInput = BlockInput
                self.BlockOutput = BlockOutput
                self.CPU = CPU
                self.CPUNano = CPUNano
                self.CPUSystemNano = CPUSystemNano
                self.ContainerID = ContainerID
                self.Duration = Duration
                self.MemLimit = MemLimit
                self.MemPerc = MemPerc
                self.MemUsage = MemUsage
                self.Name = Name
                self.Network = Network
                self.PIDs = PIDs
                self.PerCPU = PerCPU
                self.SystemNano = SystemNano
                self.UpTime = UpTime
            }
            internal enum CodingKeys: String, CodingKey {
                case AvgCPU
                case BlockInput
                case BlockOutput
                case CPU
                case CPUNano
                case CPUSystemNano
                case ContainerID
                case Duration
                case MemLimit
                case MemPerc
                case MemUsage
                case Name
                case Network
                case PIDs
                case PerCPU
                case SystemNano
                case UpTime
            }
        }
        /// ContainerStorageConfig contains information on the storage configuration of a
        /// container.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig`.
        internal struct ContainerStorageConfig: Codable, Hashable, Sendable {
            /// ChrootDirs is an additional set of directories that need to be
            /// treated as root directories. Standard bind mounts will be mounted
            /// into paths relative to these directories.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/chroot_directories`.
            internal var chroot_directories: [Swift.String]?
            /// Create the working directory if it doesn't exist.
            /// If unset, it doesn't create it.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/create_working_dir`.
            internal var create_working_dir: Swift.Bool?
            /// DeviceCgroupRule are device cgroup rules that allow containers
            /// to use additional types of devices.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/device_cgroup_rule`.
            internal var device_cgroup_rule: [Components.Schemas.LinuxDeviceCgroup]?
            /// Devices are devices that will be added to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/devices`.
            internal var devices: [Components.Schemas.LinuxDevice]?
            /// DevicesFrom specifies that this container will mount the device(s) from other container(s).
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/devices_from`.
            internal var devices_from: [Swift.String]?
            /// HostDeviceList is used to recreate the mounted device on inherited containers
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/host_device_list`.
            internal var host_device_list: [Components.Schemas.LinuxDevice]?
            /// Image is the image the container will be based on. The image will be
            /// used as the container's root filesystem, and its environment vars,
            /// volumes, and other configuration will be applied to the container.
            /// Conflicts with Rootfs.
            /// At least one of Image or Rootfs must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image`.
            internal var image: Swift.String?
            /// ImageArch is the user-specified image architecture.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image_arch`.
            internal var image_arch: Swift.String?
            /// ImageOS is the user-specified OS of the image.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image_os`.
            internal var image_os: Swift.String?
            /// ImageVariant is the user-specified image variant.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image_variant`.
            internal var image_variant: Swift.String?
            /// ImageVolumeMode indicates how image volumes will be created.
            /// Supported modes are "ignore" (do not create), "tmpfs" (create as
            /// tmpfs), and "anonymous" (create as anonymous volumes).
            /// The default if unset is anonymous.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image_volume_mode`.
            internal var image_volume_mode: Swift.String?
            /// Image volumes bind-mount a container-image mount into the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/image_volumes`.
            internal var image_volumes: [Components.Schemas.ImageVolume]?
            /// Init specifies that an init binary will be mounted into the
            /// container, and will be used as PID1.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/init`.
            internal var _init: Swift.Bool?
            /// InitPath specifies the path to the init binary that will be added if
            /// Init is specified above. If not specified, the default set in the
            /// Libpod config will be used. Ignored if Init above is not set.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/init_path`.
            internal var init_path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/ipcns`.
            internal var ipcns: Components.Schemas.Namespace?
            /// Mounts are mounts that will be added to the container.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/mounts`.
            internal var mounts: [Components.Schemas.Mount]?
            /// Overlay volumes are named volumes that will be added to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/overlay_volumes`.
            internal var overlay_volumes: [Components.Schemas.OverlayVolume]?
            /// RawImageName is the user-specified and unprocessed input referring
            /// to a local or a remote image.
            /// Optional, but strongly encouraged to be set if Image is set.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/raw_image_name`.
            internal var raw_image_name: Swift.String?
            /// Rootfs is the path to a directory that will be used as the
            /// container's root filesystem. No modification will be made to the
            /// directory, it will be directly mounted into the container as root.
            /// Conflicts with Image.
            /// At least one of Image or Rootfs must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/rootfs`.
            internal var rootfs: Swift.String?
            /// RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/rootfs_mapping`.
            internal var rootfs_mapping: Swift.String?
            /// RootfsOverlay tells if rootfs is actually an overlay on top of base path.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/rootfs_overlay`.
            internal var rootfs_overlay: Swift.Bool?
            /// RootfsPropagation is the rootfs propagation mode for the container.
            /// If not set, the default of rslave will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/rootfs_propagation`.
            internal var rootfs_propagation: Swift.String?
            /// Secrets are the secrets that will be added to the container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/secrets`.
            internal var secrets: [Components.Schemas.Secret]?
            /// ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            /// Conflicts with ShmSize if IpcNS is not private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/shm_size`.
            internal var shm_size: Swift.Int64?
            /// ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            /// specifically /run, /run/lock, /var/log/journal and /tmp.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/shm_size_systemd`.
            internal var shm_size_systemd: Swift.Int64?
            /// StorageOpts is the container's storage options
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/storage_opts`.
            internal struct storage_optsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `storage_optsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// StorageOpts is the container's storage options
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/storage_opts`.
            internal var storage_opts: Components.Schemas.ContainerStorageConfig.storage_optsPayload?
            /// Volatile specifies whether the container storage can be optimized
            /// at the cost of not syncing all the dirty files in memory.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/volatile`.
            internal var volatile: Swift.Bool?
            /// Volumes are named volumes that will be added to the container.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/volumes`.
            internal var volumes: [Components.Schemas.NamedVolume]?
            /// VolumesFrom is a set of containers whose volumes will be added to
            /// this container. The name or ID of the container must be provided, and
            /// may optionally be followed by a : and then one or more
            /// comma-separated options. Valid options are 'ro', 'rw', and 'z'.
            /// Options will be used for all volumes sourced from the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// WorkDir is the container's working directory.
            /// If unset, the default, /, will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerStorageConfig/work_dir`.
            internal var work_dir: Swift.String?
            /// Creates a new `ContainerStorageConfig`.
            ///
            /// - Parameters:
            ///   - chroot_directories: ChrootDirs is an additional set of directories that need to be
            ///   - create_working_dir: Create the working directory if it doesn't exist.
            ///   - device_cgroup_rule: DeviceCgroupRule are device cgroup rules that allow containers
            ///   - devices: Devices are devices that will be added to the container.
            ///   - devices_from: DevicesFrom specifies that this container will mount the device(s) from other container(s).
            ///   - host_device_list: HostDeviceList is used to recreate the mounted device on inherited containers
            ///   - image: Image is the image the container will be based on. The image will be
            ///   - image_arch: ImageArch is the user-specified image architecture.
            ///   - image_os: ImageOS is the user-specified OS of the image.
            ///   - image_variant: ImageVariant is the user-specified image variant.
            ///   - image_volume_mode: ImageVolumeMode indicates how image volumes will be created.
            ///   - image_volumes: Image volumes bind-mount a container-image mount into the container.
            ///   - _init: Init specifies that an init binary will be mounted into the
            ///   - init_path: InitPath specifies the path to the init binary that will be added if
            ///   - ipcns:
            ///   - mounts: Mounts are mounts that will be added to the container.
            ///   - overlay_volumes: Overlay volumes are named volumes that will be added to the container.
            ///   - raw_image_name: RawImageName is the user-specified and unprocessed input referring
            ///   - rootfs: Rootfs is the path to a directory that will be used as the
            ///   - rootfs_mapping: RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs.
            ///   - rootfs_overlay: RootfsOverlay tells if rootfs is actually an overlay on top of base path.
            ///   - rootfs_propagation: RootfsPropagation is the rootfs propagation mode for the container.
            ///   - secrets: Secrets are the secrets that will be added to the container
            ///   - shm_size: ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            ///   - shm_size_systemd: ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            ///   - storage_opts: StorageOpts is the container's storage options
            ///   - volatile: Volatile specifies whether the container storage can be optimized
            ///   - volumes: Volumes are named volumes that will be added to the container.
            ///   - volumes_from: VolumesFrom is a set of containers whose volumes will be added to
            ///   - work_dir: WorkDir is the container's working directory.
            internal init(
                chroot_directories: [Swift.String]? = nil,
                create_working_dir: Swift.Bool? = nil,
                device_cgroup_rule: [Components.Schemas.LinuxDeviceCgroup]? = nil,
                devices: [Components.Schemas.LinuxDevice]? = nil,
                devices_from: [Swift.String]? = nil,
                host_device_list: [Components.Schemas.LinuxDevice]? = nil,
                image: Swift.String? = nil,
                image_arch: Swift.String? = nil,
                image_os: Swift.String? = nil,
                image_variant: Swift.String? = nil,
                image_volume_mode: Swift.String? = nil,
                image_volumes: [Components.Schemas.ImageVolume]? = nil,
                _init: Swift.Bool? = nil,
                init_path: Swift.String? = nil,
                ipcns: Components.Schemas.Namespace? = nil,
                mounts: [Components.Schemas.Mount]? = nil,
                overlay_volumes: [Components.Schemas.OverlayVolume]? = nil,
                raw_image_name: Swift.String? = nil,
                rootfs: Swift.String? = nil,
                rootfs_mapping: Swift.String? = nil,
                rootfs_overlay: Swift.Bool? = nil,
                rootfs_propagation: Swift.String? = nil,
                secrets: [Components.Schemas.Secret]? = nil,
                shm_size: Swift.Int64? = nil,
                shm_size_systemd: Swift.Int64? = nil,
                storage_opts: Components.Schemas.ContainerStorageConfig.storage_optsPayload? = nil,
                volatile: Swift.Bool? = nil,
                volumes: [Components.Schemas.NamedVolume]? = nil,
                volumes_from: [Swift.String]? = nil,
                work_dir: Swift.String? = nil
            ) {
                self.chroot_directories = chroot_directories
                self.create_working_dir = create_working_dir
                self.device_cgroup_rule = device_cgroup_rule
                self.devices = devices
                self.devices_from = devices_from
                self.host_device_list = host_device_list
                self.image = image
                self.image_arch = image_arch
                self.image_os = image_os
                self.image_variant = image_variant
                self.image_volume_mode = image_volume_mode
                self.image_volumes = image_volumes
                self._init = _init
                self.init_path = init_path
                self.ipcns = ipcns
                self.mounts = mounts
                self.overlay_volumes = overlay_volumes
                self.raw_image_name = raw_image_name
                self.rootfs = rootfs
                self.rootfs_mapping = rootfs_mapping
                self.rootfs_overlay = rootfs_overlay
                self.rootfs_propagation = rootfs_propagation
                self.secrets = secrets
                self.shm_size = shm_size
                self.shm_size_systemd = shm_size_systemd
                self.storage_opts = storage_opts
                self.volatile = volatile
                self.volumes = volumes
                self.volumes_from = volumes_from
                self.work_dir = work_dir
            }
            internal enum CodingKeys: String, CodingKey {
                case chroot_directories
                case create_working_dir
                case device_cgroup_rule
                case devices
                case devices_from
                case host_device_list
                case image
                case image_arch
                case image_os
                case image_variant
                case image_volume_mode
                case image_volumes
                case _init = "init"
                case init_path
                case ipcns
                case mounts
                case overlay_volumes
                case raw_image_name
                case rootfs
                case rootfs_mapping
                case rootfs_overlay
                case rootfs_propagation
                case secrets
                case shm_size
                case shm_size_systemd
                case storage_opts
                case volatile
                case volumes
                case volumes_from
                case work_dir
            }
        }
        /// ContainerStore describes the quantity of containers in the
        /// store by status
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerStore`.
        internal struct ContainerStore: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerStore/number`.
            internal var number: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerStore/paused`.
            internal var paused: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerStore/running`.
            internal var running: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContainerStore/stopped`.
            internal var stopped: Swift.Int64?
            /// Creates a new `ContainerStore`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - paused:
            ///   - running:
            ///   - stopped:
            internal init(
                number: Swift.Int64? = nil,
                paused: Swift.Int64? = nil,
                running: Swift.Int64? = nil,
                stopped: Swift.Int64? = nil
            ) {
                self.number = number
                self.paused = paused
                self.running = running
                self.stopped = stopped
            }
            internal enum CodingKeys: String, CodingKey {
                case number
                case paused
                case running
                case stopped
            }
        }
        /// ContainerTopOKBody OK response to ContainerTop operation
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerTopOKBody`.
        internal struct ContainerTopOKBody: Codable, Hashable, Sendable {
            /// Each process running in the container, where each is process
            /// is an array of values corresponding to the titles.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerTopOKBody/Processes`.
            internal var Processes: [[Swift.String]]
            /// The ps column titles
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerTopOKBody/Titles`.
            internal var Titles: [Swift.String]
            /// Creates a new `ContainerTopOKBody`.
            ///
            /// - Parameters:
            ///   - Processes: Each process running in the container, where each is process
            ///   - Titles: The ps column titles
            internal init(
                Processes: [[Swift.String]],
                Titles: [Swift.String]
            ) {
                self.Processes = Processes
                self.Titles = Titles
            }
            internal enum CodingKeys: String, CodingKey {
                case Processes
                case Titles
            }
        }
        /// ContainerUpdateOKBody OK response to ContainerUpdate operation
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerUpdateOKBody`.
        internal struct ContainerUpdateOKBody: Codable, Hashable, Sendable {
            /// warnings
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerUpdateOKBody/Warnings`.
            internal var Warnings: [Swift.String]
            /// Creates a new `ContainerUpdateOKBody`.
            ///
            /// - Parameters:
            ///   - Warnings: warnings
            internal init(Warnings: [Swift.String]) {
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContainersPruneReport`.
        internal struct ContainersPruneReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainersPruneReport/ContainersDeleted`.
            internal var ContainersDeleted: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainersPruneReport/SpaceReclaimed`.
            internal var SpaceReclaimed: Swift.Int?
            /// Creates a new `ContainersPruneReport`.
            ///
            /// - Parameters:
            ///   - ContainersDeleted:
            ///   - SpaceReclaimed:
            internal init(
                ContainersDeleted: [Swift.String]? = nil,
                SpaceReclaimed: Swift.Int? = nil
            ) {
                self.ContainersDeleted = ContainersDeleted
                self.SpaceReclaimed = SpaceReclaimed
            }
            internal enum CodingKeys: String, CodingKey {
                case ContainersDeleted
                case SpaceReclaimed
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContainersPruneReportLibpod`.
        internal struct ContainersPruneReportLibpod: Codable, Hashable, Sendable {
            /// Error which occurred during prune operation (if any).
            /// This field is optional and may be omitted if no error occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainersPruneReportLibpod/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainersPruneReportLibpod/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainersPruneReportLibpod/Size`.
            internal var Size: Swift.Int64?
            /// Creates a new `ContainersPruneReportLibpod`.
            ///
            /// - Parameters:
            ///   - Err: Error which occurred during prune operation (if any).
            ///   - Id:
            ///   - Size:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil,
                Size: Swift.Int64? = nil
            ) {
                self.Err = Err
                self.Id = Id
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
                case Size
            }
        }
        /// CreateContainerConfig used when compatible endpoint creates a container
        ///
        /// - Remark: Generated from `#/components/schemas/CreateContainerConfig`.
        internal struct CreateContainerConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/ArgsEscaped`.
            internal var ArgsEscaped: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/AttachStderr`.
            internal var AttachStderr: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/AttachStdin`.
            internal var AttachStdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/AttachStdout`.
            internal var AttachStdout: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Cmd`.
            internal var Cmd: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Domainname`.
            internal var Domainname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Entrypoint`.
            internal var Entrypoint: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Env`.
            internal var Env: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/EnvMerge`.
            internal var EnvMerge: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/ExposedPorts`.
            internal var ExposedPorts: Components.Schemas.PortSet?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Healthcheck`.
            internal var Healthcheck: Components.Schemas.HealthcheckConfig?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/HostConfig`.
            internal var HostConfig: Components.Schemas.HostConfig?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Hostname`.
            internal var Hostname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Labels`.
            internal var Labels: Components.Schemas.CreateContainerConfig.LabelsPayload?
            /// Mac Address of the container.
            ///
            /// Deprecated: this field is deprecated since API v1.44. Use EndpointSettings.MacAddress instead.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/MacAddress`.
            internal var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/NetworkDisabled`.
            internal var NetworkDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/NetworkingConfig`.
            internal var NetworkingConfig: Components.Schemas.NetworkingConfig?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/OnBuild`.
            internal var OnBuild: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/OpenStdin`.
            internal var OpenStdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Shell`.
            internal var Shell: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/StdinOnce`.
            internal var StdinOnce: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/StopSignal`.
            internal var StopSignal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/StopTimeout`.
            internal var StopTimeout: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Tty`.
            internal var Tty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/UnsetEnv`.
            internal var UnsetEnv: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/UnsetEnvAll`.
            internal var UnsetEnvAll: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/User`.
            internal var User: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Volumes`.
            internal struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/Volumes`.
            internal var Volumes: Components.Schemas.CreateContainerConfig.VolumesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateContainerConfig/WorkingDir`.
            internal var WorkingDir: Swift.String?
            /// Creates a new `CreateContainerConfig`.
            ///
            /// - Parameters:
            ///   - ArgsEscaped:
            ///   - AttachStderr:
            ///   - AttachStdin:
            ///   - AttachStdout:
            ///   - Cmd:
            ///   - Domainname:
            ///   - Entrypoint:
            ///   - Env:
            ///   - EnvMerge:
            ///   - ExposedPorts:
            ///   - Healthcheck:
            ///   - HostConfig:
            ///   - Hostname:
            ///   - Image:
            ///   - Labels:
            ///   - MacAddress: Mac Address of the container.
            ///   - Name:
            ///   - NetworkDisabled:
            ///   - NetworkingConfig:
            ///   - OnBuild:
            ///   - OpenStdin:
            ///   - Shell:
            ///   - StdinOnce:
            ///   - StopSignal:
            ///   - StopTimeout:
            ///   - Tty:
            ///   - UnsetEnv:
            ///   - UnsetEnvAll:
            ///   - User:
            ///   - Volumes:
            ///   - WorkingDir:
            internal init(
                ArgsEscaped: Swift.Bool? = nil,
                AttachStderr: Swift.Bool? = nil,
                AttachStdin: Swift.Bool? = nil,
                AttachStdout: Swift.Bool? = nil,
                Cmd: Components.Schemas.StrSlice? = nil,
                Domainname: Swift.String? = nil,
                Entrypoint: Components.Schemas.StrSlice? = nil,
                Env: [Swift.String]? = nil,
                EnvMerge: [Swift.String]? = nil,
                ExposedPorts: Components.Schemas.PortSet? = nil,
                Healthcheck: Components.Schemas.HealthcheckConfig? = nil,
                HostConfig: Components.Schemas.HostConfig? = nil,
                Hostname: Swift.String? = nil,
                Image: Swift.String? = nil,
                Labels: Components.Schemas.CreateContainerConfig.LabelsPayload? = nil,
                MacAddress: Swift.String? = nil,
                Name: Swift.String? = nil,
                NetworkDisabled: Swift.Bool? = nil,
                NetworkingConfig: Components.Schemas.NetworkingConfig? = nil,
                OnBuild: [Swift.String]? = nil,
                OpenStdin: Swift.Bool? = nil,
                Shell: Components.Schemas.StrSlice? = nil,
                StdinOnce: Swift.Bool? = nil,
                StopSignal: Swift.String? = nil,
                StopTimeout: Swift.Int64? = nil,
                Tty: Swift.Bool? = nil,
                UnsetEnv: [Swift.String]? = nil,
                UnsetEnvAll: Swift.Bool? = nil,
                User: Swift.String? = nil,
                Volumes: Components.Schemas.CreateContainerConfig.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil
            ) {
                self.ArgsEscaped = ArgsEscaped
                self.AttachStderr = AttachStderr
                self.AttachStdin = AttachStdin
                self.AttachStdout = AttachStdout
                self.Cmd = Cmd
                self.Domainname = Domainname
                self.Entrypoint = Entrypoint
                self.Env = Env
                self.EnvMerge = EnvMerge
                self.ExposedPorts = ExposedPorts
                self.Healthcheck = Healthcheck
                self.HostConfig = HostConfig
                self.Hostname = Hostname
                self.Image = Image
                self.Labels = Labels
                self.MacAddress = MacAddress
                self.Name = Name
                self.NetworkDisabled = NetworkDisabled
                self.NetworkingConfig = NetworkingConfig
                self.OnBuild = OnBuild
                self.OpenStdin = OpenStdin
                self.Shell = Shell
                self.StdinOnce = StdinOnce
                self.StopSignal = StopSignal
                self.StopTimeout = StopTimeout
                self.Tty = Tty
                self.UnsetEnv = UnsetEnv
                self.UnsetEnvAll = UnsetEnvAll
                self.User = User
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
            }
            internal enum CodingKeys: String, CodingKey {
                case ArgsEscaped
                case AttachStderr
                case AttachStdin
                case AttachStdout
                case Cmd
                case Domainname
                case Entrypoint
                case Env
                case EnvMerge
                case ExposedPorts
                case Healthcheck
                case HostConfig
                case Hostname
                case Image
                case Labels
                case MacAddress
                case Name
                case NetworkDisabled
                case NetworkingConfig
                case OnBuild
                case OpenStdin
                case Shell
                case StdinOnce
                case StopSignal
                case StopTimeout
                case Tty
                case UnsetEnv
                case UnsetEnvAll
                case User
                case Volumes
                case WorkingDir
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateOptions`.
        internal struct CreateOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Attachable`.
            internal var Attachable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/ConfigFrom`.
            internal var ConfigFrom: Components.Schemas.ConfigReference?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/ConfigOnly`.
            internal var ConfigOnly: Swift.Bool?
            /// Name of the volume driver to use.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/EnableIPv6`.
            internal var EnableIPv6: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/IPAM`.
            internal var IPAM: Components.Schemas.IPAM?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Ingress`.
            internal var Ingress: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Internal`.
            internal var Internal: Swift.Bool?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Labels`.
            internal var Labels: Components.Schemas.CreateOptions.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Options`.
            internal var Options: Components.Schemas.CreateOptions.OptionsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateOptions/Scope`.
            internal var Scope: Swift.String?
            /// Creates a new `CreateOptions`.
            ///
            /// - Parameters:
            ///   - Attachable:
            ///   - ConfigFrom:
            ///   - ConfigOnly:
            ///   - Driver: Name of the volume driver to use.
            ///   - EnableIPv6:
            ///   - IPAM:
            ///   - Ingress:
            ///   - Internal:
            ///   - Labels: User-defined key/value metadata.
            ///   - Options:
            ///   - Scope:
            internal init(
                Attachable: Swift.Bool? = nil,
                ConfigFrom: Components.Schemas.ConfigReference? = nil,
                ConfigOnly: Swift.Bool? = nil,
                Driver: Swift.String? = nil,
                EnableIPv6: Swift.Bool? = nil,
                IPAM: Components.Schemas.IPAM? = nil,
                Ingress: Swift.Bool? = nil,
                Internal: Swift.Bool? = nil,
                Labels: Components.Schemas.CreateOptions.LabelsPayload? = nil,
                Options: Components.Schemas.CreateOptions.OptionsPayload? = nil,
                Scope: Swift.String? = nil
            ) {
                self.Attachable = Attachable
                self.ConfigFrom = ConfigFrom
                self.ConfigOnly = ConfigOnly
                self.Driver = Driver
                self.EnableIPv6 = EnableIPv6
                self.IPAM = IPAM
                self.Ingress = Ingress
                self.Internal = Internal
                self.Labels = Labels
                self.Options = Options
                self.Scope = Scope
            }
            internal enum CodingKeys: String, CodingKey {
                case Attachable
                case ConfigFrom
                case ConfigOnly
                case Driver
                case EnableIPv6
                case IPAM
                case Ingress
                case Internal
                case Labels
                case Options
                case Scope
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateRequest`.
        internal struct CreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Attachable`.
            internal var Attachable: Swift.Bool?
            /// Deprecated: CheckDuplicate is deprecated since API v1.44, but it defaults to true when sent by the client
            /// package to older daemons.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRequest/CheckDuplicate`.
            internal var CheckDuplicate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/ConfigFrom`.
            internal var ConfigFrom: Components.Schemas.ConfigReference?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/ConfigOnly`.
            internal var ConfigOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/EnableIPv6`.
            internal var EnableIPv6: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/IPAM`.
            internal var IPAM: Components.Schemas.IPAM?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Ingress`.
            internal var Ingress: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Internal`.
            internal var Internal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Labels`.
            internal var Labels: Components.Schemas.CreateRequest.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Options`.
            internal var Options: Components.Schemas.CreateRequest.OptionsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRequest/Scope`.
            internal var Scope: Swift.String?
            /// Creates a new `CreateRequest`.
            ///
            /// - Parameters:
            ///   - Attachable:
            ///   - CheckDuplicate: Deprecated: CheckDuplicate is deprecated since API v1.44, but it defaults to true when sent by the client
            ///   - ConfigFrom:
            ///   - ConfigOnly:
            ///   - Driver:
            ///   - EnableIPv6:
            ///   - IPAM:
            ///   - Ingress:
            ///   - Internal:
            ///   - Labels:
            ///   - Name:
            ///   - Options:
            ///   - Scope:
            internal init(
                Attachable: Swift.Bool? = nil,
                CheckDuplicate: Swift.Bool? = nil,
                ConfigFrom: Components.Schemas.ConfigReference? = nil,
                ConfigOnly: Swift.Bool? = nil,
                Driver: Swift.String? = nil,
                EnableIPv6: Swift.Bool? = nil,
                IPAM: Components.Schemas.IPAM? = nil,
                Ingress: Swift.Bool? = nil,
                Internal: Swift.Bool? = nil,
                Labels: Components.Schemas.CreateRequest.LabelsPayload? = nil,
                Name: Swift.String? = nil,
                Options: Components.Schemas.CreateRequest.OptionsPayload? = nil,
                Scope: Swift.String? = nil
            ) {
                self.Attachable = Attachable
                self.CheckDuplicate = CheckDuplicate
                self.ConfigFrom = ConfigFrom
                self.ConfigOnly = ConfigOnly
                self.Driver = Driver
                self.EnableIPv6 = EnableIPv6
                self.IPAM = IPAM
                self.Ingress = Ingress
                self.Internal = Internal
                self.Labels = Labels
                self.Name = Name
                self.Options = Options
                self.Scope = Scope
            }
            internal enum CodingKeys: String, CodingKey {
                case Attachable
                case CheckDuplicate
                case ConfigFrom
                case ConfigOnly
                case Driver
                case EnableIPv6
                case IPAM
                case Ingress
                case Internal
                case Labels
                case Name
                case Options
                case Scope
            }
        }
        /// OK response to ContainerCreate operation
        ///
        /// - Remark: Generated from `#/components/schemas/CreateResponse`.
        internal struct CreateResponse: Codable, Hashable, Sendable {
            /// The ID of the created container
            ///
            /// - Remark: Generated from `#/components/schemas/CreateResponse/Id`.
            internal var Id: Swift.String
            /// Warnings encountered when creating the container
            ///
            /// - Remark: Generated from `#/components/schemas/CreateResponse/Warnings`.
            internal var Warnings: [Swift.String]
            /// Creates a new `CreateResponse`.
            ///
            /// - Parameters:
            ///   - Id: The ID of the created container
            ///   - Warnings: Warnings encountered when creating the container
            internal init(
                Id: Swift.String,
                Warnings: [Swift.String]
            ) {
                self.Id = Id
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/DNSNetworkInfo`.
        internal struct DNSNetworkInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DNSNetworkInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DNSNetworkInfo/path`.
            internal var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DNSNetworkInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `DNSNetworkInfo`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - path:
            ///   - version:
            internal init(
                package: Swift.String? = nil,
                path: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.package = package
                self.path = path
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case package
                case path
                case version
            }
        }
        /// DeleteResponse delete response
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteResponse`.
        internal struct DeleteResponse: Codable, Hashable, Sendable {
            /// The image ID of an image that was deleted
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteResponse/Deleted`.
            internal var Deleted: Swift.String?
            /// The image ID of an image that was untagged
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteResponse/Untagged`.
            internal var Untagged: Swift.String?
            /// Creates a new `DeleteResponse`.
            ///
            /// - Parameters:
            ///   - Deleted: The image ID of an image that was deleted
            ///   - Untagged: The image ID of an image that was untagged
            internal init(
                Deleted: Swift.String? = nil,
                Untagged: Swift.String? = nil
            ) {
                self.Deleted = Deleted
                self.Untagged = Untagged
            }
            internal enum CodingKeys: String, CodingKey {
                case Deleted
                case Untagged
            }
        }
        /// This structure provides `application/vnd.oci.descriptor.v1+json` mediatype
        /// when marshalled to JSON.
        ///
        /// - Remark: Generated from `#/components/schemas/Descriptor`.
        internal struct Descriptor: Codable, Hashable, Sendable {
            /// Annotations contains arbitrary metadata relating to the targeted content.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations contains arbitrary metadata relating to the targeted content.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/annotations`.
            internal var annotations: Components.Schemas.Descriptor.annotationsPayload?
            /// ArtifactType is the IANA media type of this artifact.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/artifactType`.
            internal var artifactType: Swift.String?
            /// Data is an embedding of the targeted content. This is encoded as a base64
            /// string when marshalled to JSON (automatically, by encoding/json). If
            /// present, Data can be used directly to avoid fetching the targeted content.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/data`.
            internal var data: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/Descriptor/digest`.
            internal var digest: Components.Schemas.Digest?
            /// MediaType is the media type of the object this schema refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/mediaType`.
            internal var mediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Descriptor/platform`.
            internal var platform: Components.Schemas.Platform?
            /// Size specifies the size in bytes of the blob.
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/size`.
            internal var size: Swift.Int64?
            /// URLs specifies a list of URLs from which this object MAY be downloaded
            ///
            /// - Remark: Generated from `#/components/schemas/Descriptor/urls`.
            internal var urls: [Swift.String]?
            /// Creates a new `Descriptor`.
            ///
            /// - Parameters:
            ///   - annotations: Annotations contains arbitrary metadata relating to the targeted content.
            ///   - artifactType: ArtifactType is the IANA media type of this artifact.
            ///   - data: Data is an embedding of the targeted content. This is encoded as a base64
            ///   - digest:
            ///   - mediaType: MediaType is the media type of the object this schema refers to.
            ///   - platform:
            ///   - size: Size specifies the size in bytes of the blob.
            ///   - urls: URLs specifies a list of URLs from which this object MAY be downloaded
            internal init(
                annotations: Components.Schemas.Descriptor.annotationsPayload? = nil,
                artifactType: Swift.String? = nil,
                data: [Swift.Int]? = nil,
                digest: Components.Schemas.Digest? = nil,
                mediaType: Swift.String? = nil,
                platform: Components.Schemas.Platform? = nil,
                size: Swift.Int64? = nil,
                urls: [Swift.String]? = nil
            ) {
                self.annotations = annotations
                self.artifactType = artifactType
                self.data = data
                self.digest = digest
                self.mediaType = mediaType
                self.platform = platform
                self.size = size
                self.urls = urls
            }
            internal enum CodingKeys: String, CodingKey {
                case annotations
                case artifactType
                case data
                case digest
                case mediaType
                case platform
                case size
                case urls
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeviceMapping`.
        internal struct DeviceMapping: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/CgroupPermissions`.
            internal var CgroupPermissions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/PathInContainer`.
            internal var PathInContainer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/PathOnHost`.
            internal var PathOnHost: Swift.String?
            /// Creates a new `DeviceMapping`.
            ///
            /// - Parameters:
            ///   - CgroupPermissions:
            ///   - PathInContainer:
            ///   - PathOnHost:
            internal init(
                CgroupPermissions: Swift.String? = nil,
                PathInContainer: Swift.String? = nil,
                PathOnHost: Swift.String? = nil
            ) {
                self.CgroupPermissions = CgroupPermissions
                self.PathInContainer = PathInContainer
                self.PathOnHost = PathOnHost
            }
            internal enum CodingKeys: String, CodingKey {
                case CgroupPermissions
                case PathInContainer
                case PathOnHost
            }
        }
        /// Used by GPU device drivers.
        ///
        /// - Remark: Generated from `#/components/schemas/DeviceRequest`.
        internal struct DeviceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Capabilities`.
            internal var Capabilities: [[Swift.String]]?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Count`.
            internal var Count: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/DeviceIDs`.
            internal var DeviceIDs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Options`.
            internal var Options: Components.Schemas.DeviceRequest.OptionsPayload?
            /// Creates a new `DeviceRequest`.
            ///
            /// - Parameters:
            ///   - Capabilities:
            ///   - Count:
            ///   - DeviceIDs:
            ///   - Driver:
            ///   - Options:
            internal init(
                Capabilities: [[Swift.String]]? = nil,
                Count: Swift.Int64? = nil,
                DeviceIDs: [Swift.String]? = nil,
                Driver: Swift.String? = nil,
                Options: Components.Schemas.DeviceRequest.OptionsPayload? = nil
            ) {
                self.Capabilities = Capabilities
                self.Count = Count
                self.DeviceIDs = DeviceIDs
                self.Driver = Driver
                self.Options = Options
            }
            internal enum CodingKeys: String, CodingKey {
                case Capabilities
                case Count
                case DeviceIDs
                case Driver
                case Options
            }
        }
        /// The following is an example of the contents of Digest types:
        ///
        /// sha256:7173b809ca12ec5dee4506cd86be934c4596dd234ee82c0662eac04a8c2c71dc
        ///
        /// This allows to abstract the digest behind this type and work only in those
        /// terms.
        ///
        /// - Remark: Generated from `#/components/schemas/Digest`.
        internal typealias Digest = Swift.String
        /// DisconnectOptions represents the data to be used to disconnect a container
        /// from the network.
        ///
        /// - Remark: Generated from `#/components/schemas/DisconnectOptions`.
        internal struct DisconnectOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DisconnectOptions/Container`.
            internal var Container: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DisconnectOptions/Force`.
            internal var Force: Swift.Bool?
            /// Creates a new `DisconnectOptions`.
            ///
            /// - Parameters:
            ///   - Container:
            ///   - Force:
            internal init(
                Container: Swift.String? = nil,
                Force: Swift.Bool? = nil
            ) {
                self.Container = Container
                self.Force = Force
            }
            internal enum CodingKeys: String, CodingKey {
                case Container
                case Force
            }
        }
        /// DistributionInfo describes the host distribution for libpod
        ///
        /// - Remark: Generated from `#/components/schemas/DistributionInfo`.
        internal struct DistributionInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DistributionInfo/codename`.
            internal var codename: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DistributionInfo/distribution`.
            internal var distribution: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DistributionInfo/variant`.
            internal var variant: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DistributionInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `DistributionInfo`.
            ///
            /// - Parameters:
            ///   - codename:
            ///   - distribution:
            ///   - variant:
            ///   - version:
            internal init(
                codename: Swift.String? = nil,
                distribution: Swift.String? = nil,
                variant: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.codename = codename
                self.distribution = distribution
                self.variant = variant
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case codename
                case distribution
                case variant
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/Driver`.
        internal struct Driver: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Driver/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Driver/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Driver/Options`.
            internal var Options: Components.Schemas.Driver.OptionsPayload?
            /// Creates a new `Driver`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Options:
            internal init(
                Name: Swift.String? = nil,
                Options: Components.Schemas.Driver.OptionsPayload? = nil
            ) {
                self.Name = Name
                self.Options = Options
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Options
            }
        }
        /// DriverData handles the data for a storage driver
        ///
        /// - Remark: Generated from `#/components/schemas/DriverData`.
        internal struct DriverData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DriverData/Data`.
            internal struct DataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/DriverData/Data`.
            internal var Data: Components.Schemas.DriverData.DataPayload?
            /// - Remark: Generated from `#/components/schemas/DriverData/Name`.
            internal var Name: Swift.String?
            /// Creates a new `DriverData`.
            ///
            /// - Parameters:
            ///   - Data:
            ///   - Name:
            internal init(
                Data: Components.Schemas.DriverData.DataPayload? = nil,
                Name: Swift.String? = nil
            ) {
                self.Data = Data
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Data
                case Name
            }
        }
        /// A Duration represents the elapsed time between two instants
        /// as an int64 nanosecond count. The representation limits the
        /// largest representable duration to approximately 290 years.
        ///
        /// - Remark: Generated from `#/components/schemas/Duration`.
        internal typealias Duration = Swift.Int64
        /// EndpointIPAMConfig represents IPAM configurations for the endpoint
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig`.
        internal struct EndpointIPAMConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/IPv4Address`.
            internal var IPv4Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/IPv6Address`.
            internal var IPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/LinkLocalIPs`.
            internal var LinkLocalIPs: [Swift.String]?
            /// Creates a new `EndpointIPAMConfig`.
            ///
            /// - Parameters:
            ///   - IPv4Address:
            ///   - IPv6Address:
            ///   - LinkLocalIPs:
            internal init(
                IPv4Address: Swift.String? = nil,
                IPv6Address: Swift.String? = nil,
                LinkLocalIPs: [Swift.String]? = nil
            ) {
                self.IPv4Address = IPv4Address
                self.IPv6Address = IPv6Address
                self.LinkLocalIPs = LinkLocalIPs
            }
            internal enum CodingKeys: String, CodingKey {
                case IPv4Address
                case IPv6Address
                case LinkLocalIPs
            }
        }
        /// EndpointResource contains network resources allocated and used for a
        /// container in a network.
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointResource`.
        internal struct EndpointResource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointResource/EndpointID`.
            internal var EndpointID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointResource/IPv4Address`.
            internal var IPv4Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointResource/IPv6Address`.
            internal var IPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointResource/MacAddress`.
            internal var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointResource/Name`.
            internal var Name: Swift.String?
            /// Creates a new `EndpointResource`.
            ///
            /// - Parameters:
            ///   - EndpointID:
            ///   - IPv4Address:
            ///   - IPv6Address:
            ///   - MacAddress:
            ///   - Name:
            internal init(
                EndpointID: Swift.String? = nil,
                IPv4Address: Swift.String? = nil,
                IPv6Address: Swift.String? = nil,
                MacAddress: Swift.String? = nil,
                Name: Swift.String? = nil
            ) {
                self.EndpointID = EndpointID
                self.IPv4Address = IPv4Address
                self.IPv6Address = IPv6Address
                self.MacAddress = MacAddress
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case EndpointID
                case IPv4Address
                case IPv6Address
                case MacAddress
                case Name
            }
        }
        /// EndpointSettings stores the network endpoint details
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointSettings`.
        internal struct EndpointSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Aliases`.
            internal var Aliases: [Swift.String]?
            /// DNSNames holds all the (non fully qualified) DNS names associated to this endpoint. First entry is used to
            /// generate PTR records.
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DNSNames`.
            internal var DNSNames: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DriverOpts`.
            internal struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DriverOpts`.
            internal var DriverOpts: Components.Schemas.EndpointSettings.DriverOptsPayload?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/EndpointID`.
            internal var EndpointID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Gateway`.
            internal var Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/GlobalIPv6Address`.
            internal var GlobalIPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/GlobalIPv6PrefixLen`.
            internal var GlobalIPv6PrefixLen: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPAMConfig`.
            internal var IPAMConfig: Components.Schemas.EndpointIPAMConfig?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPAddress`.
            internal var IPAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPPrefixLen`.
            internal var IPPrefixLen: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPv6Gateway`.
            internal var IPv6Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Links`.
            internal var Links: [Swift.String]?
            /// MacAddress may be used to specify a MAC address when the container is created.
            /// Once the container is running, it becomes operational data (it may contain a
            /// generated address).
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/MacAddress`.
            internal var MacAddress: Swift.String?
            /// Operational data
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/NetworkID`.
            internal var NetworkID: Swift.String?
            /// Creates a new `EndpointSettings`.
            ///
            /// - Parameters:
            ///   - Aliases:
            ///   - DNSNames: DNSNames holds all the (non fully qualified) DNS names associated to this endpoint. First entry is used to
            ///   - DriverOpts:
            ///   - EndpointID:
            ///   - Gateway:
            ///   - GlobalIPv6Address:
            ///   - GlobalIPv6PrefixLen:
            ///   - IPAMConfig:
            ///   - IPAddress:
            ///   - IPPrefixLen:
            ///   - IPv6Gateway:
            ///   - Links:
            ///   - MacAddress: MacAddress may be used to specify a MAC address when the container is created.
            ///   - NetworkID: Operational data
            internal init(
                Aliases: [Swift.String]? = nil,
                DNSNames: [Swift.String]? = nil,
                DriverOpts: Components.Schemas.EndpointSettings.DriverOptsPayload? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int64? = nil,
                IPAMConfig: Components.Schemas.EndpointIPAMConfig? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int64? = nil,
                IPv6Gateway: Swift.String? = nil,
                Links: [Swift.String]? = nil,
                MacAddress: Swift.String? = nil,
                NetworkID: Swift.String? = nil
            ) {
                self.Aliases = Aliases
                self.DNSNames = DNSNames
                self.DriverOpts = DriverOpts
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.IPAMConfig = IPAMConfig
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.Links = Links
                self.MacAddress = MacAddress
                self.NetworkID = NetworkID
            }
            internal enum CodingKeys: String, CodingKey {
                case Aliases
                case DNSNames
                case DriverOpts
                case EndpointID
                case Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case IPAMConfig
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case Links
                case MacAddress
                case NetworkID
            }
        }
        /// ErrorModel is used in remote connections with podman
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorModel`.
        internal struct ErrorModel: Codable, Hashable, Sendable {
            /// API root cause formatted for automated parsing
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorModel/cause`.
            internal var cause: Swift.String?
            /// human error message, formatted for a human to read
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorModel/message`.
            internal var message: Swift.String?
            /// HTTP response code
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorModel/response`.
            internal var response: Swift.Int64?
            /// Creates a new `ErrorModel`.
            ///
            /// - Parameters:
            ///   - cause: API root cause formatted for automated parsing
            ///   - message: human error message, formatted for a human to read
            ///   - response: HTTP response code
            internal init(
                cause: Swift.String? = nil,
                message: Swift.String? = nil,
                response: Swift.Int64? = nil
            ) {
                self.cause = cause
                self.message = message
                self.response = response
            }
            internal enum CodingKeys: String, CodingKey {
                case cause
                case message
                case response
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        internal struct ErrorResponse: Codable, Hashable, Sendable {
            /// The error message.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/message`.
            internal var message: Swift.String
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - message: The error message.
            internal init(message: Swift.String) {
                self.message = message
            }
            internal enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// The bits have the same definition on all systems, so that
        /// information about files can be moved from one system
        /// to another portably. Not all bits apply to all systems.
        /// The only required bit is [ModeDir] for directories.
        ///
        /// - Remark: Generated from `#/components/schemas/FileMode`.
        internal typealias FileMode = Swift.Int
        /// - Remark: Generated from `#/components/schemas/FilesystemChange`.
        internal struct FilesystemChange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilesystemChange/Kind`.
            internal var Kind: Components.Schemas.ChangeType
            /// Path to file or directory that has changed.
            ///
            /// - Remark: Generated from `#/components/schemas/FilesystemChange/Path`.
            internal var Path: Swift.String
            /// Creates a new `FilesystemChange`.
            ///
            /// - Parameters:
            ///   - Kind:
            ///   - Path: Path to file or directory that has changed.
            internal init(
                Kind: Components.Schemas.ChangeType,
                Path: Swift.String
            ) {
                self.Kind = Kind
                self.Path = Path
            }
            internal enum CodingKeys: String, CodingKey {
                case Kind
                case Path
            }
        }
        /// GraphDriverData Information about the storage driver used to store the container's and
        /// image's filesystem.
        ///
        /// - Remark: Generated from `#/components/schemas/GraphDriverData`.
        internal struct GraphDriverData: Codable, Hashable, Sendable {
            /// Low-level storage metadata, provided as key/value pairs.
            ///
            /// This information is driver-specific, and depends on the storage-driver
            /// in use, and should be used for informational purposes only.
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Data`.
            internal struct DataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Low-level storage metadata, provided as key/value pairs.
            ///
            /// This information is driver-specific, and depends on the storage-driver
            /// in use, and should be used for informational purposes only.
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Data`.
            internal var Data: Components.Schemas.GraphDriverData.DataPayload
            /// Name of the storage driver.
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Name`.
            internal var Name: Swift.String
            /// Creates a new `GraphDriverData`.
            ///
            /// - Parameters:
            ///   - Data: Low-level storage metadata, provided as key/value pairs.
            ///   - Name: Name of the storage driver.
            internal init(
                Data: Components.Schemas.GraphDriverData.DataPayload,
                Name: Swift.String
            ) {
                self.Data = Data
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Data
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/HardwareAddr`.
        internal typealias HardwareAddr = [Swift.Int]
        /// Health stores information about the container's healthcheck results
        ///
        /// - Remark: Generated from `#/components/schemas/Health`.
        internal struct Health: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Health/FailingStreak`.
            internal var FailingStreak: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Health/Log`.
            internal var Log: [Components.Schemas.HealthcheckResult]?
            /// - Remark: Generated from `#/components/schemas/Health/Status`.
            internal var Status: Swift.String?
            /// Creates a new `Health`.
            ///
            /// - Parameters:
            ///   - FailingStreak:
            ///   - Log:
            ///   - Status:
            internal init(
                FailingStreak: Swift.Int64? = nil,
                Log: [Components.Schemas.HealthcheckResult]? = nil,
                Status: Swift.String? = nil
            ) {
                self.FailingStreak = FailingStreak
                self.Log = Log
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case FailingStreak
                case Log
                case Status
            }
        }
        /// HealthCheckLog describes the results of a single healthcheck
        ///
        /// - Remark: Generated from `#/components/schemas/HealthCheckLog`.
        internal struct HealthCheckLog: Codable, Hashable, Sendable {
            /// End time as a string
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckLog/End`.
            internal var End: Swift.String?
            /// Exitcode is 0 or 1
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckLog/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// Output is the stdout/stderr from the healthcheck command
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckLog/Output`.
            internal var Output: Swift.String?
            /// Start time as string
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckLog/Start`.
            internal var Start: Swift.String?
            /// Creates a new `HealthCheckLog`.
            ///
            /// - Parameters:
            ///   - End: End time as a string
            ///   - ExitCode: Exitcode is 0 or 1
            ///   - Output: Output is the stdout/stderr from the healthcheck command
            ///   - Start: Start time as string
            internal init(
                End: Swift.String? = nil,
                ExitCode: Swift.Int64? = nil,
                Output: Swift.String? = nil,
                Start: Swift.String? = nil
            ) {
                self.End = End
                self.ExitCode = ExitCode
                self.Output = Output
                self.Start = Start
            }
            internal enum CodingKeys: String, CodingKey {
                case End
                case ExitCode
                case Output
                case Start
            }
        }
        /// HealthCheckOnFailureAction defines how Podman reacts when a container's health
        /// status turns unhealthy.
        ///
        /// - Remark: Generated from `#/components/schemas/HealthCheckOnFailureAction`.
        internal typealias HealthCheckOnFailureAction = Swift.Int64
        /// HealthCheckResults describes the results/logs from a healthcheck
        ///
        /// - Remark: Generated from `#/components/schemas/HealthCheckResults`.
        internal struct HealthCheckResults: Codable, Hashable, Sendable {
            /// FailingStreak is the number of consecutive failed healthchecks
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckResults/FailingStreak`.
            internal var FailingStreak: Swift.Int64?
            /// Log describes healthcheck attempts and results
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckResults/Log`.
            internal var Log: [Components.Schemas.HealthCheckLog]?
            /// Status starting, healthy or unhealthy
            ///
            /// - Remark: Generated from `#/components/schemas/HealthCheckResults/Status`.
            internal var Status: Swift.String?
            /// Creates a new `HealthCheckResults`.
            ///
            /// - Parameters:
            ///   - FailingStreak: FailingStreak is the number of consecutive failed healthchecks
            ///   - Log: Log describes healthcheck attempts and results
            ///   - Status: Status starting, healthy or unhealthy
            internal init(
                FailingStreak: Swift.Int64? = nil,
                Log: [Components.Schemas.HealthCheckLog]? = nil,
                Status: Swift.String? = nil
            ) {
                self.FailingStreak = FailingStreak
                self.Log = Log
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case FailingStreak
                case Log
                case Status
            }
        }
        /// - Remark: Generated from `#/components/schemas/HealthcheckConfig`.
        internal struct HealthcheckConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/Interval`.
            internal var Interval: Components.Schemas.Duration?
            /// Retries is the number of consecutive failures needed to consider a container as unhealthy.
            /// Zero means inherit.
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/Retries`.
            internal var Retries: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/StartInterval`.
            internal var StartInterval: Components.Schemas.Duration?
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/StartPeriod`.
            internal var StartPeriod: Components.Schemas.Duration?
            /// Test is the test to perform to check that the container is healthy.
            /// An empty slice means to inherit the default.
            /// The options are:
            /// {} : inherit healthcheck
            /// {"NONE"} : disable healthcheck
            /// {"CMD", args...} : exec arguments directly
            /// {"CMD-SHELL", command} : run command with system's default shell
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/Test`.
            internal var Test: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HealthcheckConfig/Timeout`.
            internal var Timeout: Components.Schemas.Duration?
            /// Creates a new `HealthcheckConfig`.
            ///
            /// - Parameters:
            ///   - Interval:
            ///   - Retries: Retries is the number of consecutive failures needed to consider a container as unhealthy.
            ///   - StartInterval:
            ///   - StartPeriod:
            ///   - Test: Test is the test to perform to check that the container is healthy.
            ///   - Timeout:
            internal init(
                Interval: Components.Schemas.Duration? = nil,
                Retries: Swift.Int64? = nil,
                StartInterval: Components.Schemas.Duration? = nil,
                StartPeriod: Components.Schemas.Duration? = nil,
                Test: [Swift.String]? = nil,
                Timeout: Components.Schemas.Duration? = nil
            ) {
                self.Interval = Interval
                self.Retries = Retries
                self.StartInterval = StartInterval
                self.StartPeriod = StartPeriod
                self.Test = Test
                self.Timeout = Timeout
            }
            internal enum CodingKeys: String, CodingKey {
                case Interval
                case Retries
                case StartInterval
                case StartPeriod
                case Test
                case Timeout
            }
        }
        /// HealthcheckResult stores information about a single run of a healthcheck probe
        ///
        /// - Remark: Generated from `#/components/schemas/HealthcheckResult`.
        internal struct HealthcheckResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/End`.
            internal var End: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/Output`.
            internal var Output: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/Start`.
            internal var Start: Foundation.Date?
            /// Creates a new `HealthcheckResult`.
            ///
            /// - Parameters:
            ///   - End:
            ///   - ExitCode:
            ///   - Output:
            ///   - Start:
            internal init(
                End: Foundation.Date? = nil,
                ExitCode: Swift.Int64? = nil,
                Output: Swift.String? = nil,
                Start: Foundation.Date? = nil
            ) {
                self.End = End
                self.ExitCode = ExitCode
                self.Output = Output
                self.Start = Start
            }
            internal enum CodingKeys: String, CodingKey {
                case End
                case ExitCode
                case Output
                case Start
            }
        }
        /// - Remark: Generated from `#/components/schemas/History`.
        internal struct History: Codable, Hashable, Sendable {
            /// Author is the author of the build point.
            ///
            /// - Remark: Generated from `#/components/schemas/History/author`.
            internal var author: Swift.String?
            /// Comment is a custom message set when creating the layer.
            ///
            /// - Remark: Generated from `#/components/schemas/History/comment`.
            internal var comment: Swift.String?
            /// Created is the combined date and time at which the layer was created, formatted as defined by RFC 3339, section 5.6.
            ///
            /// - Remark: Generated from `#/components/schemas/History/created`.
            internal var created: Foundation.Date?
            /// CreatedBy is the command which created the layer.
            ///
            /// - Remark: Generated from `#/components/schemas/History/created_by`.
            internal var created_by: Swift.String?
            /// EmptyLayer is used to mark if the history item created a filesystem diff.
            ///
            /// - Remark: Generated from `#/components/schemas/History/empty_layer`.
            internal var empty_layer: Swift.Bool?
            /// Creates a new `History`.
            ///
            /// - Parameters:
            ///   - author: Author is the author of the build point.
            ///   - comment: Comment is a custom message set when creating the layer.
            ///   - created: Created is the combined date and time at which the layer was created, formatted as defined by RFC 3339, section 5.6.
            ///   - created_by: CreatedBy is the command which created the layer.
            ///   - empty_layer: EmptyLayer is used to mark if the history item created a filesystem diff.
            internal init(
                author: Swift.String? = nil,
                comment: Swift.String? = nil,
                created: Foundation.Date? = nil,
                created_by: Swift.String? = nil,
                empty_layer: Swift.Bool? = nil
            ) {
                self.author = author
                self.comment = comment
                self.created = created
                self.created_by = created_by
                self.empty_layer = empty_layer
            }
            internal enum CodingKeys: String, CodingKey {
                case author
                case comment
                case created
                case created_by
                case empty_layer
            }
        }
        /// HistoryResponse provides details on image layers
        ///
        /// - Remark: Generated from `#/components/schemas/HistoryResponse`.
        internal struct HistoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/Comment`.
            internal var Comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/Created`.
            internal var Created: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/CreatedBy`.
            internal var CreatedBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HistoryResponse/Tags`.
            internal var Tags: [Swift.String]?
            /// Creates a new `HistoryResponse`.
            ///
            /// - Parameters:
            ///   - Comment:
            ///   - Created:
            ///   - CreatedBy:
            ///   - Id:
            ///   - Size:
            ///   - Tags:
            internal init(
                Comment: Swift.String? = nil,
                Created: Swift.Int64? = nil,
                CreatedBy: Swift.String? = nil,
                Id: Swift.String? = nil,
                Size: Swift.Int64? = nil,
                Tags: [Swift.String]? = nil
            ) {
                self.Comment = Comment
                self.Created = Created
                self.CreatedBy = CreatedBy
                self.Id = Id
                self.Size = Size
                self.Tags = Tags
            }
            internal enum CodingKeys: String, CodingKey {
                case Comment
                case Created
                case CreatedBy
                case Id
                case Size
                case Tags
            }
        }
        /// HistoryResponseItem individual image layer information in response to ImageHistory operation
        ///
        /// - Remark: Generated from `#/components/schemas/HistoryResponseItem`.
        internal struct HistoryResponseItem: Codable, Hashable, Sendable {
            /// comment
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/Comment`.
            internal var Comment: Swift.String
            /// created
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/Created`.
            internal var Created: Swift.Int64
            /// created by
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/CreatedBy`.
            internal var CreatedBy: Swift.String
            /// Id
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/Id`.
            internal var Id: Swift.String
            /// size
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/Size`.
            internal var Size: Swift.Int64
            /// tags
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryResponseItem/Tags`.
            internal var Tags: [Swift.String]
            /// Creates a new `HistoryResponseItem`.
            ///
            /// - Parameters:
            ///   - Comment: comment
            ///   - Created: created
            ///   - CreatedBy: created by
            ///   - Id: Id
            ///   - Size: size
            ///   - Tags: tags
            internal init(
                Comment: Swift.String,
                Created: Swift.Int64,
                CreatedBy: Swift.String,
                Id: Swift.String,
                Size: Swift.Int64,
                Tags: [Swift.String]
            ) {
                self.Comment = Comment
                self.Created = Created
                self.CreatedBy = CreatedBy
                self.Id = Id
                self.Size = Size
                self.Tags = Tags
            }
            internal enum CodingKeys: String, CodingKey {
                case Comment
                case Created
                case CreatedBy
                case Id
                case Size
                case Tags
            }
        }
        /// Here, "non-portable" means "dependent of the host we are running on".
        /// Portable information *should* appear in Config.
        ///
        /// - Remark: Generated from `#/components/schemas/HostConfig`.
        internal struct HostConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HostConfig/Annotations`.
            internal struct AnnotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `AnnotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostConfig/Annotations`.
            internal var Annotations: Components.Schemas.HostConfig.AnnotationsPayload?
            /// - Remark: Generated from `#/components/schemas/HostConfig/AutoRemove`.
            internal var AutoRemove: Swift.Bool?
            /// Applicable to all platforms
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/Binds`.
            internal var Binds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioDeviceReadBps`.
            internal var BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioDeviceReadIOps`.
            internal var BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioDeviceWriteBps`.
            internal var BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioDeviceWriteIOps`.
            internal var BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioWeight`.
            internal var BlkioWeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/HostConfig/BlkioWeightDevice`.
            internal var BlkioWeightDevice: [Components.Schemas.WeightDevice]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CapAdd`.
            internal var CapAdd: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CapDrop`.
            internal var CapDrop: Components.Schemas.StrSlice?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Cgroup`.
            internal var Cgroup: Components.Schemas.CgroupSpec?
            /// Applicable to UNIX platforms
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CgroupnsMode`.
            internal var CgroupnsMode: Components.Schemas.CgroupnsMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/ConsoleSize`.
            internal var ConsoleSize: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/ContainerIDFile`.
            internal var ContainerIDFile: Swift.String?
            /// Applicable to Windows
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuCount`.
            internal var CpuCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuPercent`.
            internal var CpuPercent: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuPeriod`.
            internal var CpuPeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuQuota`.
            internal var CpuQuota: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuRealtimePeriod`.
            internal var CpuRealtimePeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuRealtimeRuntime`.
            internal var CpuRealtimeRuntime: Swift.Int64?
            /// Applicable to all platforms
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpuShares`.
            internal var CpuShares: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpusetCpus`.
            internal var CpusetCpus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostConfig/CpusetMems`.
            internal var CpusetMems: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostConfig/DeviceCgroupRules`.
            internal var DeviceCgroupRules: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/DeviceRequests`.
            internal var DeviceRequests: [Components.Schemas.DeviceRequest]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Devices`.
            internal var Devices: [Components.Schemas.DeviceMapping]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Dns`.
            internal var Dns: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/DnsOptions`.
            internal var DnsOptions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/DnsSearch`.
            internal var DnsSearch: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/ExtraHosts`.
            internal var ExtraHosts: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/GroupAdd`.
            internal var GroupAdd: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/IOMaximumBandwidth`.
            internal var IOMaximumBandwidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/HostConfig/IOMaximumIOps`.
            internal var IOMaximumIOps: Swift.Int?
            /// Run a custom init inside the container, if null, use the daemon's configured settings
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/Init`.
            internal var Init: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/HostConfig/IpcMode`.
            internal var IpcMode: Components.Schemas.IpcMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Isolation`.
            internal var Isolation: Components.Schemas.Isolation?
            /// KernelMemory specifies the kernel memory limit (in bytes) for the container.
            /// Deprecated: kernel 5.4 deprecated kmem.limit_in_bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/KernelMemory`.
            internal var KernelMemory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/KernelMemoryTCP`.
            internal var KernelMemoryTCP: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Links`.
            internal var Links: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/LogConfig`.
            internal var LogConfig: Components.Schemas.LogConfig?
            /// MaskedPaths is the list of paths to be masked inside the container (this overrides the default set of paths)
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/MaskedPaths`.
            internal var MaskedPaths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Memory`.
            internal var Memory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/MemoryReservation`.
            internal var MemoryReservation: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/MemorySwap`.
            internal var MemorySwap: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/MemorySwappiness`.
            internal var MemorySwappiness: Swift.Int64?
            /// Mounts specs used by the container
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/Mounts`.
            internal var Mounts: [Components.Schemas.Mount]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/NanoCpus`.
            internal var NanoCpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/NetworkMode`.
            internal var NetworkMode: Components.Schemas.NetworkMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/OomKillDisable`.
            internal var OomKillDisable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/HostConfig/OomScoreAdj`.
            internal var OomScoreAdj: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/PidMode`.
            internal var PidMode: Components.Schemas.PidMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/PidsLimit`.
            internal var PidsLimit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/PortBindings`.
            internal var PortBindings: Components.Schemas.PortMap?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Privileged`.
            internal var Privileged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/HostConfig/PublishAllPorts`.
            internal var PublishAllPorts: Swift.Bool?
            /// ReadonlyPaths is the list of paths to be set as read-only inside the container (this overrides the default set of paths)
            ///
            /// - Remark: Generated from `#/components/schemas/HostConfig/ReadonlyPaths`.
            internal var ReadonlyPaths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/ReadonlyRootfs`.
            internal var ReadonlyRootfs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/HostConfig/RestartPolicy`.
            internal var RestartPolicy: Components.Schemas.RestartPolicy?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Runtime`.
            internal var Runtime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostConfig/SecurityOpt`.
            internal var SecurityOpt: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/ShmSize`.
            internal var ShmSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostConfig/StorageOpt`.
            internal struct StorageOptPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `StorageOptPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostConfig/StorageOpt`.
            internal var StorageOpt: Components.Schemas.HostConfig.StorageOptPayload?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Sysctls`.
            internal struct SysctlsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `SysctlsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostConfig/Sysctls`.
            internal var Sysctls: Components.Schemas.HostConfig.SysctlsPayload?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Tmpfs`.
            internal struct TmpfsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `TmpfsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostConfig/Tmpfs`.
            internal var Tmpfs: Components.Schemas.HostConfig.TmpfsPayload?
            /// - Remark: Generated from `#/components/schemas/HostConfig/UTSMode`.
            internal var UTSMode: Components.Schemas.UTSMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/Ulimits`.
            internal var Ulimits: [Components.Schemas.Ulimit]?
            /// - Remark: Generated from `#/components/schemas/HostConfig/UsernsMode`.
            internal var UsernsMode: Components.Schemas.UsernsMode?
            /// - Remark: Generated from `#/components/schemas/HostConfig/VolumeDriver`.
            internal var VolumeDriver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostConfig/VolumesFrom`.
            internal var VolumesFrom: [Swift.String]?
            /// Creates a new `HostConfig`.
            ///
            /// - Parameters:
            ///   - Annotations:
            ///   - AutoRemove:
            ///   - Binds: Applicable to all platforms
            ///   - BlkioDeviceReadBps:
            ///   - BlkioDeviceReadIOps:
            ///   - BlkioDeviceWriteBps:
            ///   - BlkioDeviceWriteIOps:
            ///   - BlkioWeight:
            ///   - BlkioWeightDevice:
            ///   - CapAdd:
            ///   - CapDrop:
            ///   - Cgroup:
            ///   - CgroupParent: Applicable to UNIX platforms
            ///   - CgroupnsMode:
            ///   - ConsoleSize:
            ///   - ContainerIDFile:
            ///   - CpuCount: Applicable to Windows
            ///   - CpuPercent:
            ///   - CpuPeriod:
            ///   - CpuQuota:
            ///   - CpuRealtimePeriod:
            ///   - CpuRealtimeRuntime:
            ///   - CpuShares: Applicable to all platforms
            ///   - CpusetCpus:
            ///   - CpusetMems:
            ///   - DeviceCgroupRules:
            ///   - DeviceRequests:
            ///   - Devices:
            ///   - Dns:
            ///   - DnsOptions:
            ///   - DnsSearch:
            ///   - ExtraHosts:
            ///   - GroupAdd:
            ///   - IOMaximumBandwidth:
            ///   - IOMaximumIOps:
            ///   - Init: Run a custom init inside the container, if null, use the daemon's configured settings
            ///   - IpcMode:
            ///   - Isolation:
            ///   - KernelMemory: KernelMemory specifies the kernel memory limit (in bytes) for the container.
            ///   - KernelMemoryTCP:
            ///   - Links:
            ///   - LogConfig:
            ///   - MaskedPaths: MaskedPaths is the list of paths to be masked inside the container (this overrides the default set of paths)
            ///   - Memory:
            ///   - MemoryReservation:
            ///   - MemorySwap:
            ///   - MemorySwappiness:
            ///   - Mounts: Mounts specs used by the container
            ///   - NanoCpus:
            ///   - NetworkMode:
            ///   - OomKillDisable:
            ///   - OomScoreAdj:
            ///   - PidMode:
            ///   - PidsLimit:
            ///   - PortBindings:
            ///   - Privileged:
            ///   - PublishAllPorts:
            ///   - ReadonlyPaths: ReadonlyPaths is the list of paths to be set as read-only inside the container (this overrides the default set of paths)
            ///   - ReadonlyRootfs:
            ///   - RestartPolicy:
            ///   - Runtime:
            ///   - SecurityOpt:
            ///   - ShmSize:
            ///   - StorageOpt:
            ///   - Sysctls:
            ///   - Tmpfs:
            ///   - UTSMode:
            ///   - Ulimits:
            ///   - UsernsMode:
            ///   - VolumeDriver:
            ///   - VolumesFrom:
            internal init(
                Annotations: Components.Schemas.HostConfig.AnnotationsPayload? = nil,
                AutoRemove: Swift.Bool? = nil,
                Binds: [Swift.String]? = nil,
                BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                CapAdd: Components.Schemas.StrSlice? = nil,
                CapDrop: Components.Schemas.StrSlice? = nil,
                Cgroup: Components.Schemas.CgroupSpec? = nil,
                CgroupParent: Swift.String? = nil,
                CgroupnsMode: Components.Schemas.CgroupnsMode? = nil,
                ConsoleSize: [Swift.Int]? = nil,
                ContainerIDFile: Swift.String? = nil,
                CpuCount: Swift.Int64? = nil,
                CpuPercent: Swift.Int64? = nil,
                CpuPeriod: Swift.Int64? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int64? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpuShares: Swift.Int64? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                DeviceCgroupRules: [Swift.String]? = nil,
                DeviceRequests: [Components.Schemas.DeviceRequest]? = nil,
                Devices: [Components.Schemas.DeviceMapping]? = nil,
                Dns: [Swift.String]? = nil,
                DnsOptions: [Swift.String]? = nil,
                DnsSearch: [Swift.String]? = nil,
                ExtraHosts: [Swift.String]? = nil,
                GroupAdd: [Swift.String]? = nil,
                IOMaximumBandwidth: Swift.Int? = nil,
                IOMaximumIOps: Swift.Int? = nil,
                Init: Swift.Bool? = nil,
                IpcMode: Components.Schemas.IpcMode? = nil,
                Isolation: Components.Schemas.Isolation? = nil,
                KernelMemory: Swift.Int64? = nil,
                KernelMemoryTCP: Swift.Int64? = nil,
                Links: [Swift.String]? = nil,
                LogConfig: Components.Schemas.LogConfig? = nil,
                MaskedPaths: [Swift.String]? = nil,
                Memory: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                Mounts: [Components.Schemas.Mount]? = nil,
                NanoCpus: Swift.Int64? = nil,
                NetworkMode: Components.Schemas.NetworkMode? = nil,
                OomKillDisable: Swift.Bool? = nil,
                OomScoreAdj: Swift.Int64? = nil,
                PidMode: Components.Schemas.PidMode? = nil,
                PidsLimit: Swift.Int64? = nil,
                PortBindings: Components.Schemas.PortMap? = nil,
                Privileged: Swift.Bool? = nil,
                PublishAllPorts: Swift.Bool? = nil,
                ReadonlyPaths: [Swift.String]? = nil,
                ReadonlyRootfs: Swift.Bool? = nil,
                RestartPolicy: Components.Schemas.RestartPolicy? = nil,
                Runtime: Swift.String? = nil,
                SecurityOpt: [Swift.String]? = nil,
                ShmSize: Swift.Int64? = nil,
                StorageOpt: Components.Schemas.HostConfig.StorageOptPayload? = nil,
                Sysctls: Components.Schemas.HostConfig.SysctlsPayload? = nil,
                Tmpfs: Components.Schemas.HostConfig.TmpfsPayload? = nil,
                UTSMode: Components.Schemas.UTSMode? = nil,
                Ulimits: [Components.Schemas.Ulimit]? = nil,
                UsernsMode: Components.Schemas.UsernsMode? = nil,
                VolumeDriver: Swift.String? = nil,
                VolumesFrom: [Swift.String]? = nil
            ) {
                self.Annotations = Annotations
                self.AutoRemove = AutoRemove
                self.Binds = Binds
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.CapAdd = CapAdd
                self.CapDrop = CapDrop
                self.Cgroup = Cgroup
                self.CgroupParent = CgroupParent
                self.CgroupnsMode = CgroupnsMode
                self.ConsoleSize = ConsoleSize
                self.ContainerIDFile = ContainerIDFile
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpuShares = CpuShares
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.DeviceCgroupRules = DeviceCgroupRules
                self.DeviceRequests = DeviceRequests
                self.Devices = Devices
                self.Dns = Dns
                self.DnsOptions = DnsOptions
                self.DnsSearch = DnsSearch
                self.ExtraHosts = ExtraHosts
                self.GroupAdd = GroupAdd
                self.IOMaximumBandwidth = IOMaximumBandwidth
                self.IOMaximumIOps = IOMaximumIOps
                self.Init = Init
                self.IpcMode = IpcMode
                self.Isolation = Isolation
                self.KernelMemory = KernelMemory
                self.KernelMemoryTCP = KernelMemoryTCP
                self.Links = Links
                self.LogConfig = LogConfig
                self.MaskedPaths = MaskedPaths
                self.Memory = Memory
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.Mounts = Mounts
                self.NanoCpus = NanoCpus
                self.NetworkMode = NetworkMode
                self.OomKillDisable = OomKillDisable
                self.OomScoreAdj = OomScoreAdj
                self.PidMode = PidMode
                self.PidsLimit = PidsLimit
                self.PortBindings = PortBindings
                self.Privileged = Privileged
                self.PublishAllPorts = PublishAllPorts
                self.ReadonlyPaths = ReadonlyPaths
                self.ReadonlyRootfs = ReadonlyRootfs
                self.RestartPolicy = RestartPolicy
                self.Runtime = Runtime
                self.SecurityOpt = SecurityOpt
                self.ShmSize = ShmSize
                self.StorageOpt = StorageOpt
                self.Sysctls = Sysctls
                self.Tmpfs = Tmpfs
                self.UTSMode = UTSMode
                self.Ulimits = Ulimits
                self.UsernsMode = UsernsMode
                self.VolumeDriver = VolumeDriver
                self.VolumesFrom = VolumesFrom
            }
            internal enum CodingKeys: String, CodingKey {
                case Annotations
                case AutoRemove
                case Binds
                case BlkioDeviceReadBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteBps
                case BlkioDeviceWriteIOps
                case BlkioWeight
                case BlkioWeightDevice
                case CapAdd
                case CapDrop
                case Cgroup
                case CgroupParent
                case CgroupnsMode
                case ConsoleSize
                case ContainerIDFile
                case CpuCount
                case CpuPercent
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpuShares
                case CpusetCpus
                case CpusetMems
                case DeviceCgroupRules
                case DeviceRequests
                case Devices
                case Dns
                case DnsOptions
                case DnsSearch
                case ExtraHosts
                case GroupAdd
                case IOMaximumBandwidth
                case IOMaximumIOps
                case Init
                case IpcMode
                case Isolation
                case KernelMemory
                case KernelMemoryTCP
                case Links
                case LogConfig
                case MaskedPaths
                case Memory
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case Mounts
                case NanoCpus
                case NetworkMode
                case OomKillDisable
                case OomScoreAdj
                case PidMode
                case PidsLimit
                case PortBindings
                case Privileged
                case PublishAllPorts
                case ReadonlyPaths
                case ReadonlyRootfs
                case RestartPolicy
                case Runtime
                case SecurityOpt
                case ShmSize
                case StorageOpt
                case Sysctls
                case Tmpfs
                case UTSMode
                case Ulimits
                case UsernsMode
                case VolumeDriver
                case VolumesFrom
            }
        }
        /// HostInfo describes the libpod host
        ///
        /// - Remark: Generated from `#/components/schemas/HostInfo`.
        internal struct HostInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HostInfo/arch`.
            internal var arch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/buildahVersion`.
            internal var buildahVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/cgroupControllers`.
            internal var cgroupControllers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HostInfo/cgroupManager`.
            internal var cgroupManager: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/cgroupVersion`.
            internal var cgroupVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/conmon`.
            internal var conmon: Components.Schemas.ConmonInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/cpuUtilization`.
            internal var cpuUtilization: Components.Schemas.CPUUsage?
            /// - Remark: Generated from `#/components/schemas/HostInfo/cpus`.
            internal var cpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostInfo/databaseBackend`.
            internal var databaseBackend: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/distribution`.
            internal var distribution: Components.Schemas.DistributionInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/eventLogger`.
            internal var eventLogger: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/freeLocks`.
            internal var freeLocks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/HostInfo/hostname`.
            internal var hostname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/idMappings`.
            internal var idMappings: Components.Schemas.IDMappings?
            /// - Remark: Generated from `#/components/schemas/HostInfo/kernel`.
            internal var kernel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/linkmode`.
            internal var linkmode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/logDriver`.
            internal var logDriver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/memFree`.
            internal var memFree: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostInfo/memTotal`.
            internal var memTotal: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostInfo/networkBackend`.
            internal var networkBackend: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/networkBackendInfo`.
            internal var networkBackendInfo: Components.Schemas.NetworkInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/ociRuntime`.
            internal var ociRuntime: Components.Schemas.OCIRuntimeInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/os`.
            internal var os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/pasta`.
            internal var pasta: Components.Schemas.PastaInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/remoteSocket`.
            internal var remoteSocket: Components.Schemas.RemoteSocket?
            /// RootlessNetworkCmd returns the default rootless network command (slirp4netns or pasta)
            ///
            /// - Remark: Generated from `#/components/schemas/HostInfo/rootlessNetworkCmd`.
            internal var rootlessNetworkCmd: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/runtimeInfo`.
            internal struct runtimeInfoPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `runtimeInfoPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostInfo/runtimeInfo`.
            internal var runtimeInfo: Components.Schemas.HostInfo.runtimeInfoPayload?
            /// - Remark: Generated from `#/components/schemas/HostInfo/security`.
            internal var security: Components.Schemas.SecurityInfo?
            /// ServiceIsRemote is true when the podman/libpod service is remote to the client
            ///
            /// - Remark: Generated from `#/components/schemas/HostInfo/serviceIsRemote`.
            internal var serviceIsRemote: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/HostInfo/slirp4netns`.
            internal var slirp4netns: Components.Schemas.SlirpInfo?
            /// - Remark: Generated from `#/components/schemas/HostInfo/swapFree`.
            internal var swapFree: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostInfo/swapTotal`.
            internal var swapTotal: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/HostInfo/uptime`.
            internal var uptime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/HostInfo/variant`.
            internal var variant: Swift.String?
            /// Creates a new `HostInfo`.
            ///
            /// - Parameters:
            ///   - arch:
            ///   - buildahVersion:
            ///   - cgroupControllers:
            ///   - cgroupManager:
            ///   - cgroupVersion:
            ///   - conmon:
            ///   - cpuUtilization:
            ///   - cpus:
            ///   - databaseBackend:
            ///   - distribution:
            ///   - eventLogger:
            ///   - freeLocks:
            ///   - hostname:
            ///   - idMappings:
            ///   - kernel:
            ///   - linkmode:
            ///   - logDriver:
            ///   - memFree:
            ///   - memTotal:
            ///   - networkBackend:
            ///   - networkBackendInfo:
            ///   - ociRuntime:
            ///   - os:
            ///   - pasta:
            ///   - remoteSocket:
            ///   - rootlessNetworkCmd: RootlessNetworkCmd returns the default rootless network command (slirp4netns or pasta)
            ///   - runtimeInfo:
            ///   - security:
            ///   - serviceIsRemote: ServiceIsRemote is true when the podman/libpod service is remote to the client
            ///   - slirp4netns:
            ///   - swapFree:
            ///   - swapTotal:
            ///   - uptime:
            ///   - variant:
            internal init(
                arch: Swift.String? = nil,
                buildahVersion: Swift.String? = nil,
                cgroupControllers: [Swift.String]? = nil,
                cgroupManager: Swift.String? = nil,
                cgroupVersion: Swift.String? = nil,
                conmon: Components.Schemas.ConmonInfo? = nil,
                cpuUtilization: Components.Schemas.CPUUsage? = nil,
                cpus: Swift.Int64? = nil,
                databaseBackend: Swift.String? = nil,
                distribution: Components.Schemas.DistributionInfo? = nil,
                eventLogger: Swift.String? = nil,
                freeLocks: Swift.Int? = nil,
                hostname: Swift.String? = nil,
                idMappings: Components.Schemas.IDMappings? = nil,
                kernel: Swift.String? = nil,
                linkmode: Swift.String? = nil,
                logDriver: Swift.String? = nil,
                memFree: Swift.Int64? = nil,
                memTotal: Swift.Int64? = nil,
                networkBackend: Swift.String? = nil,
                networkBackendInfo: Components.Schemas.NetworkInfo? = nil,
                ociRuntime: Components.Schemas.OCIRuntimeInfo? = nil,
                os: Swift.String? = nil,
                pasta: Components.Schemas.PastaInfo? = nil,
                remoteSocket: Components.Schemas.RemoteSocket? = nil,
                rootlessNetworkCmd: Swift.String? = nil,
                runtimeInfo: Components.Schemas.HostInfo.runtimeInfoPayload? = nil,
                security: Components.Schemas.SecurityInfo? = nil,
                serviceIsRemote: Swift.Bool? = nil,
                slirp4netns: Components.Schemas.SlirpInfo? = nil,
                swapFree: Swift.Int64? = nil,
                swapTotal: Swift.Int64? = nil,
                uptime: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.arch = arch
                self.buildahVersion = buildahVersion
                self.cgroupControllers = cgroupControllers
                self.cgroupManager = cgroupManager
                self.cgroupVersion = cgroupVersion
                self.conmon = conmon
                self.cpuUtilization = cpuUtilization
                self.cpus = cpus
                self.databaseBackend = databaseBackend
                self.distribution = distribution
                self.eventLogger = eventLogger
                self.freeLocks = freeLocks
                self.hostname = hostname
                self.idMappings = idMappings
                self.kernel = kernel
                self.linkmode = linkmode
                self.logDriver = logDriver
                self.memFree = memFree
                self.memTotal = memTotal
                self.networkBackend = networkBackend
                self.networkBackendInfo = networkBackendInfo
                self.ociRuntime = ociRuntime
                self.os = os
                self.pasta = pasta
                self.remoteSocket = remoteSocket
                self.rootlessNetworkCmd = rootlessNetworkCmd
                self.runtimeInfo = runtimeInfo
                self.security = security
                self.serviceIsRemote = serviceIsRemote
                self.slirp4netns = slirp4netns
                self.swapFree = swapFree
                self.swapTotal = swapTotal
                self.uptime = uptime
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case arch
                case buildahVersion
                case cgroupControllers
                case cgroupManager
                case cgroupVersion
                case conmon
                case cpuUtilization
                case cpus
                case databaseBackend
                case distribution
                case eventLogger
                case freeLocks
                case hostname
                case idMappings
                case kernel
                case linkmode
                case logDriver
                case memFree
                case memTotal
                case networkBackend
                case networkBackendInfo
                case ociRuntime
                case os
                case pasta
                case remoteSocket
                case rootlessNetworkCmd
                case runtimeInfo
                case security
                case serviceIsRemote
                case slirp4netns
                case swapFree
                case swapTotal
                case uptime
                case variant
            }
        }
        /// IDMap contains a single entry for user namespace range remapping. An array
        /// of IDMap entries represents the structure that will be provided to the Linux
        /// kernel for creating a user namespace.
        ///
        /// - Remark: Generated from `#/components/schemas/IDMap`.
        internal struct IDMap: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IDMap/container_id`.
            internal var container_id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/IDMap/host_id`.
            internal var host_id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/IDMap/size`.
            internal var size: Swift.Int64?
            /// Creates a new `IDMap`.
            ///
            /// - Parameters:
            ///   - container_id:
            ///   - host_id:
            ///   - size:
            internal init(
                container_id: Swift.Int64? = nil,
                host_id: Swift.Int64? = nil,
                size: Swift.Int64? = nil
            ) {
                self.container_id = container_id
                self.host_id = host_id
                self.size = size
            }
            internal enum CodingKeys: String, CodingKey {
                case container_id
                case host_id
                case size
            }
        }
        /// IDMappingOptions are used for specifying how ID mapping should be set up for
        /// a layer or container.
        ///
        /// - Remark: Generated from `#/components/schemas/IDMappingOptions`.
        internal struct IDMappingOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/AutoUserNs`.
            internal var AutoUserNs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/AutoUserNsOpts`.
            internal var AutoUserNsOpts: Components.Schemas.AutoUserNsOptions?
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/GIDMap`.
            internal var GIDMap: [Components.Schemas.IDMap]?
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/HostGIDMapping`.
            internal var HostGIDMapping: Swift.Bool?
            /// UIDMap and GIDMap are used for setting up a layer's root filesystem
            /// for use inside of a user namespace where ID mapping is being used.
            /// If HostUIDMapping/HostGIDMapping is true, no mapping of the
            /// respective type will be used.  Otherwise, if UIDMap and/or GIDMap
            /// contain at least one mapping, one or both will be used.  By default,
            /// if neither of those conditions apply, if the layer has a parent
            /// layer, the parent layer's mapping will be used, and if it does not
            /// have a parent layer, the mapping which was passed to the Store
            /// object when it was initialized will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/HostUIDMapping`.
            internal var HostUIDMapping: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/IDMappingOptions/UIDMap`.
            internal var UIDMap: [Components.Schemas.IDMap]?
            /// Creates a new `IDMappingOptions`.
            ///
            /// - Parameters:
            ///   - AutoUserNs:
            ///   - AutoUserNsOpts:
            ///   - GIDMap:
            ///   - HostGIDMapping:
            ///   - HostUIDMapping: UIDMap and GIDMap are used for setting up a layer's root filesystem
            ///   - UIDMap:
            internal init(
                AutoUserNs: Swift.Bool? = nil,
                AutoUserNsOpts: Components.Schemas.AutoUserNsOptions? = nil,
                GIDMap: [Components.Schemas.IDMap]? = nil,
                HostGIDMapping: Swift.Bool? = nil,
                HostUIDMapping: Swift.Bool? = nil,
                UIDMap: [Components.Schemas.IDMap]? = nil
            ) {
                self.AutoUserNs = AutoUserNs
                self.AutoUserNsOpts = AutoUserNsOpts
                self.GIDMap = GIDMap
                self.HostGIDMapping = HostGIDMapping
                self.HostUIDMapping = HostUIDMapping
                self.UIDMap = UIDMap
            }
            internal enum CodingKeys: String, CodingKey {
                case AutoUserNs
                case AutoUserNsOpts
                case GIDMap
                case HostGIDMapping
                case HostUIDMapping
                case UIDMap
            }
        }
        /// IDMappings describe the GID and UID mappings
        ///
        /// - Remark: Generated from `#/components/schemas/IDMappings`.
        internal struct IDMappings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IDMappings/gidmap`.
            internal var gidmap: [Components.Schemas.IDMap]?
            /// - Remark: Generated from `#/components/schemas/IDMappings/uidmap`.
            internal var uidmap: [Components.Schemas.IDMap]?
            /// Creates a new `IDMappings`.
            ///
            /// - Parameters:
            ///   - gidmap:
            ///   - uidmap:
            internal init(
                gidmap: [Components.Schemas.IDMap]? = nil,
                uidmap: [Components.Schemas.IDMap]? = nil
            ) {
                self.gidmap = gidmap
                self.uidmap = uidmap
            }
            internal enum CodingKeys: String, CodingKey {
                case gidmap
                case uidmap
            }
        }
        /// - Remark: Generated from `#/components/schemas/IDResponse`.
        internal typealias IDResponse = Components.Schemas.IdResponse
        /// IPAM represents IP Address Management
        ///
        /// - Remark: Generated from `#/components/schemas/IPAM`.
        internal struct IPAM: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IPAM/Config`.
            internal var Config: [Components.Schemas.IPAMConfig]?
            /// - Remark: Generated from `#/components/schemas/IPAM/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAM/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/IPAM/Options`.
            internal var Options: Components.Schemas.IPAM.OptionsPayload?
            /// Creates a new `IPAM`.
            ///
            /// - Parameters:
            ///   - Config:
            ///   - Driver:
            ///   - Options:
            internal init(
                Config: [Components.Schemas.IPAMConfig]? = nil,
                Driver: Swift.String? = nil,
                Options: Components.Schemas.IPAM.OptionsPayload? = nil
            ) {
                self.Config = Config
                self.Driver = Driver
                self.Options = Options
            }
            internal enum CodingKeys: String, CodingKey {
                case Config
                case Driver
                case Options
            }
        }
        /// IPAMConfig represents IPAM configurations
        ///
        /// - Remark: Generated from `#/components/schemas/IPAMConfig`.
        internal struct IPAMConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/AuxiliaryAddresses`.
            internal struct AuxiliaryAddressesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `AuxiliaryAddressesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/AuxiliaryAddresses`.
            internal var AuxiliaryAddresses: Components.Schemas.IPAMConfig.AuxiliaryAddressesPayload?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/Gateway`.
            internal var Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/IPRange`.
            internal var IPRange: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/Subnet`.
            internal var Subnet: Swift.String?
            /// Creates a new `IPAMConfig`.
            ///
            /// - Parameters:
            ///   - AuxiliaryAddresses:
            ///   - Gateway:
            ///   - IPRange:
            ///   - Subnet:
            internal init(
                AuxiliaryAddresses: Components.Schemas.IPAMConfig.AuxiliaryAddressesPayload? = nil,
                Gateway: Swift.String? = nil,
                IPRange: Swift.String? = nil,
                Subnet: Swift.String? = nil
            ) {
                self.AuxiliaryAddresses = AuxiliaryAddresses
                self.Gateway = Gateway
                self.IPRange = IPRange
                self.Subnet = Subnet
            }
            internal enum CodingKeys: String, CodingKey {
                case AuxiliaryAddresses
                case Gateway
                case IPRange
                case Subnet
            }
        }
        /// See type [IPNet] and func [ParseCIDR] for details.
        ///
        /// - Remark: Generated from `#/components/schemas/IPMask`.
        internal typealias IPMask = [Swift.Int]
        /// - Remark: Generated from `#/components/schemas/IPNet`.
        internal struct IPNet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IPNet/IP`.
            internal var IP: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPNet/Mask`.
            internal var Mask: Components.Schemas.IPMask?
            /// Creates a new `IPNet`.
            ///
            /// - Parameters:
            ///   - IP:
            ///   - Mask:
            internal init(
                IP: Swift.String? = nil,
                Mask: Components.Schemas.IPMask? = nil
            ) {
                self.IP = IP
                self.Mask = Mask
            }
            internal enum CodingKeys: String, CodingKey {
                case IP
                case Mask
            }
        }
        /// IDResponse Response to an API call that returns just an Id
        ///
        /// - Remark: Generated from `#/components/schemas/IdResponse`.
        internal struct IdResponse: Codable, Hashable, Sendable {
            /// The id of the newly created object.
            ///
            /// - Remark: Generated from `#/components/schemas/IdResponse/Id`.
            internal var Id: Swift.String
            /// Creates a new `IdResponse`.
            ///
            /// - Parameters:
            ///   - Id: The id of the newly created object.
            internal init(Id: Swift.String) {
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageConfig`.
        internal struct ImageConfig: Codable, Hashable, Sendable {
            /// ArgsEscaped
            ///
            /// Deprecated: This field is present only for legacy compatibility with
            /// Docker and should not be used by new image builders.  It is used by Docker
            /// for Windows images to indicate that the `Entrypoint` or `Cmd` or both,
            /// contains only a single element array, that is a pre-escaped, and combined
            /// into a single string `CommandLine`. If `true` the value in `Entrypoint` or
            /// `Cmd` should be used as-is to avoid double escaping.
            /// https://github.com/opencontainers/image-spec/pull/892
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ArgsEscaped`.
            internal var ArgsEscaped: Swift.Bool?
            /// Cmd defines the default arguments to the entrypoint of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Cmd`.
            internal var Cmd: [Swift.String]?
            /// Entrypoint defines a list of arguments to use as the command to execute when the container starts.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Entrypoint`.
            internal var Entrypoint: [Swift.String]?
            /// Env is a list of environment variables to be used in a container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Env`.
            internal var Env: [Swift.String]?
            /// ExposedPorts a set of ports to expose from a container running this image.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ExposedPorts`.
            internal struct ExposedPortsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `ExposedPortsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// ExposedPorts a set of ports to expose from a container running this image.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ExposedPorts`.
            internal var ExposedPorts: Components.Schemas.ImageConfig.ExposedPortsPayload?
            /// Labels contains arbitrary metadata for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels contains arbitrary metadata for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Labels`.
            internal var Labels: Components.Schemas.ImageConfig.LabelsPayload?
            /// StopSignal contains the system call signal that will be sent to the container to exit.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/StopSignal`.
            internal var StopSignal: Swift.String?
            /// User defines the username or UID which the process in the container should run as.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/User`.
            internal var User: Swift.String?
            /// Volumes is a set of directories describing where the process is likely write data specific to a container instance.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Volumes`.
            internal struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Volumes is a set of directories describing where the process is likely write data specific to a container instance.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Volumes`.
            internal var Volumes: Components.Schemas.ImageConfig.VolumesPayload?
            /// WorkingDir sets the current working directory of the entrypoint process in the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/WorkingDir`.
            internal var WorkingDir: Swift.String?
            /// Creates a new `ImageConfig`.
            ///
            /// - Parameters:
            ///   - ArgsEscaped: ArgsEscaped
            ///   - Cmd: Cmd defines the default arguments to the entrypoint of the container.
            ///   - Entrypoint: Entrypoint defines a list of arguments to use as the command to execute when the container starts.
            ///   - Env: Env is a list of environment variables to be used in a container.
            ///   - ExposedPorts: ExposedPorts a set of ports to expose from a container running this image.
            ///   - Labels: Labels contains arbitrary metadata for the container.
            ///   - StopSignal: StopSignal contains the system call signal that will be sent to the container to exit.
            ///   - User: User defines the username or UID which the process in the container should run as.
            ///   - Volumes: Volumes is a set of directories describing where the process is likely write data specific to a container instance.
            ///   - WorkingDir: WorkingDir sets the current working directory of the entrypoint process in the container.
            internal init(
                ArgsEscaped: Swift.Bool? = nil,
                Cmd: [Swift.String]? = nil,
                Entrypoint: [Swift.String]? = nil,
                Env: [Swift.String]? = nil,
                ExposedPorts: Components.Schemas.ImageConfig.ExposedPortsPayload? = nil,
                Labels: Components.Schemas.ImageConfig.LabelsPayload? = nil,
                StopSignal: Swift.String? = nil,
                User: Swift.String? = nil,
                Volumes: Components.Schemas.ImageConfig.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil
            ) {
                self.ArgsEscaped = ArgsEscaped
                self.Cmd = Cmd
                self.Entrypoint = Entrypoint
                self.Env = Env
                self.ExposedPorts = ExposedPorts
                self.Labels = Labels
                self.StopSignal = StopSignal
                self.User = User
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
            }
            internal enum CodingKeys: String, CodingKey {
                case ArgsEscaped
                case Cmd
                case Entrypoint
                case Env
                case ExposedPorts
                case Labels
                case StopSignal
                case User
                case Volumes
                case WorkingDir
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageData`.
        internal struct ImageData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageData/Annotations`.
            internal struct AnnotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `AnnotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ImageData/Annotations`.
            internal var Annotations: Components.Schemas.ImageData.AnnotationsPayload?
            /// - Remark: Generated from `#/components/schemas/ImageData/Architecture`.
            internal var Architecture: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Author`.
            internal var Author: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Comment`.
            internal var Comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Config`.
            internal var Config: Components.Schemas.ImageConfig?
            /// - Remark: Generated from `#/components/schemas/ImageData/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ImageData/Digest`.
            internal var Digest: Components.Schemas.Digest?
            /// - Remark: Generated from `#/components/schemas/ImageData/GraphDriver`.
            internal var GraphDriver: Components.Schemas.DriverData?
            /// - Remark: Generated from `#/components/schemas/ImageData/Healthcheck`.
            internal var Healthcheck: Components.Schemas.Schema2HealthConfig?
            /// - Remark: Generated from `#/components/schemas/ImageData/History`.
            internal var History: [Components.Schemas.History]?
            /// - Remark: Generated from `#/components/schemas/ImageData/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ImageData/Labels`.
            internal var Labels: Components.Schemas.ImageData.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/ImageData/ManifestType`.
            internal var ManifestType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/NamesHistory`.
            internal var NamesHistory: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ImageData/Os`.
            internal var Os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Parent`.
            internal var Parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/RepoDigests`.
            internal var RepoDigests: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ImageData/RepoTags`.
            internal var RepoTags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ImageData/RootFS`.
            internal var RootFS: Components.Schemas.RootFS?
            /// - Remark: Generated from `#/components/schemas/ImageData/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ImageData/User`.
            internal var User: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/Version`.
            internal var Version: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageData/VirtualSize`.
            internal var VirtualSize: Swift.Int64?
            /// Creates a new `ImageData`.
            ///
            /// - Parameters:
            ///   - Annotations:
            ///   - Architecture:
            ///   - Author:
            ///   - Comment:
            ///   - Config:
            ///   - Created:
            ///   - Digest:
            ///   - GraphDriver:
            ///   - Healthcheck:
            ///   - History:
            ///   - Id:
            ///   - Labels:
            ///   - ManifestType:
            ///   - NamesHistory:
            ///   - Os:
            ///   - Parent:
            ///   - RepoDigests:
            ///   - RepoTags:
            ///   - RootFS:
            ///   - Size:
            ///   - User:
            ///   - Version:
            ///   - VirtualSize:
            internal init(
                Annotations: Components.Schemas.ImageData.AnnotationsPayload? = nil,
                Architecture: Swift.String? = nil,
                Author: Swift.String? = nil,
                Comment: Swift.String? = nil,
                Config: Components.Schemas.ImageConfig? = nil,
                Created: Foundation.Date? = nil,
                Digest: Components.Schemas.Digest? = nil,
                GraphDriver: Components.Schemas.DriverData? = nil,
                Healthcheck: Components.Schemas.Schema2HealthConfig? = nil,
                History: [Components.Schemas.History]? = nil,
                Id: Swift.String? = nil,
                Labels: Components.Schemas.ImageData.LabelsPayload? = nil,
                ManifestType: Swift.String? = nil,
                NamesHistory: [Swift.String]? = nil,
                Os: Swift.String? = nil,
                Parent: Swift.String? = nil,
                RepoDigests: [Swift.String]? = nil,
                RepoTags: [Swift.String]? = nil,
                RootFS: Components.Schemas.RootFS? = nil,
                Size: Swift.Int64? = nil,
                User: Swift.String? = nil,
                Version: Swift.String? = nil,
                VirtualSize: Swift.Int64? = nil
            ) {
                self.Annotations = Annotations
                self.Architecture = Architecture
                self.Author = Author
                self.Comment = Comment
                self.Config = Config
                self.Created = Created
                self.Digest = Digest
                self.GraphDriver = GraphDriver
                self.Healthcheck = Healthcheck
                self.History = History
                self.Id = Id
                self.Labels = Labels
                self.ManifestType = ManifestType
                self.NamesHistory = NamesHistory
                self.Os = Os
                self.Parent = Parent
                self.RepoDigests = RepoDigests
                self.RepoTags = RepoTags
                self.RootFS = RootFS
                self.Size = Size
                self.User = User
                self.Version = Version
                self.VirtualSize = VirtualSize
            }
            internal enum CodingKeys: String, CodingKey {
                case Annotations
                case Architecture
                case Author
                case Comment
                case Config
                case Created
                case Digest
                case GraphDriver
                case Healthcheck
                case History
                case Id
                case Labels
                case ManifestType
                case NamesHistory
                case Os
                case Parent
                case RepoDigests
                case RepoTags
                case RootFS
                case Size
                case User
                case Version
                case VirtualSize
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageImportReport`.
        internal struct ImageImportReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageImportReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `ImageImportReport`.
            ///
            /// - Parameters:
            ///   - Id:
            internal init(Id: Swift.String? = nil) {
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageInspect`.
        internal struct ImageInspect: Codable, Hashable, Sendable {
            /// Architecture is the hardware CPU architecture that the image runs on.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Architecture`.
            internal var Architecture: Swift.String?
            /// Author is the name of the author that was specified when committing the
            /// image, or as specified through MAINTAINER (deprecated) in the Dockerfile.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Author`.
            internal var Author: Swift.String?
            /// Comment is an optional message that can be set when committing or
            /// importing the image.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Comment`.
            internal var Comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Config`.
            internal var Config: Components.Schemas.Config?
            /// Container is for backwards compat but is basically unused
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Container`.
            internal var Container: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/ContainerConfig`.
            internal var ContainerConfig: Components.Schemas.Config?
            /// Created is the date and time at which the image was created, formatted in
            /// RFC 3339 nano-seconds (time.RFC3339Nano).
            ///
            /// This information is only available if present in the image,
            /// and omitted otherwise.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Created`.
            internal var Created: Swift.String?
            /// DockerVersion is the version of Docker that was used to build the image.
            ///
            /// Depending on how the image was created, this field may be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/DockerVersion`.
            internal var DockerVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/GraphDriver`.
            internal var GraphDriver: Components.Schemas.GraphDriverData?
            /// ID is the content-addressable ID of an image.
            ///
            /// This identifier is a content-addressable digest calculated from the
            /// image's configuration (which includes the digests of layers used by
            /// the image).
            ///
            /// Note that this digest differs from the `RepoDigests` below, which
            /// holds digests of image manifests that reference the image.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Metadata`.
            internal var Metadata: Components.Schemas.Metadata?
            /// OS is the Operating System the image is built to run on.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Os`.
            internal var Os: Swift.String?
            /// OsVersion is the version of the Operating System the image is built to
            /// run on (especially for Windows).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/OsVersion`.
            internal var OsVersion: Swift.String?
            /// Parent is the ID of the parent image.
            ///
            /// Depending on how the image was created, this field may be empty and
            /// is only set for images that were built/created locally. This field
            /// is empty if the image was pulled from an image registry.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Parent`.
            internal var Parent: Swift.String?
            /// RepoDigests is a list of content-addressable digests of locally available
            /// image manifests that the image is referenced from. Multiple manifests can
            /// refer to the same image.
            ///
            /// These digests are usually only available if the image was either pulled
            /// from a registry, or if the image was pushed to a registry, which is when
            /// the manifest is generated and its digest calculated.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RepoDigests`.
            internal var RepoDigests: [Swift.String]?
            /// RepoTags is a list of image names/tags in the local image cache that
            /// reference this image.
            ///
            /// Multiple image tags can refer to the same image, and this list may be
            /// empty if no tags reference the image, in which case the image is
            /// "untagged", in which case it can still be referenced by its ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RepoTags`.
            internal var RepoTags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RootFS`.
            internal var RootFS: Components.Schemas.RootFS?
            /// Size is the total size of the image including all layers it is composed of.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Size`.
            internal var Size: Swift.Int64?
            /// Variant is the CPU architecture variant (presently ARM-only).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Variant`.
            internal var Variant: Swift.String?
            /// VirtualSize is the total size of the image including all layers it is
            /// composed of.
            ///
            /// Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/VirtualSize`.
            internal var VirtualSize: Swift.Int64?
            /// Creates a new `ImageInspect`.
            ///
            /// - Parameters:
            ///   - Architecture: Architecture is the hardware CPU architecture that the image runs on.
            ///   - Author: Author is the name of the author that was specified when committing the
            ///   - Comment: Comment is an optional message that can be set when committing or
            ///   - Config:
            ///   - Container: Container is for backwards compat but is basically unused
            ///   - ContainerConfig:
            ///   - Created: Created is the date and time at which the image was created, formatted in
            ///   - DockerVersion: DockerVersion is the version of Docker that was used to build the image.
            ///   - GraphDriver:
            ///   - Id: ID is the content-addressable ID of an image.
            ///   - Metadata:
            ///   - Os: OS is the Operating System the image is built to run on.
            ///   - OsVersion: OsVersion is the version of the Operating System the image is built to
            ///   - Parent: Parent is the ID of the parent image.
            ///   - RepoDigests: RepoDigests is a list of content-addressable digests of locally available
            ///   - RepoTags: RepoTags is a list of image names/tags in the local image cache that
            ///   - RootFS:
            ///   - Size: Size is the total size of the image including all layers it is composed of.
            ///   - Variant: Variant is the CPU architecture variant (presently ARM-only).
            ///   - VirtualSize: VirtualSize is the total size of the image including all layers it is
            internal init(
                Architecture: Swift.String? = nil,
                Author: Swift.String? = nil,
                Comment: Swift.String? = nil,
                Config: Components.Schemas.Config? = nil,
                Container: Swift.String? = nil,
                ContainerConfig: Components.Schemas.Config? = nil,
                Created: Swift.String? = nil,
                DockerVersion: Swift.String? = nil,
                GraphDriver: Components.Schemas.GraphDriverData? = nil,
                Id: Swift.String? = nil,
                Metadata: Components.Schemas.Metadata? = nil,
                Os: Swift.String? = nil,
                OsVersion: Swift.String? = nil,
                Parent: Swift.String? = nil,
                RepoDigests: [Swift.String]? = nil,
                RepoTags: [Swift.String]? = nil,
                RootFS: Components.Schemas.RootFS? = nil,
                Size: Swift.Int64? = nil,
                Variant: Swift.String? = nil,
                VirtualSize: Swift.Int64? = nil
            ) {
                self.Architecture = Architecture
                self.Author = Author
                self.Comment = Comment
                self.Config = Config
                self.Container = Container
                self.ContainerConfig = ContainerConfig
                self.Created = Created
                self.DockerVersion = DockerVersion
                self.GraphDriver = GraphDriver
                self.Id = Id
                self.Metadata = Metadata
                self.Os = Os
                self.OsVersion = OsVersion
                self.Parent = Parent
                self.RepoDigests = RepoDigests
                self.RepoTags = RepoTags
                self.RootFS = RootFS
                self.Size = Size
                self.Variant = Variant
                self.VirtualSize = VirtualSize
            }
            internal enum CodingKeys: String, CodingKey {
                case Architecture
                case Author
                case Comment
                case Config
                case Container
                case ContainerConfig
                case Created
                case DockerVersion
                case GraphDriver
                case Id
                case Metadata
                case Os
                case OsVersion
                case Parent
                case RepoDigests
                case RepoTags
                case RootFS
                case Size
                case Variant
                case VirtualSize
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageLoadReport`.
        internal struct ImageLoadReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageLoadReport/Names`.
            internal var Names: [Swift.String]?
            /// Creates a new `ImageLoadReport`.
            ///
            /// - Parameters:
            ///   - Names:
            internal init(Names: [Swift.String]? = nil) {
                self.Names = Names
            }
            internal enum CodingKeys: String, CodingKey {
                case Names
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageProperties`.
        internal struct ImageProperties: Codable, Hashable, Sendable {
            /// Containers is an array containing the IDs of the containers that are
            /// using this image.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/Containers`.
            internal var Containers: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/ImageProperties/Platform`.
            internal var Platform: Components.Schemas.Platform
            /// - Remark: Generated from `#/components/schemas/ImageProperties/Size`.
            internal struct SizePayload: Codable, Hashable, Sendable {
                /// Unpacked is the size (in bytes) of the locally unpacked
                /// (uncompressed) image content that's directly usable by the containers
                /// running this image.
                /// It's independent of the distributable content - e.g.
                /// the image might still have an unpacked data that's still used by
                /// some container even when the distributable/compressed content is
                /// already gone.
                ///
                /// - Remark: Generated from `#/components/schemas/ImageProperties/Size/Unpacked`.
                internal var Unpacked: Swift.Int64
                /// Creates a new `SizePayload`.
                ///
                /// - Parameters:
                ///   - Unpacked: Unpacked is the size (in bytes) of the locally unpacked
                internal init(Unpacked: Swift.Int64) {
                    self.Unpacked = Unpacked
                }
                internal enum CodingKeys: String, CodingKey {
                    case Unpacked
                }
            }
            /// - Remark: Generated from `#/components/schemas/ImageProperties/Size`.
            internal var Size: Components.Schemas.ImageProperties.SizePayload?
            /// Creates a new `ImageProperties`.
            ///
            /// - Parameters:
            ///   - Containers: Containers is an array containing the IDs of the containers that are
            ///   - Platform:
            ///   - Size:
            internal init(
                Containers: [Swift.String],
                Platform: Components.Schemas.Platform,
                Size: Components.Schemas.ImageProperties.SizePayload? = nil
            ) {
                self.Containers = Containers
                self.Platform = Platform
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case Containers
                case Platform
                case Size
            }
        }
        /// ImageStore describes the image store.  Right now only the number
        /// of images present
        ///
        /// - Remark: Generated from `#/components/schemas/ImageStore`.
        internal struct ImageStore: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageStore/number`.
            internal var number: Swift.Int64?
            /// Creates a new `ImageStore`.
            ///
            /// - Parameters:
            ///   - number:
            internal init(number: Swift.Int64? = nil) {
                self.number = number
            }
            internal enum CodingKeys: String, CodingKey {
                case number
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageTreeReport`.
        internal struct ImageTreeReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageTreeReport/Tree`.
            internal var Tree: Swift.String?
            /// Creates a new `ImageTreeReport`.
            ///
            /// - Parameters:
            ///   - Tree:
            internal init(Tree: Swift.String? = nil) {
                self.Tree = Tree
            }
            internal enum CodingKeys: String, CodingKey {
                case Tree
            }
        }
        /// ImageVolume is a volume based on a container image.  The container image is
        /// first mounted on the host and is then bind-mounted into the container.  An
        /// ImageVolume is always mounted read-only.
        ///
        /// - Remark: Generated from `#/components/schemas/ImageVolume`.
        internal struct ImageVolume: Codable, Hashable, Sendable {
            /// Destination is the absolute path of the mount in the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageVolume/Destination`.
            internal var Destination: Swift.String?
            /// ReadWrite sets the volume writable.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageVolume/ReadWrite`.
            internal var ReadWrite: Swift.Bool?
            /// Source is the source of the image volume.  The image can be referred
            /// to by name and by ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageVolume/Source`.
            internal var Source: Swift.String?
            /// SubPath mounts a particular path within the image.
            /// If empty, the whole image is mounted.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageVolume/subPath`.
            internal var subPath: Swift.String?
            /// Creates a new `ImageVolume`.
            ///
            /// - Parameters:
            ///   - Destination: Destination is the absolute path of the mount in the container.
            ///   - ReadWrite: ReadWrite sets the volume writable.
            ///   - Source: Source is the source of the image volume.  The image can be referred
            ///   - subPath: SubPath mounts a particular path within the image.
            internal init(
                Destination: Swift.String? = nil,
                ReadWrite: Swift.Bool? = nil,
                Source: Swift.String? = nil,
                subPath: Swift.String? = nil
            ) {
                self.Destination = Destination
                self.ReadWrite = ReadWrite
                self.Source = Source
                self.subPath = subPath
            }
            internal enum CodingKeys: String, CodingKey {
                case Destination
                case ReadWrite
                case Source
                case subPath
            }
        }
        /// Info contains information about the Volume as a whole as provided by
        /// the CSI storage plugin.
        ///
        /// - Remark: Generated from `#/components/schemas/Info`.
        internal struct Info: Codable, Hashable, Sendable {
            /// AccessibleTopology is the topology this volume is actually accessible
            /// from.
            ///
            /// - Remark: Generated from `#/components/schemas/Info/AccessibleTopology`.
            internal var AccessibleTopology: [Components.Schemas.Topology]?
            /// CapacityBytes is the capacity of the volume in bytes. A value of 0
            /// indicates that the capacity is unknown.
            ///
            /// - Remark: Generated from `#/components/schemas/Info/CapacityBytes`.
            internal var CapacityBytes: Swift.Int64?
            /// VolumeContext is the context originating from the CSI storage plugin
            /// when the Volume is created.
            ///
            /// - Remark: Generated from `#/components/schemas/Info/VolumeContext`.
            internal struct VolumeContextPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `VolumeContextPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// VolumeContext is the context originating from the CSI storage plugin
            /// when the Volume is created.
            ///
            /// - Remark: Generated from `#/components/schemas/Info/VolumeContext`.
            internal var VolumeContext: Components.Schemas.Info.VolumeContextPayload?
            /// VolumeID is the ID of the Volume as seen by the CSI storage plugin. This
            /// is distinct from the Volume's Swarm ID, which is the ID used by all of
            /// the Docker Engine to refer to the Volume. If this field is blank, then
            /// the Volume has not been successfully created yet.
            ///
            /// - Remark: Generated from `#/components/schemas/Info/VolumeID`.
            internal var VolumeID: Swift.String?
            /// Creates a new `Info`.
            ///
            /// - Parameters:
            ///   - AccessibleTopology: AccessibleTopology is the topology this volume is actually accessible
            ///   - CapacityBytes: CapacityBytes is the capacity of the volume in bytes. A value of 0
            ///   - VolumeContext: VolumeContext is the context originating from the CSI storage plugin
            ///   - VolumeID: VolumeID is the ID of the Volume as seen by the CSI storage plugin. This
            internal init(
                AccessibleTopology: [Components.Schemas.Topology]? = nil,
                CapacityBytes: Swift.Int64? = nil,
                VolumeContext: Components.Schemas.Info.VolumeContextPayload? = nil,
                VolumeID: Swift.String? = nil
            ) {
                self.AccessibleTopology = AccessibleTopology
                self.CapacityBytes = CapacityBytes
                self.VolumeContext = VolumeContext
                self.VolumeID = VolumeID
            }
            internal enum CodingKeys: String, CodingKey {
                case AccessibleTopology
                case CapacityBytes
                case VolumeContext
                case VolumeID
            }
        }
        /// - Remark: Generated from `#/components/schemas/Inspect`.
        internal struct Inspect: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Inspect/Attachable`.
            internal var Attachable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Inspect/ConfigFrom`.
            internal var ConfigFrom: Components.Schemas.ConfigReference?
            /// - Remark: Generated from `#/components/schemas/Inspect/ConfigOnly`.
            internal var ConfigOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Inspect/Containers`.
            internal struct ContainersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.EndpointResource]
                /// Creates a new `ContainersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.EndpointResource] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Inspect/Containers`.
            internal var Containers: Components.Schemas.Inspect.ContainersPayload?
            /// - Remark: Generated from `#/components/schemas/Inspect/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Inspect/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Inspect/EnableIPv6`.
            internal var EnableIPv6: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Inspect/IPAM`.
            internal var IPAM: Components.Schemas.IPAM?
            /// - Remark: Generated from `#/components/schemas/Inspect/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Inspect/Ingress`.
            internal var Ingress: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Inspect/Internal`.
            internal var Internal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Inspect/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Inspect/Labels`.
            internal var Labels: Components.Schemas.Inspect.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/Inspect/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Inspect/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Inspect/Options`.
            internal var Options: Components.Schemas.Inspect.OptionsPayload?
            /// - Remark: Generated from `#/components/schemas/Inspect/Peers`.
            internal var Peers: [Components.Schemas.PeerInfo]?
            /// - Remark: Generated from `#/components/schemas/Inspect/Scope`.
            internal var Scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Inspect/Services`.
            internal struct ServicesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.ServiceInfo]
                /// Creates a new `ServicesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.ServiceInfo] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Inspect/Services`.
            internal var Services: Components.Schemas.Inspect.ServicesPayload?
            /// Creates a new `Inspect`.
            ///
            /// - Parameters:
            ///   - Attachable:
            ///   - ConfigFrom:
            ///   - ConfigOnly:
            ///   - Containers:
            ///   - Created:
            ///   - Driver:
            ///   - EnableIPv6:
            ///   - IPAM:
            ///   - Id:
            ///   - Ingress:
            ///   - Internal:
            ///   - Labels:
            ///   - Name:
            ///   - Options:
            ///   - Peers:
            ///   - Scope:
            ///   - Services:
            internal init(
                Attachable: Swift.Bool? = nil,
                ConfigFrom: Components.Schemas.ConfigReference? = nil,
                ConfigOnly: Swift.Bool? = nil,
                Containers: Components.Schemas.Inspect.ContainersPayload? = nil,
                Created: Foundation.Date? = nil,
                Driver: Swift.String? = nil,
                EnableIPv6: Swift.Bool? = nil,
                IPAM: Components.Schemas.IPAM? = nil,
                Id: Swift.String? = nil,
                Ingress: Swift.Bool? = nil,
                Internal: Swift.Bool? = nil,
                Labels: Components.Schemas.Inspect.LabelsPayload? = nil,
                Name: Swift.String? = nil,
                Options: Components.Schemas.Inspect.OptionsPayload? = nil,
                Peers: [Components.Schemas.PeerInfo]? = nil,
                Scope: Swift.String? = nil,
                Services: Components.Schemas.Inspect.ServicesPayload? = nil
            ) {
                self.Attachable = Attachable
                self.ConfigFrom = ConfigFrom
                self.ConfigOnly = ConfigOnly
                self.Containers = Containers
                self.Created = Created
                self.Driver = Driver
                self.EnableIPv6 = EnableIPv6
                self.IPAM = IPAM
                self.Id = Id
                self.Ingress = Ingress
                self.Internal = Internal
                self.Labels = Labels
                self.Name = Name
                self.Options = Options
                self.Peers = Peers
                self.Scope = Scope
                self.Services = Services
            }
            internal enum CodingKeys: String, CodingKey {
                case Attachable
                case ConfigFrom
                case ConfigOnly
                case Containers
                case Created
                case Driver
                case EnableIPv6
                case IPAM
                case Id
                case Ingress
                case Internal
                case Labels
                case Name
                case Options
                case Peers
                case Scope
                case Services
            }
        }
        /// InspectAdditionalNetwork holds information about non-default networks the
        /// container has been connected to.
        /// As with InspectNetworkSettings, many fields are unused and maintained only
        /// for compatibility with Docker.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork`.
        internal struct InspectAdditionalNetwork: Codable, Hashable, Sendable {
            /// AdditionalMacAddresses is a set of additional MAC Addresses beyond
            /// the first. CNI may configure more than one interface for a single
            /// network, which can cause this.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/AdditionalMACAddresses`.
            internal var AdditionalMACAddresses: [Swift.String]?
            /// Aliases are any network aliases the container has in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/Aliases`.
            internal var Aliases: [Swift.String]?
            /// DriverOpts is presently unused and maintained exclusively for
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/DriverOpts`.
            internal struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// DriverOpts is presently unused and maintained exclusively for
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/DriverOpts`.
            internal var DriverOpts: Components.Schemas.InspectAdditionalNetwork.DriverOptsPayload?
            /// EndpointID is unused, maintained exclusively for compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/EndpointID`.
            internal var EndpointID: Swift.String?
            /// Gateway is the IP address of the gateway this network will use.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/Gateway`.
            internal var Gateway: Swift.String?
            /// GlobalIPv6Address is the global-scope IPv6 Address for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/GlobalIPv6Address`.
            internal var GlobalIPv6Address: Swift.String?
            /// GlobalIPv6PrefixLen is the length of the subnet mask of this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/GlobalIPv6PrefixLen`.
            internal var GlobalIPv6PrefixLen: Swift.Int64?
            /// IPAMConfig is presently unused and maintained exclusively for
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/IPAMConfig`.
            internal struct IPAMConfigPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `IPAMConfigPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IPAMConfig is presently unused and maintained exclusively for
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/IPAMConfig`.
            internal var IPAMConfig: Components.Schemas.InspectAdditionalNetwork.IPAMConfigPayload?
            /// IPAddress is the IP address for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/IPAddress`.
            internal var IPAddress: Swift.String?
            /// IPPrefixLen is the length of the subnet mask of this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/IPPrefixLen`.
            internal var IPPrefixLen: Swift.Int64?
            /// IPv6Gateway is the IPv6 gateway this network will use.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/IPv6Gateway`.
            internal var IPv6Gateway: Swift.String?
            /// Links is presently unused and maintained exclusively for
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/Links`.
            internal var Links: [Swift.String]?
            /// MacAddress is the MAC address for the interface in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/MacAddress`.
            internal var MacAddress: Swift.String?
            /// Name of the network we're connecting to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/NetworkID`.
            internal var NetworkID: Swift.String?
            /// SecondaryIPAddresses is a list of extra IP Addresses that the
            /// container has been assigned in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/SecondaryIPAddresses`.
            internal var SecondaryIPAddresses: [Components.Schemas.Address]?
            /// SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the
            /// container has been assigned in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectAdditionalNetwork/SecondaryIPv6Addresses`.
            internal var SecondaryIPv6Addresses: [Components.Schemas.Address]?
            /// Creates a new `InspectAdditionalNetwork`.
            ///
            /// - Parameters:
            ///   - AdditionalMACAddresses: AdditionalMacAddresses is a set of additional MAC Addresses beyond
            ///   - Aliases: Aliases are any network aliases the container has in this network.
            ///   - DriverOpts: DriverOpts is presently unused and maintained exclusively for
            ///   - EndpointID: EndpointID is unused, maintained exclusively for compatibility.
            ///   - Gateway: Gateway is the IP address of the gateway this network will use.
            ///   - GlobalIPv6Address: GlobalIPv6Address is the global-scope IPv6 Address for this network.
            ///   - GlobalIPv6PrefixLen: GlobalIPv6PrefixLen is the length of the subnet mask of this network.
            ///   - IPAMConfig: IPAMConfig is presently unused and maintained exclusively for
            ///   - IPAddress: IPAddress is the IP address for this network.
            ///   - IPPrefixLen: IPPrefixLen is the length of the subnet mask of this network.
            ///   - IPv6Gateway: IPv6Gateway is the IPv6 gateway this network will use.
            ///   - Links: Links is presently unused and maintained exclusively for
            ///   - MacAddress: MacAddress is the MAC address for the interface in this network.
            ///   - NetworkID: Name of the network we're connecting to.
            ///   - SecondaryIPAddresses: SecondaryIPAddresses is a list of extra IP Addresses that the
            ///   - SecondaryIPv6Addresses: SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the
            internal init(
                AdditionalMACAddresses: [Swift.String]? = nil,
                Aliases: [Swift.String]? = nil,
                DriverOpts: Components.Schemas.InspectAdditionalNetwork.DriverOptsPayload? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int64? = nil,
                IPAMConfig: Components.Schemas.InspectAdditionalNetwork.IPAMConfigPayload? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int64? = nil,
                IPv6Gateway: Swift.String? = nil,
                Links: [Swift.String]? = nil,
                MacAddress: Swift.String? = nil,
                NetworkID: Swift.String? = nil,
                SecondaryIPAddresses: [Components.Schemas.Address]? = nil,
                SecondaryIPv6Addresses: [Components.Schemas.Address]? = nil
            ) {
                self.AdditionalMACAddresses = AdditionalMACAddresses
                self.Aliases = Aliases
                self.DriverOpts = DriverOpts
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.IPAMConfig = IPAMConfig
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.Links = Links
                self.MacAddress = MacAddress
                self.NetworkID = NetworkID
                self.SecondaryIPAddresses = SecondaryIPAddresses
                self.SecondaryIPv6Addresses = SecondaryIPv6Addresses
            }
            internal enum CodingKeys: String, CodingKey {
                case AdditionalMACAddresses
                case Aliases
                case DriverOpts
                case EndpointID
                case Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case IPAMConfig
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case Links
                case MacAddress
                case NetworkID
                case SecondaryIPAddresses
                case SecondaryIPv6Addresses
            }
        }
        /// InspectBlkioThrottleDevice holds information about a speed cap for a device
        /// node. This cap applies to a specific operation (read, write, etc) on the given
        /// node.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectBlkioThrottleDevice`.
        internal struct InspectBlkioThrottleDevice: Codable, Hashable, Sendable {
            /// Path is the path to the device this applies to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectBlkioThrottleDevice/Path`.
            internal var Path: Swift.String?
            /// Rate is the maximum rate. It is in either bytes per second or iops
            /// per second, determined by where it is used - documentation will
            /// indicate which is appropriate.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectBlkioThrottleDevice/Rate`.
            internal var Rate: Swift.Int?
            /// Creates a new `InspectBlkioThrottleDevice`.
            ///
            /// - Parameters:
            ///   - Path: Path is the path to the device this applies to.
            ///   - Rate: Rate is the maximum rate. It is in either bytes per second or iops
            internal init(
                Path: Swift.String? = nil,
                Rate: Swift.Int? = nil
            ) {
                self.Path = Path
                self.Rate = Rate
            }
            internal enum CodingKeys: String, CodingKey {
                case Path
                case Rate
            }
        }
        /// InspectBlkioWeightDevice holds information about the relative weight
        /// of an individual device node. Weights are used in the I/O scheduler to give
        /// relative priority to some accesses.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectBlkioWeightDevice`.
        internal struct InspectBlkioWeightDevice: Codable, Hashable, Sendable {
            /// Path is the path to the device this applies to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectBlkioWeightDevice/Path`.
            internal var Path: Swift.String?
            /// Weight is the relative weight the scheduler will use when scheduling
            /// I/O.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectBlkioWeightDevice/Weight`.
            internal var Weight: Swift.Int?
            /// Creates a new `InspectBlkioWeightDevice`.
            ///
            /// - Parameters:
            ///   - Path: Path is the path to the device this applies to.
            ///   - Weight: Weight is the relative weight the scheduler will use when scheduling
            internal init(
                Path: Swift.String? = nil,
                Weight: Swift.Int? = nil
            ) {
                self.Path = Path
                self.Weight = Weight
            }
            internal enum CodingKeys: String, CodingKey {
                case Path
                case Weight
            }
        }
        /// InspectContainerConfig holds further data about how a container was initially
        /// configured.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectContainerConfig`.
        internal struct InspectContainerConfig: Codable, Hashable, Sendable {
            /// Container annotations
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Annotations`.
            internal struct AnnotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `AnnotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Container annotations
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Annotations`.
            internal var Annotations: Components.Schemas.InspectContainerConfig.AnnotationsPayload?
            /// Unused, at present
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/AttachStderr`.
            internal var AttachStderr: Swift.Bool?
            /// Unused, at present
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/AttachStdin`.
            internal var AttachStdin: Swift.Bool?
            /// Unused, at present
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/AttachStdout`.
            internal var AttachStdout: Swift.Bool?
            /// ChrootDirs is an additional set of directories that need to be
            /// treated as root directories. Standard bind mounts will be mounted
            /// into paths relative to these directories.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/ChrootDirs`.
            internal var ChrootDirs: [Swift.String]?
            /// Container command
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Cmd`.
            internal var Cmd: [Swift.String]?
            /// CreateCommand is the full command plus arguments of the process the
            /// container has been created with.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/CreateCommand`.
            internal var CreateCommand: [Swift.String]?
            /// Container domain name - unused at present
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Domainname`.
            internal var Domainname: Swift.String?
            /// Container entrypoint
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Entrypoint`.
            internal var Entrypoint: [Swift.String]?
            /// Container environment variables
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Env`.
            internal var Env: [Swift.String]?
            /// ExposedPorts includes ports the container has exposed.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/ExposedPorts`.
            internal struct ExposedPortsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `ExposedPortsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// ExposedPorts includes ports the container has exposed.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/ExposedPorts`.
            internal var ExposedPorts: Components.Schemas.InspectContainerConfig.ExposedPortsPayload?
            /// HealthLogDestination defines the destination where the log is stored
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/HealthLogDestination`.
            internal var HealthLogDestination: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Healthcheck`.
            internal var Healthcheck: Components.Schemas.Schema2HealthConfig?
            /// HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            /// ('0' value means an infinite number of attempts in the log file)
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/HealthcheckMaxLogCount`.
            internal var HealthcheckMaxLogCount: Swift.Int?
            /// HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            /// ("0" value means an infinite log length)
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/HealthcheckMaxLogSize`.
            internal var HealthcheckMaxLogSize: Swift.Int?
            /// HealthcheckOnFailureAction defines an action to take once the container turns unhealthy.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/HealthcheckOnFailureAction`.
            internal var HealthcheckOnFailureAction: Swift.String?
            /// Container hostname
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Hostname`.
            internal var Hostname: Swift.String?
            /// Container image
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Image`.
            internal var Image: Swift.String?
            /// Container labels
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Container labels
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Labels`.
            internal var Labels: Components.Schemas.InspectContainerConfig.LabelsPayload?
            /// On-build arguments - presently unused. More of Buildah's domain.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/OnBuild`.
            internal var OnBuild: Swift.String?
            /// Whether the container leaves STDIN open
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/OpenStdin`.
            internal var OpenStdin: Swift.Bool?
            /// Passwd determines whether or not podman can add entries to /etc/passwd and /etc/group
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Passwd`.
            internal var Passwd: Swift.Bool?
            /// Secrets are the secrets mounted in the container
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Secrets`.
            internal var Secrets: [Components.Schemas.InspectSecret]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/StartupHealthCheck`.
            internal var StartupHealthCheck: Components.Schemas.StartupHealthCheck?
            /// Whether STDIN is only left open once.
            /// Presently not supported by Podman, unused.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/StdinOnce`.
            internal var StdinOnce: Swift.Bool?
            /// Container stop signal
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/StopSignal`.
            internal var StopSignal: Swift.String?
            /// StopTimeout is time before container is stopped when calling stop
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/StopTimeout`.
            internal var StopTimeout: Swift.Int?
            /// SystemdMode is whether the container is running in systemd mode. In
            /// systemd mode, the container configuration is customized to optimize
            /// running systemd in the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/SystemdMode`.
            internal var SystemdMode: Swift.Bool?
            /// Timeout is time before container is killed by conmon
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Timeout`.
            internal var Timeout: Swift.Int?
            /// Timezone is the timezone inside the container.
            /// Local means it has the same timezone as the host machine
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Timezone`.
            internal var Timezone: Swift.String?
            /// Whether the container creates a TTY
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Tty`.
            internal var Tty: Swift.Bool?
            /// Umask is the umask inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Umask`.
            internal var Umask: Swift.String?
            /// User the container was launched with
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/User`.
            internal var User: Swift.String?
            /// Unused, at present. I've never seen this field populated.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Volumes`.
            internal struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Unused, at present. I've never seen this field populated.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/Volumes`.
            internal var Volumes: Components.Schemas.InspectContainerConfig.VolumesPayload?
            /// Container working directory
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/WorkingDir`.
            internal var WorkingDir: Swift.String?
            /// SdNotifyMode is the sd-notify mode of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/sdNotifyMode`.
            internal var sdNotifyMode: Swift.String?
            /// SdNotifySocket is the NOTIFY_SOCKET in use by/configured for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerConfig/sdNotifySocket`.
            internal var sdNotifySocket: Swift.String?
            /// Creates a new `InspectContainerConfig`.
            ///
            /// - Parameters:
            ///   - Annotations: Container annotations
            ///   - AttachStderr: Unused, at present
            ///   - AttachStdin: Unused, at present
            ///   - AttachStdout: Unused, at present
            ///   - ChrootDirs: ChrootDirs is an additional set of directories that need to be
            ///   - Cmd: Container command
            ///   - CreateCommand: CreateCommand is the full command plus arguments of the process the
            ///   - Domainname: Container domain name - unused at present
            ///   - Entrypoint: Container entrypoint
            ///   - Env: Container environment variables
            ///   - ExposedPorts: ExposedPorts includes ports the container has exposed.
            ///   - HealthLogDestination: HealthLogDestination defines the destination where the log is stored
            ///   - Healthcheck:
            ///   - HealthcheckMaxLogCount: HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            ///   - HealthcheckMaxLogSize: HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            ///   - HealthcheckOnFailureAction: HealthcheckOnFailureAction defines an action to take once the container turns unhealthy.
            ///   - Hostname: Container hostname
            ///   - Image: Container image
            ///   - Labels: Container labels
            ///   - OnBuild: On-build arguments - presently unused. More of Buildah's domain.
            ///   - OpenStdin: Whether the container leaves STDIN open
            ///   - Passwd: Passwd determines whether or not podman can add entries to /etc/passwd and /etc/group
            ///   - Secrets: Secrets are the secrets mounted in the container
            ///   - StartupHealthCheck:
            ///   - StdinOnce: Whether STDIN is only left open once.
            ///   - StopSignal: Container stop signal
            ///   - StopTimeout: StopTimeout is time before container is stopped when calling stop
            ///   - SystemdMode: SystemdMode is whether the container is running in systemd mode. In
            ///   - Timeout: Timeout is time before container is killed by conmon
            ///   - Timezone: Timezone is the timezone inside the container.
            ///   - Tty: Whether the container creates a TTY
            ///   - Umask: Umask is the umask inside the container.
            ///   - User: User the container was launched with
            ///   - Volumes: Unused, at present. I've never seen this field populated.
            ///   - WorkingDir: Container working directory
            ///   - sdNotifyMode: SdNotifyMode is the sd-notify mode of the container.
            ///   - sdNotifySocket: SdNotifySocket is the NOTIFY_SOCKET in use by/configured for the container.
            internal init(
                Annotations: Components.Schemas.InspectContainerConfig.AnnotationsPayload? = nil,
                AttachStderr: Swift.Bool? = nil,
                AttachStdin: Swift.Bool? = nil,
                AttachStdout: Swift.Bool? = nil,
                ChrootDirs: [Swift.String]? = nil,
                Cmd: [Swift.String]? = nil,
                CreateCommand: [Swift.String]? = nil,
                Domainname: Swift.String? = nil,
                Entrypoint: [Swift.String]? = nil,
                Env: [Swift.String]? = nil,
                ExposedPorts: Components.Schemas.InspectContainerConfig.ExposedPortsPayload? = nil,
                HealthLogDestination: Swift.String? = nil,
                Healthcheck: Components.Schemas.Schema2HealthConfig? = nil,
                HealthcheckMaxLogCount: Swift.Int? = nil,
                HealthcheckMaxLogSize: Swift.Int? = nil,
                HealthcheckOnFailureAction: Swift.String? = nil,
                Hostname: Swift.String? = nil,
                Image: Swift.String? = nil,
                Labels: Components.Schemas.InspectContainerConfig.LabelsPayload? = nil,
                OnBuild: Swift.String? = nil,
                OpenStdin: Swift.Bool? = nil,
                Passwd: Swift.Bool? = nil,
                Secrets: [Components.Schemas.InspectSecret]? = nil,
                StartupHealthCheck: Components.Schemas.StartupHealthCheck? = nil,
                StdinOnce: Swift.Bool? = nil,
                StopSignal: Swift.String? = nil,
                StopTimeout: Swift.Int? = nil,
                SystemdMode: Swift.Bool? = nil,
                Timeout: Swift.Int? = nil,
                Timezone: Swift.String? = nil,
                Tty: Swift.Bool? = nil,
                Umask: Swift.String? = nil,
                User: Swift.String? = nil,
                Volumes: Components.Schemas.InspectContainerConfig.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil,
                sdNotifyMode: Swift.String? = nil,
                sdNotifySocket: Swift.String? = nil
            ) {
                self.Annotations = Annotations
                self.AttachStderr = AttachStderr
                self.AttachStdin = AttachStdin
                self.AttachStdout = AttachStdout
                self.ChrootDirs = ChrootDirs
                self.Cmd = Cmd
                self.CreateCommand = CreateCommand
                self.Domainname = Domainname
                self.Entrypoint = Entrypoint
                self.Env = Env
                self.ExposedPorts = ExposedPorts
                self.HealthLogDestination = HealthLogDestination
                self.Healthcheck = Healthcheck
                self.HealthcheckMaxLogCount = HealthcheckMaxLogCount
                self.HealthcheckMaxLogSize = HealthcheckMaxLogSize
                self.HealthcheckOnFailureAction = HealthcheckOnFailureAction
                self.Hostname = Hostname
                self.Image = Image
                self.Labels = Labels
                self.OnBuild = OnBuild
                self.OpenStdin = OpenStdin
                self.Passwd = Passwd
                self.Secrets = Secrets
                self.StartupHealthCheck = StartupHealthCheck
                self.StdinOnce = StdinOnce
                self.StopSignal = StopSignal
                self.StopTimeout = StopTimeout
                self.SystemdMode = SystemdMode
                self.Timeout = Timeout
                self.Timezone = Timezone
                self.Tty = Tty
                self.Umask = Umask
                self.User = User
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
                self.sdNotifyMode = sdNotifyMode
                self.sdNotifySocket = sdNotifySocket
            }
            internal enum CodingKeys: String, CodingKey {
                case Annotations
                case AttachStderr
                case AttachStdin
                case AttachStdout
                case ChrootDirs
                case Cmd
                case CreateCommand
                case Domainname
                case Entrypoint
                case Env
                case ExposedPorts
                case HealthLogDestination
                case Healthcheck
                case HealthcheckMaxLogCount
                case HealthcheckMaxLogSize
                case HealthcheckOnFailureAction
                case Hostname
                case Image
                case Labels
                case OnBuild
                case OpenStdin
                case Passwd
                case Secrets
                case StartupHealthCheck
                case StdinOnce
                case StopSignal
                case StopTimeout
                case SystemdMode
                case Timeout
                case Timezone
                case Tty
                case Umask
                case User
                case Volumes
                case WorkingDir
                case sdNotifyMode
                case sdNotifySocket
            }
        }
        /// InspectContainerData provides a detailed record of a container's configuration
        /// and state as viewed by Libpod.
        /// Large portions of this structure are defined such that the output is
        /// compatible with `docker inspect` JSON, but additional fields have been added
        /// as required to share information not in the original output.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectContainerData`.
        internal struct InspectContainerData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/AppArmorProfile`.
            internal var AppArmorProfile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Args`.
            internal var Args: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/BoundingCaps`.
            internal var BoundingCaps: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Config`.
            internal var Config: Components.Schemas.InspectContainerConfig?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ConmonPidFile`.
            internal var ConmonPidFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Dependencies`.
            internal var Dependencies: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Driver`.
            internal var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/EffectiveCaps`.
            internal var EffectiveCaps: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ExecIDs`.
            internal var ExecIDs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/GraphDriver`.
            internal var GraphDriver: Components.Schemas.DriverData?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/HostConfig`.
            internal var HostConfig: Components.Schemas.InspectContainerHostConfig?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/HostnamePath`.
            internal var HostnamePath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/HostsPath`.
            internal var HostsPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ImageDigest`.
            internal var ImageDigest: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ImageName`.
            internal var ImageName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/IsInfra`.
            internal var IsInfra: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/IsService`.
            internal var IsService: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/KubeExitCodePropagation`.
            internal var KubeExitCodePropagation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/MountLabel`.
            internal var MountLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Mounts`.
            internal var Mounts: [Components.Schemas.InspectMount]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Namespace`.
            internal var Namespace: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/NetworkSettings`.
            internal var NetworkSettings: Components.Schemas.InspectNetworkSettings?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/OCIConfigPath`.
            internal var OCIConfigPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/OCIRuntime`.
            internal var OCIRuntime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/PidFile`.
            internal var PidFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Pod`.
            internal var Pod: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ProcessLabel`.
            internal var ProcessLabel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/ResolvConfPath`.
            internal var ResolvConfPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/RestartCount`.
            internal var RestartCount: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/Rootfs`.
            internal var Rootfs: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/SizeRootFs`.
            internal var SizeRootFs: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/SizeRw`.
            internal var SizeRw: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/State`.
            internal var State: Components.Schemas.InspectContainerState?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/StaticDir`.
            internal var StaticDir: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/UseImageHostname`.
            internal var UseImageHostname: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/UseImageHosts`.
            internal var UseImageHosts: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerData/lockNumber`.
            internal var lockNumber: Swift.Int?
            /// Creates a new `InspectContainerData`.
            ///
            /// - Parameters:
            ///   - AppArmorProfile:
            ///   - Args:
            ///   - BoundingCaps:
            ///   - Config:
            ///   - ConmonPidFile:
            ///   - Created:
            ///   - Dependencies:
            ///   - Driver:
            ///   - EffectiveCaps:
            ///   - ExecIDs:
            ///   - GraphDriver:
            ///   - HostConfig:
            ///   - HostnamePath:
            ///   - HostsPath:
            ///   - Id:
            ///   - Image:
            ///   - ImageDigest:
            ///   - ImageName:
            ///   - IsInfra:
            ///   - IsService:
            ///   - KubeExitCodePropagation:
            ///   - MountLabel:
            ///   - Mounts:
            ///   - Name:
            ///   - Namespace:
            ///   - NetworkSettings:
            ///   - OCIConfigPath:
            ///   - OCIRuntime:
            ///   - Path:
            ///   - PidFile:
            ///   - Pod:
            ///   - ProcessLabel:
            ///   - ResolvConfPath:
            ///   - RestartCount:
            ///   - Rootfs:
            ///   - SizeRootFs:
            ///   - SizeRw:
            ///   - State:
            ///   - StaticDir:
            ///   - UseImageHostname:
            ///   - UseImageHosts:
            ///   - lockNumber:
            internal init(
                AppArmorProfile: Swift.String? = nil,
                Args: [Swift.String]? = nil,
                BoundingCaps: [Swift.String]? = nil,
                Config: Components.Schemas.InspectContainerConfig? = nil,
                ConmonPidFile: Swift.String? = nil,
                Created: Foundation.Date? = nil,
                Dependencies: [Swift.String]? = nil,
                Driver: Swift.String? = nil,
                EffectiveCaps: [Swift.String]? = nil,
                ExecIDs: [Swift.String]? = nil,
                GraphDriver: Components.Schemas.DriverData? = nil,
                HostConfig: Components.Schemas.InspectContainerHostConfig? = nil,
                HostnamePath: Swift.String? = nil,
                HostsPath: Swift.String? = nil,
                Id: Swift.String? = nil,
                Image: Swift.String? = nil,
                ImageDigest: Swift.String? = nil,
                ImageName: Swift.String? = nil,
                IsInfra: Swift.Bool? = nil,
                IsService: Swift.Bool? = nil,
                KubeExitCodePropagation: Swift.String? = nil,
                MountLabel: Swift.String? = nil,
                Mounts: [Components.Schemas.InspectMount]? = nil,
                Name: Swift.String? = nil,
                Namespace: Swift.String? = nil,
                NetworkSettings: Components.Schemas.InspectNetworkSettings? = nil,
                OCIConfigPath: Swift.String? = nil,
                OCIRuntime: Swift.String? = nil,
                Path: Swift.String? = nil,
                PidFile: Swift.String? = nil,
                Pod: Swift.String? = nil,
                ProcessLabel: Swift.String? = nil,
                ResolvConfPath: Swift.String? = nil,
                RestartCount: Swift.Int32? = nil,
                Rootfs: Swift.String? = nil,
                SizeRootFs: Swift.Int64? = nil,
                SizeRw: Swift.Int64? = nil,
                State: Components.Schemas.InspectContainerState? = nil,
                StaticDir: Swift.String? = nil,
                UseImageHostname: Swift.Bool? = nil,
                UseImageHosts: Swift.Bool? = nil,
                lockNumber: Swift.Int? = nil
            ) {
                self.AppArmorProfile = AppArmorProfile
                self.Args = Args
                self.BoundingCaps = BoundingCaps
                self.Config = Config
                self.ConmonPidFile = ConmonPidFile
                self.Created = Created
                self.Dependencies = Dependencies
                self.Driver = Driver
                self.EffectiveCaps = EffectiveCaps
                self.ExecIDs = ExecIDs
                self.GraphDriver = GraphDriver
                self.HostConfig = HostConfig
                self.HostnamePath = HostnamePath
                self.HostsPath = HostsPath
                self.Id = Id
                self.Image = Image
                self.ImageDigest = ImageDigest
                self.ImageName = ImageName
                self.IsInfra = IsInfra
                self.IsService = IsService
                self.KubeExitCodePropagation = KubeExitCodePropagation
                self.MountLabel = MountLabel
                self.Mounts = Mounts
                self.Name = Name
                self.Namespace = Namespace
                self.NetworkSettings = NetworkSettings
                self.OCIConfigPath = OCIConfigPath
                self.OCIRuntime = OCIRuntime
                self.Path = Path
                self.PidFile = PidFile
                self.Pod = Pod
                self.ProcessLabel = ProcessLabel
                self.ResolvConfPath = ResolvConfPath
                self.RestartCount = RestartCount
                self.Rootfs = Rootfs
                self.SizeRootFs = SizeRootFs
                self.SizeRw = SizeRw
                self.State = State
                self.StaticDir = StaticDir
                self.UseImageHostname = UseImageHostname
                self.UseImageHosts = UseImageHosts
                self.lockNumber = lockNumber
            }
            internal enum CodingKeys: String, CodingKey {
                case AppArmorProfile
                case Args
                case BoundingCaps
                case Config
                case ConmonPidFile
                case Created
                case Dependencies
                case Driver
                case EffectiveCaps
                case ExecIDs
                case GraphDriver
                case HostConfig
                case HostnamePath
                case HostsPath
                case Id
                case Image
                case ImageDigest
                case ImageName
                case IsInfra
                case IsService
                case KubeExitCodePropagation
                case MountLabel
                case Mounts
                case Name
                case Namespace
                case NetworkSettings
                case OCIConfigPath
                case OCIRuntime
                case Path
                case PidFile
                case Pod
                case ProcessLabel
                case ResolvConfPath
                case RestartCount
                case Rootfs
                case SizeRootFs
                case SizeRw
                case State
                case StaticDir
                case UseImageHostname
                case UseImageHosts
                case lockNumber
            }
        }
        /// nolint:revive,stylecheck // Field names are fixed for compatibility and cannot be changed.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig`.
        internal struct InspectContainerHostConfig: Codable, Hashable, Sendable {
            /// Annotations are provided to the runtime when the container is
            /// started.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Annotations`.
            internal struct AnnotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `AnnotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations are provided to the runtime when the container is
            /// started.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Annotations`.
            internal var Annotations: Components.Schemas.InspectContainerHostConfig.AnnotationsPayload?
            /// AutoRemove is whether the container will be automatically removed on
            /// exiting.
            /// It is not handled directly within libpod and is stored in an
            /// annotation.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/AutoRemove`.
            internal var AutoRemove: Swift.Bool?
            /// AutoRemoveImage is whether the container's image will be
            /// automatically removed on exiting.
            /// It is not handled directly within libpod and is stored in an
            /// annotation.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/AutoRemoveImage`.
            internal var AutoRemoveImage: Swift.Bool?
            /// Binds contains an array of user-added mounts.
            /// Both volume mounts and named volumes are included.
            /// Tmpfs mounts are NOT included.
            /// In 'docker inspect' this is separated into 'Binds' and 'Mounts' based
            /// on how a mount was added. We do not make this distinction and do not
            /// include a Mounts field in inspect.
            /// Format: <src>:<destination>[:<comma-separated options>]
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Binds`.
            internal var Binds: [Swift.String]?
            /// BlkioDeviceReadBps is an array of I/O throttle parameters for
            /// individual device nodes.
            /// This specifically sets read rate cap in bytes per second for device
            /// nodes.
            /// As with BlkioWeightDevice, we pull the path from /sys/dev, and we
            /// don't guarantee the path will be identical to the original (though
            /// the node will be).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioDeviceReadBps`.
            internal var BlkioDeviceReadBps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// BlkioDeviceReadIOps is an array of I/O throttle parameters for
            /// individual device nodes.
            /// This specifically sets the read rate cap in iops per second for
            /// device nodes.
            /// As with BlkioWeightDevice, we pull the path from /sys/dev, and we
            /// don't guarantee the path will be identical to the original (though
            /// the node will be).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioDeviceReadIOps`.
            internal var BlkioDeviceReadIOps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// BlkioDeviceWriteBps is an array of I/O throttle parameters for
            /// individual device nodes.
            /// this specifically sets write rate cap in bytes per second for device
            /// nodes.
            /// as with BlkioWeightDevice, we pull the path from /sys/dev, and we
            /// don't guarantee the path will be identical to the original (though
            /// the node will be).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioDeviceWriteBps`.
            internal var BlkioDeviceWriteBps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// BlkioDeviceWriteIOps is an array of I/O throttle parameters for
            /// individual device nodes.
            /// This specifically sets the write rate cap in iops per second for
            /// device nodes.
            /// As with BlkioWeightDevice, we pull the path from /sys/dev, and we
            /// don't guarantee the path will be identical to the original (though
            /// the node will be).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioDeviceWriteIOps`.
            internal var BlkioDeviceWriteIOps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// BlkioWeight indicates the I/O resources allocated to the container.
            /// It is a relative weight in the scheduler for assigning I/O time
            /// versus other Cgroups.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioWeight`.
            internal var BlkioWeight: Swift.Int?
            /// BlkioWeightDevice is an array of I/O resource priorities for
            /// individual device nodes.
            /// Unfortunately, the spec only stores the device's Major/Minor numbers
            /// and not the path, which is used here.
            /// Fortunately, the kernel provides an interface for retrieving the path
            /// of a given node by major:minor at /sys/dev/. However, the exact path
            /// in use may not be what was used in the original CLI invocation -
            /// though it is guaranteed that the device node will be the same, and
            /// using the given path will be functionally identical.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/BlkioWeightDevice`.
            internal var BlkioWeightDevice: [Components.Schemas.InspectBlkioWeightDevice]?
            /// CapAdd is a list of capabilities added to the container.
            /// It is not directly stored by Libpod, and instead computed from the
            /// capabilities listed in the container's spec, compared against a set
            /// of default capabilities.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CapAdd`.
            internal var CapAdd: [Swift.String]?
            /// CapDrop is a list of capabilities removed from the container.
            /// It is not directly stored by libpod, and instead computed from the
            /// capabilities listed in the container's spec, compared against a set
            /// of default capabilities.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CapDrop`.
            internal var CapDrop: [Swift.String]?
            /// Cgroup contains the container's cgroup. It is presently not
            /// populated.
            /// TODO.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Cgroup`.
            internal var Cgroup: Swift.String?
            /// CgroupConf is the configuration for cgroup v2.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CgroupConf`.
            internal struct CgroupConfPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `CgroupConfPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// CgroupConf is the configuration for cgroup v2.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CgroupConf`.
            internal var CgroupConf: Components.Schemas.InspectContainerHostConfig.CgroupConfPayload?
            /// CgroupManager is the cgroup manager used by the container.
            /// At present, allowed values are either "cgroupfs" or "systemd".
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CgroupManager`.
            internal var CgroupManager: Swift.String?
            /// CgroupMode is the configuration of the container's cgroup namespace.
            /// Populated as follows:
            /// private - a cgroup namespace has been created
            /// host - No cgroup namespace created
            /// container:<id> - Using another container's cgroup namespace
            /// ns:<path> - A path to a cgroup namespace has been specified
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CgroupMode`.
            internal var CgroupMode: Swift.String?
            /// CgroupParent is the Cgroup parent of the container.
            /// Only set if not default.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// Cgroups contains the container's Cgroup mode.
            /// Allowed values are "default" (container is creating Cgroups) and
            /// "disabled" (container is not creating Cgroups).
            /// This is Libpod-specific and not included in `docker inspect`.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Cgroups`.
            internal var Cgroups: Swift.String?
            /// ConsoleSize is an array of 2 integers showing the size of the
            /// container's console.
            /// It is only set if the container is creating a terminal.
            /// TODO.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/ConsoleSize`.
            internal var ConsoleSize: [Swift.Int]?
            /// ContainerIDFile is a file created during container creation to hold
            /// the ID of the created container.
            /// This is not handled within libpod and is stored in an annotation.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/ContainerIDFile`.
            internal var ContainerIDFile: Swift.String?
            /// CpuCount is Windows-only and not presently implemented.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuCount`.
            internal var CpuCount: Swift.Int?
            /// CpuPercent is Windows-only and not presently implemented.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuPercent`.
            internal var CpuPercent: Swift.Int?
            /// CpuPeriod is the length of a CPU period in microseconds.
            /// It relates directly to CpuQuota.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuPeriod`.
            internal var CpuPeriod: Swift.Int?
            /// CpuPeriod is the amount of time (in microseconds) that a container
            /// can use the CPU in every CpuPeriod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuQuota`.
            internal var CpuQuota: Swift.Int64?
            /// CpuRealtimePeriod is the length of time (in microseconds) of the CPU
            /// realtime period. If set to 0, no time will be allocated to realtime
            /// tasks.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuRealtimePeriod`.
            internal var CpuRealtimePeriod: Swift.Int?
            /// CpuRealtimeRuntime is the length of time (in microseconds) allocated
            /// for realtime tasks within every CpuRealtimePeriod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuRealtimeRuntime`.
            internal var CpuRealtimeRuntime: Swift.Int64?
            /// CpuShares indicates the CPU resources allocated to the container.
            /// It is a relative weight in the scheduler for assigning CPU time
            /// versus other Cgroups.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpuShares`.
            internal var CpuShares: Swift.Int?
            /// CpusetCpus is the set of CPUs that the container will execute on.
            /// Formatted as `0-3` or `0,2`. Default (if unset) is all CPUs.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpusetCpus`.
            internal var CpusetCpus: Swift.String?
            /// CpusetMems is the set of memory nodes the container will use.
            /// Formatted as `0-3` or `0,2`. Default (if unset) is all memory nodes.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/CpusetMems`.
            internal var CpusetMems: Swift.String?
            /// Devices is a list of device nodes that will be added to the
            /// container.
            /// These are stored in the OCI spec only as type, major, minor while we
            /// display the host path. We convert this with /sys/dev, but we cannot
            /// guarantee that the host path will be identical - only that the actual
            /// device will be.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Devices`.
            internal var Devices: [Components.Schemas.InspectDevice]?
            /// DiskQuota is the maximum amount of disk space the container may use
            /// (in bytes).
            /// Presently not populated.
            /// TODO.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/DiskQuota`.
            internal var DiskQuota: Swift.Int?
            /// Dns is a list of DNS nameservers that will be added to the
            /// container's resolv.conf
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Dns`.
            internal var Dns: [Swift.String]?
            /// DnsOptions is a list of DNS options that will be set in the
            /// container's resolv.conf
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/DnsOptions`.
            internal var DnsOptions: [Swift.String]?
            /// DnsSearch is a list of DNS search domains that will be set in the
            /// container's resolv.conf
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/DnsSearch`.
            internal var DnsSearch: [Swift.String]?
            /// ExtraHosts contains hosts that will be added to the container's
            /// etc/hosts.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/ExtraHosts`.
            internal var ExtraHosts: [Swift.String]?
            /// GroupAdd contains groups that the user inside the container will be
            /// added to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/GroupAdd`.
            internal var GroupAdd: [Swift.String]?
            /// HostsFile is the base file to create the `/etc/hosts` file inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/HostsFile`.
            internal var HostsFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/IDMappings`.
            internal var IDMappings: Components.Schemas.InspectIDMappings?
            /// IOMaximumBandwidth is Windows-only and not presently implemented.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/IOMaximumBandwidth`.
            internal var IOMaximumBandwidth: Swift.Int?
            /// IOMaximumIOps is Windows-only and not presently implemented.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/IOMaximumIOps`.
            internal var IOMaximumIOps: Swift.Int?
            /// Init indicates whether the container has an init mounted into it.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Init`.
            internal var Init: Swift.Bool?
            /// IntelRdtClosID defines the Intel RDT CAT Class Of Service (COS) that
            /// all processes of the container should run in.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/IntelRdtClosID`.
            internal var IntelRdtClosID: Swift.String?
            /// IpcMode represents the configuration of the container's IPC
            /// namespace.
            /// Populated as follows:
            /// "" (empty string) - Default, an IPC namespace will be created
            /// host - No IPC namespace created
            /// container:<id> - Using another container's IPC namespace
            /// ns:<path> - A path to an IPC namespace has been specified
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/IpcMode`.
            internal var IpcMode: Swift.String?
            /// Isolation is presently unused and provided solely for Docker
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Isolation`.
            internal var Isolation: Swift.String?
            /// KernelMemory is the maximum amount of memory the kernel will devote
            /// to the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/KernelMemory`.
            internal var KernelMemory: Swift.Int64?
            /// Links is unused, and provided purely for Docker compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Links`.
            internal var Links: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/LogConfig`.
            internal var LogConfig: Components.Schemas.InspectLogConfig?
            /// Memory indicates the memory resources allocated to the container.
            /// This is the limit (in bytes) of RAM the container may use.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Memory`.
            internal var Memory: Swift.Int64?
            /// MemoryReservation is the reservation (soft limit) of memory available
            /// to the container. Soft limits are warnings only and can be exceeded.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/MemoryReservation`.
            internal var MemoryReservation: Swift.Int64?
            /// MemorySwap is the total limit for all memory available to the
            /// container, including swap. 0 indicates that there is no limit to the
            /// amount of memory available.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/MemorySwap`.
            internal var MemorySwap: Swift.Int64?
            /// MemorySwappiness is the willingness of the kernel to page container
            /// memory to swap. It is an integer from 0 to 100, with low numbers
            /// being more likely to be put into swap.
            /// 1, the default, will not set swappiness and use the system defaults.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/MemorySwappiness`.
            internal var MemorySwappiness: Swift.Int64?
            /// NanoCpus indicates number of CPUs allocated to the container.
            /// It is an integer where one full CPU is indicated by 1000000000 (one
            /// billion).
            /// Thus, 2.5 CPUs (fractional portions of CPUs are allowed) would be
            /// 2500000000 (2.5 billion).
            /// In 'docker inspect' this is set exclusively of two further options in
            /// the output (CpuPeriod and CpuQuota) which are both used to implement
            /// this functionality.
            /// We can't distinguish here, so if CpuQuota is set to the default of
            /// 100000, we will set both CpuQuota, CpuPeriod, and NanoCpus. If
            /// CpuQuota is not the default, we will not set NanoCpus.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/NanoCpus`.
            internal var NanoCpus: Swift.Int64?
            /// NetworkMode is the configuration of the container's network
            /// namespace.
            /// Populated as follows:
            /// default - A network namespace is being created and configured via CNI
            /// none - A network namespace is being created, not configured via CNI
            /// host - No network namespace created
            /// container:<id> - Using another container's network namespace
            /// ns:<path> - A path to a network namespace has been specified
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/NetworkMode`.
            internal var NetworkMode: Swift.String?
            /// OomKillDisable indicates whether the kernel OOM killer is disabled
            /// for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/OomKillDisable`.
            internal var OomKillDisable: Swift.Bool?
            /// OOMScoreAdj is an adjustment that will be made to the container's OOM
            /// score.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/OomScoreAdj`.
            internal var OomScoreAdj: Swift.Int64?
            /// PidMode represents the configuration of the container's PID
            /// namespace.
            /// Populated as follows:
            /// "" (empty string) - Default, a PID namespace will be created
            /// host - No PID namespace created
            /// container:<id> - Using another container's PID namespace
            /// ns:<path> - A path to a PID namespace has been specified
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/PidMode`.
            internal var PidMode: Swift.String?
            /// PidsLimit is the maximum number of PIDs that may be created within
            /// the container. 0, the default, indicates no limit.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/PidsLimit`.
            internal var PidsLimit: Swift.Int64?
            /// PortBindings contains the container's port bindings.
            /// It is formatted as map[string][]InspectHostPort.
            /// The string key here is formatted as <integer port number>/<protocol>
            /// and represents the container port. A single container port may be
            /// bound to multiple host ports (on different IPs).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/PortBindings`.
            internal struct PortBindingsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Components.Schemas.InspectHostPort]]
                /// Creates a new `PortBindingsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Components.Schemas.InspectHostPort]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// PortBindings contains the container's port bindings.
            /// It is formatted as map[string][]InspectHostPort.
            /// The string key here is formatted as <integer port number>/<protocol>
            /// and represents the container port. A single container port may be
            /// bound to multiple host ports (on different IPs).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/PortBindings`.
            internal var PortBindings: Components.Schemas.InspectContainerHostConfig.PortBindingsPayload?
            /// Privileged indicates whether the container is running with elevated
            /// privileges.
            /// This has a very specific meaning in the Docker sense, so it's very
            /// difficult to decode from the spec and config, and so is stored as an
            /// annotation.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Privileged`.
            internal var Privileged: Swift.Bool?
            /// PublishAllPorts indicates whether image ports are being published.
            /// This is not directly stored in libpod and is saved as an annotation.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/PublishAllPorts`.
            internal var PublishAllPorts: Swift.Bool?
            /// ReadonlyRootfs is whether the container will be mounted read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/ReadonlyRootfs`.
            internal var ReadonlyRootfs: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/RestartPolicy`.
            internal var RestartPolicy: Components.Schemas.InspectRestartPolicy?
            /// Runtime is provided purely for Docker compatibility.
            /// It is set unconditionally to "oci" as Podman does not presently
            /// support non-OCI runtimes.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Runtime`.
            internal var Runtime: Swift.String?
            /// SecurityOpt is a list of security-related options that are set in the
            /// container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/SecurityOpt`.
            internal var SecurityOpt: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/ShmSize`.
            internal var ShmSize: Swift.Int64?
            /// Tmpfs is a list of tmpfs filesystems that will be mounted into the
            /// container.
            /// It is a map of destination path to options for the mount.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Tmpfs`.
            internal struct TmpfsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `TmpfsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Tmpfs is a list of tmpfs filesystems that will be mounted into the
            /// container.
            /// It is a map of destination path to options for the mount.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Tmpfs`.
            internal var Tmpfs: Components.Schemas.InspectContainerHostConfig.TmpfsPayload?
            /// UTSMode represents the configuration of the container's UID
            /// namespace.
            /// Populated as follows:
            /// "" (empty string) - Default, a UTS namespace will be created
            /// host - no UTS namespace created
            /// container:<id> - Using another container's UTS namespace
            /// ns:<path> - A path to a UTS namespace has been specified
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/UTSMode`.
            internal var UTSMode: Swift.String?
            /// Ulimits is a set of ulimits that will be set within the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/Ulimits`.
            internal var Ulimits: [Components.Schemas.InspectUlimit]?
            /// UsernsMode represents the configuration of the container's user
            /// namespace.
            /// When running rootless, a user namespace is created outside of libpod
            /// to allow some privileged operations. This will not be reflected here.
            /// Populated as follows:
            /// "" (empty string) - No user namespace will be created
            /// private - The container will be run in a user namespace
            /// container:<id> - Using another container's user namespace
            /// ns:<path> - A path to a user namespace has been specified
            /// TODO Rootless has an additional 'keep-id' option, presently not
            /// reflected here.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/UsernsMode`.
            internal var UsernsMode: Swift.String?
            /// VolumeDriver is presently unused and is retained for Docker
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/VolumeDriver`.
            internal var VolumeDriver: Swift.String?
            /// VolumesFrom is a list of containers which this container uses volumes
            /// from. This is not handled directly within libpod and is stored in an
            /// annotation.
            /// It is formatted as an array of container names and IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectContainerHostConfig/VolumesFrom`.
            internal var VolumesFrom: [Swift.String]?
            /// Creates a new `InspectContainerHostConfig`.
            ///
            /// - Parameters:
            ///   - Annotations: Annotations are provided to the runtime when the container is
            ///   - AutoRemove: AutoRemove is whether the container will be automatically removed on
            ///   - AutoRemoveImage: AutoRemoveImage is whether the container's image will be
            ///   - Binds: Binds contains an array of user-added mounts.
            ///   - BlkioDeviceReadBps: BlkioDeviceReadBps is an array of I/O throttle parameters for
            ///   - BlkioDeviceReadIOps: BlkioDeviceReadIOps is an array of I/O throttle parameters for
            ///   - BlkioDeviceWriteBps: BlkioDeviceWriteBps is an array of I/O throttle parameters for
            ///   - BlkioDeviceWriteIOps: BlkioDeviceWriteIOps is an array of I/O throttle parameters for
            ///   - BlkioWeight: BlkioWeight indicates the I/O resources allocated to the container.
            ///   - BlkioWeightDevice: BlkioWeightDevice is an array of I/O resource priorities for
            ///   - CapAdd: CapAdd is a list of capabilities added to the container.
            ///   - CapDrop: CapDrop is a list of capabilities removed from the container.
            ///   - Cgroup: Cgroup contains the container's cgroup. It is presently not
            ///   - CgroupConf: CgroupConf is the configuration for cgroup v2.
            ///   - CgroupManager: CgroupManager is the cgroup manager used by the container.
            ///   - CgroupMode: CgroupMode is the configuration of the container's cgroup namespace.
            ///   - CgroupParent: CgroupParent is the Cgroup parent of the container.
            ///   - Cgroups: Cgroups contains the container's Cgroup mode.
            ///   - ConsoleSize: ConsoleSize is an array of 2 integers showing the size of the
            ///   - ContainerIDFile: ContainerIDFile is a file created during container creation to hold
            ///   - CpuCount: CpuCount is Windows-only and not presently implemented.
            ///   - CpuPercent: CpuPercent is Windows-only and not presently implemented.
            ///   - CpuPeriod: CpuPeriod is the length of a CPU period in microseconds.
            ///   - CpuQuota: CpuPeriod is the amount of time (in microseconds) that a container
            ///   - CpuRealtimePeriod: CpuRealtimePeriod is the length of time (in microseconds) of the CPU
            ///   - CpuRealtimeRuntime: CpuRealtimeRuntime is the length of time (in microseconds) allocated
            ///   - CpuShares: CpuShares indicates the CPU resources allocated to the container.
            ///   - CpusetCpus: CpusetCpus is the set of CPUs that the container will execute on.
            ///   - CpusetMems: CpusetMems is the set of memory nodes the container will use.
            ///   - Devices: Devices is a list of device nodes that will be added to the
            ///   - DiskQuota: DiskQuota is the maximum amount of disk space the container may use
            ///   - Dns: Dns is a list of DNS nameservers that will be added to the
            ///   - DnsOptions: DnsOptions is a list of DNS options that will be set in the
            ///   - DnsSearch: DnsSearch is a list of DNS search domains that will be set in the
            ///   - ExtraHosts: ExtraHosts contains hosts that will be added to the container's
            ///   - GroupAdd: GroupAdd contains groups that the user inside the container will be
            ///   - HostsFile: HostsFile is the base file to create the `/etc/hosts` file inside the container.
            ///   - IDMappings:
            ///   - IOMaximumBandwidth: IOMaximumBandwidth is Windows-only and not presently implemented.
            ///   - IOMaximumIOps: IOMaximumIOps is Windows-only and not presently implemented.
            ///   - Init: Init indicates whether the container has an init mounted into it.
            ///   - IntelRdtClosID: IntelRdtClosID defines the Intel RDT CAT Class Of Service (COS) that
            ///   - IpcMode: IpcMode represents the configuration of the container's IPC
            ///   - Isolation: Isolation is presently unused and provided solely for Docker
            ///   - KernelMemory: KernelMemory is the maximum amount of memory the kernel will devote
            ///   - Links: Links is unused, and provided purely for Docker compatibility.
            ///   - LogConfig:
            ///   - Memory: Memory indicates the memory resources allocated to the container.
            ///   - MemoryReservation: MemoryReservation is the reservation (soft limit) of memory available
            ///   - MemorySwap: MemorySwap is the total limit for all memory available to the
            ///   - MemorySwappiness: MemorySwappiness is the willingness of the kernel to page container
            ///   - NanoCpus: NanoCpus indicates number of CPUs allocated to the container.
            ///   - NetworkMode: NetworkMode is the configuration of the container's network
            ///   - OomKillDisable: OomKillDisable indicates whether the kernel OOM killer is disabled
            ///   - OomScoreAdj: OOMScoreAdj is an adjustment that will be made to the container's OOM
            ///   - PidMode: PidMode represents the configuration of the container's PID
            ///   - PidsLimit: PidsLimit is the maximum number of PIDs that may be created within
            ///   - PortBindings: PortBindings contains the container's port bindings.
            ///   - Privileged: Privileged indicates whether the container is running with elevated
            ///   - PublishAllPorts: PublishAllPorts indicates whether image ports are being published.
            ///   - ReadonlyRootfs: ReadonlyRootfs is whether the container will be mounted read-only.
            ///   - RestartPolicy:
            ///   - Runtime: Runtime is provided purely for Docker compatibility.
            ///   - SecurityOpt: SecurityOpt is a list of security-related options that are set in the
            ///   - ShmSize:
            ///   - Tmpfs: Tmpfs is a list of tmpfs filesystems that will be mounted into the
            ///   - UTSMode: UTSMode represents the configuration of the container's UID
            ///   - Ulimits: Ulimits is a set of ulimits that will be set within the container.
            ///   - UsernsMode: UsernsMode represents the configuration of the container's user
            ///   - VolumeDriver: VolumeDriver is presently unused and is retained for Docker
            ///   - VolumesFrom: VolumesFrom is a list of containers which this container uses volumes
            internal init(
                Annotations: Components.Schemas.InspectContainerHostConfig.AnnotationsPayload? = nil,
                AutoRemove: Swift.Bool? = nil,
                AutoRemoveImage: Swift.Bool? = nil,
                Binds: [Swift.String]? = nil,
                BlkioDeviceReadBps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: [Components.Schemas.InspectBlkioWeightDevice]? = nil,
                CapAdd: [Swift.String]? = nil,
                CapDrop: [Swift.String]? = nil,
                Cgroup: Swift.String? = nil,
                CgroupConf: Components.Schemas.InspectContainerHostConfig.CgroupConfPayload? = nil,
                CgroupManager: Swift.String? = nil,
                CgroupMode: Swift.String? = nil,
                CgroupParent: Swift.String? = nil,
                Cgroups: Swift.String? = nil,
                ConsoleSize: [Swift.Int]? = nil,
                ContainerIDFile: Swift.String? = nil,
                CpuCount: Swift.Int? = nil,
                CpuPercent: Swift.Int? = nil,
                CpuPeriod: Swift.Int? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpuShares: Swift.Int? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                Devices: [Components.Schemas.InspectDevice]? = nil,
                DiskQuota: Swift.Int? = nil,
                Dns: [Swift.String]? = nil,
                DnsOptions: [Swift.String]? = nil,
                DnsSearch: [Swift.String]? = nil,
                ExtraHosts: [Swift.String]? = nil,
                GroupAdd: [Swift.String]? = nil,
                HostsFile: Swift.String? = nil,
                IDMappings: Components.Schemas.InspectIDMappings? = nil,
                IOMaximumBandwidth: Swift.Int? = nil,
                IOMaximumIOps: Swift.Int? = nil,
                Init: Swift.Bool? = nil,
                IntelRdtClosID: Swift.String? = nil,
                IpcMode: Swift.String? = nil,
                Isolation: Swift.String? = nil,
                KernelMemory: Swift.Int64? = nil,
                Links: [Swift.String]? = nil,
                LogConfig: Components.Schemas.InspectLogConfig? = nil,
                Memory: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                NanoCpus: Swift.Int64? = nil,
                NetworkMode: Swift.String? = nil,
                OomKillDisable: Swift.Bool? = nil,
                OomScoreAdj: Swift.Int64? = nil,
                PidMode: Swift.String? = nil,
                PidsLimit: Swift.Int64? = nil,
                PortBindings: Components.Schemas.InspectContainerHostConfig.PortBindingsPayload? = nil,
                Privileged: Swift.Bool? = nil,
                PublishAllPorts: Swift.Bool? = nil,
                ReadonlyRootfs: Swift.Bool? = nil,
                RestartPolicy: Components.Schemas.InspectRestartPolicy? = nil,
                Runtime: Swift.String? = nil,
                SecurityOpt: [Swift.String]? = nil,
                ShmSize: Swift.Int64? = nil,
                Tmpfs: Components.Schemas.InspectContainerHostConfig.TmpfsPayload? = nil,
                UTSMode: Swift.String? = nil,
                Ulimits: [Components.Schemas.InspectUlimit]? = nil,
                UsernsMode: Swift.String? = nil,
                VolumeDriver: Swift.String? = nil,
                VolumesFrom: [Swift.String]? = nil
            ) {
                self.Annotations = Annotations
                self.AutoRemove = AutoRemove
                self.AutoRemoveImage = AutoRemoveImage
                self.Binds = Binds
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.CapAdd = CapAdd
                self.CapDrop = CapDrop
                self.Cgroup = Cgroup
                self.CgroupConf = CgroupConf
                self.CgroupManager = CgroupManager
                self.CgroupMode = CgroupMode
                self.CgroupParent = CgroupParent
                self.Cgroups = Cgroups
                self.ConsoleSize = ConsoleSize
                self.ContainerIDFile = ContainerIDFile
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpuShares = CpuShares
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.Devices = Devices
                self.DiskQuota = DiskQuota
                self.Dns = Dns
                self.DnsOptions = DnsOptions
                self.DnsSearch = DnsSearch
                self.ExtraHosts = ExtraHosts
                self.GroupAdd = GroupAdd
                self.HostsFile = HostsFile
                self.IDMappings = IDMappings
                self.IOMaximumBandwidth = IOMaximumBandwidth
                self.IOMaximumIOps = IOMaximumIOps
                self.Init = Init
                self.IntelRdtClosID = IntelRdtClosID
                self.IpcMode = IpcMode
                self.Isolation = Isolation
                self.KernelMemory = KernelMemory
                self.Links = Links
                self.LogConfig = LogConfig
                self.Memory = Memory
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.NanoCpus = NanoCpus
                self.NetworkMode = NetworkMode
                self.OomKillDisable = OomKillDisable
                self.OomScoreAdj = OomScoreAdj
                self.PidMode = PidMode
                self.PidsLimit = PidsLimit
                self.PortBindings = PortBindings
                self.Privileged = Privileged
                self.PublishAllPorts = PublishAllPorts
                self.ReadonlyRootfs = ReadonlyRootfs
                self.RestartPolicy = RestartPolicy
                self.Runtime = Runtime
                self.SecurityOpt = SecurityOpt
                self.ShmSize = ShmSize
                self.Tmpfs = Tmpfs
                self.UTSMode = UTSMode
                self.Ulimits = Ulimits
                self.UsernsMode = UsernsMode
                self.VolumeDriver = VolumeDriver
                self.VolumesFrom = VolumesFrom
            }
            internal enum CodingKeys: String, CodingKey {
                case Annotations
                case AutoRemove
                case AutoRemoveImage
                case Binds
                case BlkioDeviceReadBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteBps
                case BlkioDeviceWriteIOps
                case BlkioWeight
                case BlkioWeightDevice
                case CapAdd
                case CapDrop
                case Cgroup
                case CgroupConf
                case CgroupManager
                case CgroupMode
                case CgroupParent
                case Cgroups
                case ConsoleSize
                case ContainerIDFile
                case CpuCount
                case CpuPercent
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpuShares
                case CpusetCpus
                case CpusetMems
                case Devices
                case DiskQuota
                case Dns
                case DnsOptions
                case DnsSearch
                case ExtraHosts
                case GroupAdd
                case HostsFile
                case IDMappings
                case IOMaximumBandwidth
                case IOMaximumIOps
                case Init
                case IntelRdtClosID
                case IpcMode
                case Isolation
                case KernelMemory
                case Links
                case LogConfig
                case Memory
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case NanoCpus
                case NetworkMode
                case OomKillDisable
                case OomScoreAdj
                case PidMode
                case PidsLimit
                case PortBindings
                case Privileged
                case PublishAllPorts
                case ReadonlyRootfs
                case RestartPolicy
                case Runtime
                case SecurityOpt
                case ShmSize
                case Tmpfs
                case UTSMode
                case Ulimits
                case UsernsMode
                case VolumeDriver
                case VolumesFrom
            }
        }
        /// InspectContainerState provides a detailed record of a container's current
        /// state. It is returned as part of InspectContainerData.
        /// As with InspectContainerData, many portions of this struct are matched to
        /// Docker, but here we see more fields that are unused (nonsensical in the
        /// context of Libpod).
        ///
        /// - Remark: Generated from `#/components/schemas/InspectContainerState`.
        internal struct InspectContainerState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/CgroupPath`.
            internal var CgroupPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/CheckpointLog`.
            internal var CheckpointLog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/CheckpointPath`.
            internal var CheckpointPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Checkpointed`.
            internal var Checkpointed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/CheckpointedAt`.
            internal var CheckpointedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/ConmonPid`.
            internal var ConmonPid: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Dead`.
            internal var Dead: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Error`.
            internal var _Error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/ExitCode`.
            internal var ExitCode: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/FinishedAt`.
            internal var FinishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Health`.
            internal var Health: Components.Schemas.HealthCheckResults?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/OOMKilled`.
            internal var OOMKilled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/OciVersion`.
            internal var OciVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Paused`.
            internal var Paused: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Pid`.
            internal var Pid: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Restarting`.
            internal var Restarting: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/RestoreLog`.
            internal var RestoreLog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Restored`.
            internal var Restored: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/RestoredAt`.
            internal var RestoredAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Running`.
            internal var Running: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/StartedAt`.
            internal var StartedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/Status`.
            internal var Status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectContainerState/StoppedByUser`.
            internal var StoppedByUser: Swift.Bool?
            /// Creates a new `InspectContainerState`.
            ///
            /// - Parameters:
            ///   - CgroupPath:
            ///   - CheckpointLog:
            ///   - CheckpointPath:
            ///   - Checkpointed:
            ///   - CheckpointedAt:
            ///   - ConmonPid:
            ///   - Dead:
            ///   - _Error:
            ///   - ExitCode:
            ///   - FinishedAt:
            ///   - Health:
            ///   - OOMKilled:
            ///   - OciVersion:
            ///   - Paused:
            ///   - Pid:
            ///   - Restarting:
            ///   - RestoreLog:
            ///   - Restored:
            ///   - RestoredAt:
            ///   - Running:
            ///   - StartedAt:
            ///   - Status:
            ///   - StoppedByUser:
            internal init(
                CgroupPath: Swift.String? = nil,
                CheckpointLog: Swift.String? = nil,
                CheckpointPath: Swift.String? = nil,
                Checkpointed: Swift.Bool? = nil,
                CheckpointedAt: Foundation.Date? = nil,
                ConmonPid: Swift.Int64? = nil,
                Dead: Swift.Bool? = nil,
                _Error: Swift.String? = nil,
                ExitCode: Swift.Int32? = nil,
                FinishedAt: Foundation.Date? = nil,
                Health: Components.Schemas.HealthCheckResults? = nil,
                OOMKilled: Swift.Bool? = nil,
                OciVersion: Swift.String? = nil,
                Paused: Swift.Bool? = nil,
                Pid: Swift.Int64? = nil,
                Restarting: Swift.Bool? = nil,
                RestoreLog: Swift.String? = nil,
                Restored: Swift.Bool? = nil,
                RestoredAt: Foundation.Date? = nil,
                Running: Swift.Bool? = nil,
                StartedAt: Foundation.Date? = nil,
                Status: Swift.String? = nil,
                StoppedByUser: Swift.Bool? = nil
            ) {
                self.CgroupPath = CgroupPath
                self.CheckpointLog = CheckpointLog
                self.CheckpointPath = CheckpointPath
                self.Checkpointed = Checkpointed
                self.CheckpointedAt = CheckpointedAt
                self.ConmonPid = ConmonPid
                self.Dead = Dead
                self._Error = _Error
                self.ExitCode = ExitCode
                self.FinishedAt = FinishedAt
                self.Health = Health
                self.OOMKilled = OOMKilled
                self.OciVersion = OciVersion
                self.Paused = Paused
                self.Pid = Pid
                self.Restarting = Restarting
                self.RestoreLog = RestoreLog
                self.Restored = Restored
                self.RestoredAt = RestoredAt
                self.Running = Running
                self.StartedAt = StartedAt
                self.Status = Status
                self.StoppedByUser = StoppedByUser
            }
            internal enum CodingKeys: String, CodingKey {
                case CgroupPath
                case CheckpointLog
                case CheckpointPath
                case Checkpointed
                case CheckpointedAt
                case ConmonPid
                case Dead
                case _Error = "Error"
                case ExitCode
                case FinishedAt
                case Health
                case OOMKilled
                case OciVersion
                case Paused
                case Pid
                case Restarting
                case RestoreLog
                case Restored
                case RestoredAt
                case Running
                case StartedAt
                case Status
                case StoppedByUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectDevice`.
        internal struct InspectDevice: Codable, Hashable, Sendable {
            /// CgroupPermissions is the permissions of the mounted device.
            /// Presently not populated.
            /// TODO.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectDevice/CgroupPermissions`.
            internal var CgroupPermissions: Swift.String?
            /// PathInContainer is the path of the device within the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectDevice/PathInContainer`.
            internal var PathInContainer: Swift.String?
            /// PathOnHost is the path of the device on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectDevice/PathOnHost`.
            internal var PathOnHost: Swift.String?
            /// Creates a new `InspectDevice`.
            ///
            /// - Parameters:
            ///   - CgroupPermissions: CgroupPermissions is the permissions of the mounted device.
            ///   - PathInContainer: PathInContainer is the path of the device within the container.
            ///   - PathOnHost: PathOnHost is the path of the device on the host.
            internal init(
                CgroupPermissions: Swift.String? = nil,
                PathInContainer: Swift.String? = nil,
                PathOnHost: Swift.String? = nil
            ) {
                self.CgroupPermissions = CgroupPermissions
                self.PathInContainer = PathInContainer
                self.PathOnHost = PathOnHost
            }
            internal enum CodingKeys: String, CodingKey {
                case CgroupPermissions
                case PathInContainer
                case PathOnHost
            }
        }
        /// InspectExecProcess contains information about the process in a given exec
        /// session.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectExecProcess`.
        internal struct InspectExecProcess: Codable, Hashable, Sendable {
            /// Arguments are the arguments to the entrypoint command of the exec
            /// session.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecProcess/arguments`.
            internal var arguments: [Swift.String]?
            /// Entrypoint is the entrypoint for the exec session (the command that
            /// will be executed in the container).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecProcess/entrypoint`.
            internal var entrypoint: Swift.String?
            /// Privileged is whether the exec session will be started with elevated
            /// privileges.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecProcess/privileged`.
            internal var privileged: Swift.Bool?
            /// Tty is whether the exec session created a terminal.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecProcess/tty`.
            internal var tty: Swift.Bool?
            /// User is the user the exec session was started as.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecProcess/user`.
            internal var user: Swift.String?
            /// Creates a new `InspectExecProcess`.
            ///
            /// - Parameters:
            ///   - arguments: Arguments are the arguments to the entrypoint command of the exec
            ///   - entrypoint: Entrypoint is the entrypoint for the exec session (the command that
            ///   - privileged: Privileged is whether the exec session will be started with elevated
            ///   - tty: Tty is whether the exec session created a terminal.
            ///   - user: User is the user the exec session was started as.
            internal init(
                arguments: [Swift.String]? = nil,
                entrypoint: Swift.String? = nil,
                privileged: Swift.Bool? = nil,
                tty: Swift.Bool? = nil,
                user: Swift.String? = nil
            ) {
                self.arguments = arguments
                self.entrypoint = entrypoint
                self.privileged = privileged
                self.tty = tty
                self.user = user
            }
            internal enum CodingKeys: String, CodingKey {
                case arguments
                case entrypoint
                case privileged
                case tty
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectExecSession`.
        internal struct InspectExecSession: Codable, Hashable, Sendable {
            /// CanRemove is legacy and used purely for compatibility reasons.
            /// Will always be set to true, unless the exec session is running.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/CanRemove`.
            internal var CanRemove: Swift.Bool?
            /// ContainerID is the ID of the container this exec session is attached
            /// to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/ContainerID`.
            internal var ContainerID: Swift.String?
            /// DetachKeys are the detach keys used by the exec session.
            /// If set to "" the default keys are being used.
            /// Will show "<none>" if no detach keys are set.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/DetachKeys`.
            internal var DetachKeys: Swift.String?
            /// ExitCode is the exit code of the exec session. Will be set to 0 if
            /// the exec session has not yet exited.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// ID is the ID of the exec session.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/ID`.
            internal var ID: Swift.String?
            /// OpenStderr is whether the container's STDERR stream will be attached.
            /// Always set to true if the exec session created a TTY.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/OpenStderr`.
            internal var OpenStderr: Swift.Bool?
            /// OpenStdin is whether the container's STDIN stream will be attached
            /// to.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/OpenStdin`.
            internal var OpenStdin: Swift.Bool?
            /// OpenStdout is whether the container's STDOUT stream will be attached.
            /// Always set to true if the exec session created a TTY.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/OpenStdout`.
            internal var OpenStdout: Swift.Bool?
            /// Pid is the PID of the exec session's process.
            /// Will be set to 0 if the exec session is not running.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/Pid`.
            internal var Pid: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/ProcessConfig`.
            internal var ProcessConfig: Components.Schemas.InspectExecProcess?
            /// Running is whether the exec session is running.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectExecSession/Running`.
            internal var Running: Swift.Bool?
            /// Creates a new `InspectExecSession`.
            ///
            /// - Parameters:
            ///   - CanRemove: CanRemove is legacy and used purely for compatibility reasons.
            ///   - ContainerID: ContainerID is the ID of the container this exec session is attached
            ///   - DetachKeys: DetachKeys are the detach keys used by the exec session.
            ///   - ExitCode: ExitCode is the exit code of the exec session. Will be set to 0 if
            ///   - ID: ID is the ID of the exec session.
            ///   - OpenStderr: OpenStderr is whether the container's STDERR stream will be attached.
            ///   - OpenStdin: OpenStdin is whether the container's STDIN stream will be attached
            ///   - OpenStdout: OpenStdout is whether the container's STDOUT stream will be attached.
            ///   - Pid: Pid is the PID of the exec session's process.
            ///   - ProcessConfig:
            ///   - Running: Running is whether the exec session is running.
            internal init(
                CanRemove: Swift.Bool? = nil,
                ContainerID: Swift.String? = nil,
                DetachKeys: Swift.String? = nil,
                ExitCode: Swift.Int64? = nil,
                ID: Swift.String? = nil,
                OpenStderr: Swift.Bool? = nil,
                OpenStdin: Swift.Bool? = nil,
                OpenStdout: Swift.Bool? = nil,
                Pid: Swift.Int64? = nil,
                ProcessConfig: Components.Schemas.InspectExecProcess? = nil,
                Running: Swift.Bool? = nil
            ) {
                self.CanRemove = CanRemove
                self.ContainerID = ContainerID
                self.DetachKeys = DetachKeys
                self.ExitCode = ExitCode
                self.ID = ID
                self.OpenStderr = OpenStderr
                self.OpenStdin = OpenStdin
                self.OpenStdout = OpenStdout
                self.Pid = Pid
                self.ProcessConfig = ProcessConfig
                self.Running = Running
            }
            internal enum CodingKeys: String, CodingKey {
                case CanRemove
                case ContainerID
                case DetachKeys
                case ExitCode
                case ID
                case OpenStderr
                case OpenStdin
                case OpenStdout
                case Pid
                case ProcessConfig
                case Running
            }
        }
        /// InspectHostPort provides information on a port on the host that a container's
        /// port is bound to.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectHostPort`.
        internal struct InspectHostPort: Codable, Hashable, Sendable {
            /// IP on the host we are bound to. "" if not specified (binding to all
            /// IPs).
            ///
            /// - Remark: Generated from `#/components/schemas/InspectHostPort/HostIp`.
            internal var HostIp: Swift.String?
            /// Port on the host we are bound to. No special formatting - just an
            /// integer stuffed into a string.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectHostPort/HostPort`.
            internal var HostPort: Swift.String?
            /// Creates a new `InspectHostPort`.
            ///
            /// - Parameters:
            ///   - HostIp: IP on the host we are bound to. "" if not specified (binding to all
            ///   - HostPort: Port on the host we are bound to. No special formatting - just an
            internal init(
                HostIp: Swift.String? = nil,
                HostPort: Swift.String? = nil
            ) {
                self.HostIp = HostIp
                self.HostPort = HostPort
            }
            internal enum CodingKeys: String, CodingKey {
                case HostIp
                case HostPort
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectIDMappings`.
        internal struct InspectIDMappings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InspectIDMappings/GidMap`.
            internal var GidMap: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectIDMappings/UidMap`.
            internal var UidMap: [Swift.String]?
            /// Creates a new `InspectIDMappings`.
            ///
            /// - Parameters:
            ///   - GidMap:
            ///   - UidMap:
            internal init(
                GidMap: [Swift.String]? = nil,
                UidMap: [Swift.String]? = nil
            ) {
                self.GidMap = GidMap
                self.UidMap = UidMap
            }
            internal enum CodingKeys: String, CodingKey {
                case GidMap
                case UidMap
            }
        }
        /// InspectLogConfig holds information about a container's configured log driver
        ///
        /// - Remark: Generated from `#/components/schemas/InspectLogConfig`.
        internal struct InspectLogConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Config`.
            internal struct ConfigPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ConfigPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Config`.
            internal var Config: Components.Schemas.InspectLogConfig.ConfigPayload?
            /// Path specifies a path to the log file
            ///
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Path`.
            internal var Path: Swift.String?
            /// Size specifies a maximum size of the container log
            ///
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Size`.
            internal var Size: Swift.String?
            /// Tag specifies a custom log tag for the container
            ///
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Tag`.
            internal var Tag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectLogConfig/Type`.
            internal var _Type: Swift.String?
            /// Creates a new `InspectLogConfig`.
            ///
            /// - Parameters:
            ///   - Config:
            ///   - Path: Path specifies a path to the log file
            ///   - Size: Size specifies a maximum size of the container log
            ///   - Tag: Tag specifies a custom log tag for the container
            ///   - _Type:
            internal init(
                Config: Components.Schemas.InspectLogConfig.ConfigPayload? = nil,
                Path: Swift.String? = nil,
                Size: Swift.String? = nil,
                Tag: Swift.String? = nil,
                _Type: Swift.String? = nil
            ) {
                self.Config = Config
                self.Path = Path
                self.Size = Size
                self.Tag = Tag
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Config
                case Path
                case Size
                case Tag
                case _Type = "Type"
            }
        }
        /// InspectMount provides a record of a single mount in a container. It contains
        /// fields for both named and normal volumes. Only user-specified volumes will be
        /// included, and tmpfs volumes are not included even if the user specified them.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectMount`.
        internal struct InspectMount: Codable, Hashable, Sendable {
            /// The destination directory for the volume. Specified as a path within
            /// the container, as it would be passed into the OCI runtime.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Destination`.
            internal var Destination: Swift.String?
            /// The driver used for the named volume. Empty for bind mounts.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Driver`.
            internal var Driver: Swift.String?
            /// Contains SELinux :z/:Z mount options. Unclear what, if anything, else
            /// goes in here.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Mode`.
            internal var Mode: Swift.String?
            /// The name of the volume. Empty for bind mounts.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Name`.
            internal var Name: Swift.String?
            /// All remaining mount options. Additional data, not present in the
            /// original output.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Options`.
            internal var Options: [Swift.String]?
            /// Mount propagation for the mount. Can be empty if not specified, but
            /// is always printed - no omitempty.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Propagation`.
            internal var Propagation: Swift.String?
            /// Whether the volume is read-write
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/RW`.
            internal var RW: Swift.Bool?
            /// The source directory for the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Source`.
            internal var Source: Swift.String?
            /// SubPath object from the volume. Specified as a path within
            /// the source volume to be mounted at the Destination.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/SubPath`.
            internal var SubPath: Swift.String?
            /// Whether the mount is a volume or bind mount. Allowed values are
            /// "volume" and "bind".
            ///
            /// - Remark: Generated from `#/components/schemas/InspectMount/Type`.
            internal var _Type: Swift.String?
            /// Creates a new `InspectMount`.
            ///
            /// - Parameters:
            ///   - Destination: The destination directory for the volume. Specified as a path within
            ///   - Driver: The driver used for the named volume. Empty for bind mounts.
            ///   - Mode: Contains SELinux :z/:Z mount options. Unclear what, if anything, else
            ///   - Name: The name of the volume. Empty for bind mounts.
            ///   - Options: All remaining mount options. Additional data, not present in the
            ///   - Propagation: Mount propagation for the mount. Can be empty if not specified, but
            ///   - RW: Whether the volume is read-write
            ///   - Source: The source directory for the volume.
            ///   - SubPath: SubPath object from the volume. Specified as a path within
            ///   - _Type: Whether the mount is a volume or bind mount. Allowed values are
            internal init(
                Destination: Swift.String? = nil,
                Driver: Swift.String? = nil,
                Mode: Swift.String? = nil,
                Name: Swift.String? = nil,
                Options: [Swift.String]? = nil,
                Propagation: Swift.String? = nil,
                RW: Swift.Bool? = nil,
                Source: Swift.String? = nil,
                SubPath: Swift.String? = nil,
                _Type: Swift.String? = nil
            ) {
                self.Destination = Destination
                self.Driver = Driver
                self.Mode = Mode
                self.Name = Name
                self.Options = Options
                self.Propagation = Propagation
                self.RW = RW
                self.Source = Source
                self.SubPath = SubPath
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Destination
                case Driver
                case Mode
                case Name
                case Options
                case Propagation
                case RW
                case Source
                case SubPath
                case _Type = "Type"
            }
        }
        /// InspectNetworkSettings holds information about the network settings of the
        /// container.
        /// Many fields are maintained only for compatibility with `docker inspect` and
        /// are unused within Libpod.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings`.
        internal struct InspectNetworkSettings: Codable, Hashable, Sendable {
            /// AdditionalMacAddresses is a set of additional MAC Addresses beyond
            /// the first. CNI may configure more than one interface for a single
            /// network, which can cause this.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/AdditionalMACAddresses`.
            internal var AdditionalMACAddresses: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Bridge`.
            internal var Bridge: Swift.String?
            /// EndpointID is unused, maintained exclusively for compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/EndpointID`.
            internal var EndpointID: Swift.String?
            /// Gateway is the IP address of the gateway this network will use.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Gateway`.
            internal var Gateway: Swift.String?
            /// GlobalIPv6Address is the global-scope IPv6 Address for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/GlobalIPv6Address`.
            internal var GlobalIPv6Address: Swift.String?
            /// GlobalIPv6PrefixLen is the length of the subnet mask of this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/GlobalIPv6PrefixLen`.
            internal var GlobalIPv6PrefixLen: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/HairpinMode`.
            internal var HairpinMode: Swift.Bool?
            /// IPAddress is the IP address for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/IPAddress`.
            internal var IPAddress: Swift.String?
            /// IPPrefixLen is the length of the subnet mask of this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/IPPrefixLen`.
            internal var IPPrefixLen: Swift.Int64?
            /// IPv6Gateway is the IPv6 gateway this network will use.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/IPv6Gateway`.
            internal var IPv6Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/LinkLocalIPv6Address`.
            internal var LinkLocalIPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/LinkLocalIPv6PrefixLen`.
            internal var LinkLocalIPv6PrefixLen: Swift.Int64?
            /// MacAddress is the MAC address for the interface in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/MacAddress`.
            internal var MacAddress: Swift.String?
            /// Networks contains information on non-default networks this
            /// container has joined.
            /// It is a map of network name to network information.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.InspectAdditionalNetwork]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.InspectAdditionalNetwork] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Networks contains information on non-default networks this
            /// container has joined.
            /// It is a map of network name to network information.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Networks`.
            internal var Networks: Components.Schemas.InspectNetworkSettings.NetworksPayload?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Ports`.
            internal struct PortsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Components.Schemas.InspectHostPort]]
                /// Creates a new `PortsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Components.Schemas.InspectHostPort]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/Ports`.
            internal var Ports: Components.Schemas.InspectNetworkSettings.PortsPayload?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/SandboxID`.
            internal var SandboxID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/SandboxKey`.
            internal var SandboxKey: Swift.String?
            /// SecondaryIPAddresses is a list of extra IP Addresses that the
            /// container has been assigned in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/SecondaryIPAddresses`.
            internal var SecondaryIPAddresses: [Components.Schemas.Address]?
            /// SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the
            /// container has been assigned in this network.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectNetworkSettings/SecondaryIPv6Addresses`.
            internal var SecondaryIPv6Addresses: [Components.Schemas.Address]?
            /// Creates a new `InspectNetworkSettings`.
            ///
            /// - Parameters:
            ///   - AdditionalMACAddresses: AdditionalMacAddresses is a set of additional MAC Addresses beyond
            ///   - Bridge:
            ///   - EndpointID: EndpointID is unused, maintained exclusively for compatibility.
            ///   - Gateway: Gateway is the IP address of the gateway this network will use.
            ///   - GlobalIPv6Address: GlobalIPv6Address is the global-scope IPv6 Address for this network.
            ///   - GlobalIPv6PrefixLen: GlobalIPv6PrefixLen is the length of the subnet mask of this network.
            ///   - HairpinMode:
            ///   - IPAddress: IPAddress is the IP address for this network.
            ///   - IPPrefixLen: IPPrefixLen is the length of the subnet mask of this network.
            ///   - IPv6Gateway: IPv6Gateway is the IPv6 gateway this network will use.
            ///   - LinkLocalIPv6Address:
            ///   - LinkLocalIPv6PrefixLen:
            ///   - MacAddress: MacAddress is the MAC address for the interface in this network.
            ///   - Networks: Networks contains information on non-default networks this
            ///   - Ports:
            ///   - SandboxID:
            ///   - SandboxKey:
            ///   - SecondaryIPAddresses: SecondaryIPAddresses is a list of extra IP Addresses that the
            ///   - SecondaryIPv6Addresses: SecondaryIPv6Addresses is a list of extra IPv6 Addresses that the
            internal init(
                AdditionalMACAddresses: [Swift.String]? = nil,
                Bridge: Swift.String? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int64? = nil,
                HairpinMode: Swift.Bool? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int64? = nil,
                IPv6Gateway: Swift.String? = nil,
                LinkLocalIPv6Address: Swift.String? = nil,
                LinkLocalIPv6PrefixLen: Swift.Int64? = nil,
                MacAddress: Swift.String? = nil,
                Networks: Components.Schemas.InspectNetworkSettings.NetworksPayload? = nil,
                Ports: Components.Schemas.InspectNetworkSettings.PortsPayload? = nil,
                SandboxID: Swift.String? = nil,
                SandboxKey: Swift.String? = nil,
                SecondaryIPAddresses: [Components.Schemas.Address]? = nil,
                SecondaryIPv6Addresses: [Components.Schemas.Address]? = nil
            ) {
                self.AdditionalMACAddresses = AdditionalMACAddresses
                self.Bridge = Bridge
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.HairpinMode = HairpinMode
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.LinkLocalIPv6Address = LinkLocalIPv6Address
                self.LinkLocalIPv6PrefixLen = LinkLocalIPv6PrefixLen
                self.MacAddress = MacAddress
                self.Networks = Networks
                self.Ports = Ports
                self.SandboxID = SandboxID
                self.SandboxKey = SandboxKey
                self.SecondaryIPAddresses = SecondaryIPAddresses
                self.SecondaryIPv6Addresses = SecondaryIPv6Addresses
            }
            internal enum CodingKeys: String, CodingKey {
                case AdditionalMACAddresses
                case Bridge
                case EndpointID
                case Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case HairpinMode
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case LinkLocalIPv6Address
                case LinkLocalIPv6PrefixLen
                case MacAddress
                case Networks
                case Ports
                case SandboxID
                case SandboxKey
                case SecondaryIPAddresses
                case SecondaryIPv6Addresses
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectPodContainerInfo`.
        internal struct InspectPodContainerInfo: Codable, Hashable, Sendable {
            /// ID is the ID of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodContainerInfo/Id`.
            internal var Id: Swift.String?
            /// Name is the name of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodContainerInfo/Name`.
            internal var Name: Swift.String?
            /// State is the current status of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodContainerInfo/State`.
            internal var State: Swift.String?
            /// Creates a new `InspectPodContainerInfo`.
            ///
            /// - Parameters:
            ///   - Id: ID is the ID of the container.
            ///   - Name: Name is the name of the container.
            ///   - State: State is the current status of the container.
            internal init(
                Id: Swift.String? = nil,
                Name: Swift.String? = nil,
                State: Swift.String? = nil
            ) {
                self.Id = Id
                self.Name = Name
                self.State = State
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case Name
                case State
            }
        }
        /// InspectPodData contains detailed information on a pod's configuration and
        /// state. It is used as the output of Inspect on pods.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectPodData`.
        internal struct InspectPodData: Codable, Hashable, Sendable {
            /// CgroupParent is the parent of the pod's Cgroup.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// CgroupPath is the path to the pod's Cgroup.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/CgroupPath`.
            internal var CgroupPath: Swift.String?
            /// Containers gives a brief summary of all containers in the pod and
            /// their current status.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Containers`.
            internal var Containers: [Components.Schemas.InspectPodContainerInfo]?
            /// CreateCgroup is whether this pod will create its own Cgroup to group
            /// containers under.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/CreateCgroup`.
            internal var CreateCgroup: Swift.Bool?
            /// CreateCommand is the full command plus arguments of the process the
            /// container has been created with.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/CreateCommand`.
            internal var CreateCommand: [Swift.String]?
            /// CreateInfra is whether this pod will create an infra container to
            /// share namespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/CreateInfra`.
            internal var CreateInfra: Swift.Bool?
            /// Created is the time when the pod was created.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Created`.
            internal var Created: Foundation.Date?
            /// ExitPolicy of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/ExitPolicy`.
            internal var ExitPolicy: Swift.String?
            /// Hostname is the hostname that the pod will set.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Hostname`.
            internal var Hostname: Swift.String?
            /// ID is the ID of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InspectPodData/InfraConfig`.
            internal var InfraConfig: Components.Schemas.InspectPodInfraConfig?
            /// InfraContainerID is the ID of the pod's infra container, if one is
            /// present.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/InfraContainerID`.
            internal var InfraContainerID: Swift.String?
            /// Labels is a set of key-value labels that have been applied to the
            /// pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels is a set of key-value labels that have been applied to the
            /// pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Labels`.
            internal var Labels: Components.Schemas.InspectPodData.LabelsPayload?
            /// Number of the pod's Libpod lock.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/LockNumber`.
            internal var LockNumber: Swift.Int?
            /// Name is the name of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Name`.
            internal var Name: Swift.String?
            /// Namespace is the Libpod namespace the pod is placed in.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/Namespace`.
            internal var Namespace: Swift.String?
            /// NumContainers is the number of containers in the pod, including the
            /// infra container.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/NumContainers`.
            internal var NumContainers: Swift.Int?
            /// RestartPolicy of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/RestartPolicy`.
            internal var RestartPolicy: Swift.String?
            /// SharedNamespaces contains a list of namespaces that will be shared by
            /// containers within the pod. Can only be set if CreateInfra is true.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/SharedNamespaces`.
            internal var SharedNamespaces: [Swift.String]?
            /// State represents the current state of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/State`.
            internal var State: Swift.String?
            /// BlkioWeight contains the blkio weight limit for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/blkio_weight`.
            internal var blkio_weight: Swift.Int?
            /// BlkioWeightDevice contains the blkio weight device limits for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/blkio_weight_device`.
            internal var blkio_weight_device: [Components.Schemas.InspectBlkioWeightDevice]?
            /// CPUPeriod contains the CPU period of the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/cpu_period`.
            internal var cpu_period: Swift.Int?
            /// CPUQuota contains the CPU quota of the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/cpu_quota`.
            internal var cpu_quota: Swift.Int64?
            /// CPUShares contains the cpu shares for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/cpu_shares`.
            internal var cpu_shares: Swift.Int?
            /// CPUSetCPUs contains linux specific CPU data for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/cpuset_cpus`.
            internal var cpuset_cpus: Swift.String?
            /// CPUSetMems contains linux specific CPU data for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/cpuset_mems`.
            internal var cpuset_mems: Swift.String?
            /// BlkioDeviceReadBps contains the Read/Access limit for the pod's devices
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/device_read_bps`.
            internal var device_read_bps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// BlkioDeviceReadBps contains the Read/Access limit for the pod's devices
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/device_write_bps`.
            internal var device_write_bps: [Components.Schemas.InspectBlkioThrottleDevice]?
            /// Devices contains the specified host devices
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/devices`.
            internal var devices: [Components.Schemas.InspectDevice]?
            /// MemoryLimit contains the specified cgroup memory limit for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/memory_limit`.
            internal var memory_limit: Swift.Int?
            /// MemorySwap contains the specified memory swap limit for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/memory_swap`.
            internal var memory_swap: Swift.Int?
            /// Mounts contains volume related information for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/mounts`.
            internal var mounts: [Components.Schemas.InspectMount]?
            /// SecurityOpt contains the specified security labels and related SELinux information
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/security_opt`.
            internal var security_opt: [Swift.String]?
            /// VolumesFrom contains the containers that the pod inherits mounts from
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodData/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// Creates a new `InspectPodData`.
            ///
            /// - Parameters:
            ///   - CgroupParent: CgroupParent is the parent of the pod's Cgroup.
            ///   - CgroupPath: CgroupPath is the path to the pod's Cgroup.
            ///   - Containers: Containers gives a brief summary of all containers in the pod and
            ///   - CreateCgroup: CreateCgroup is whether this pod will create its own Cgroup to group
            ///   - CreateCommand: CreateCommand is the full command plus arguments of the process the
            ///   - CreateInfra: CreateInfra is whether this pod will create an infra container to
            ///   - Created: Created is the time when the pod was created.
            ///   - ExitPolicy: ExitPolicy of the pod.
            ///   - Hostname: Hostname is the hostname that the pod will set.
            ///   - Id: ID is the ID of the pod.
            ///   - InfraConfig:
            ///   - InfraContainerID: InfraContainerID is the ID of the pod's infra container, if one is
            ///   - Labels: Labels is a set of key-value labels that have been applied to the
            ///   - LockNumber: Number of the pod's Libpod lock.
            ///   - Name: Name is the name of the pod.
            ///   - Namespace: Namespace is the Libpod namespace the pod is placed in.
            ///   - NumContainers: NumContainers is the number of containers in the pod, including the
            ///   - RestartPolicy: RestartPolicy of the pod.
            ///   - SharedNamespaces: SharedNamespaces contains a list of namespaces that will be shared by
            ///   - State: State represents the current state of the pod.
            ///   - blkio_weight: BlkioWeight contains the blkio weight limit for the pod
            ///   - blkio_weight_device: BlkioWeightDevice contains the blkio weight device limits for the pod
            ///   - cpu_period: CPUPeriod contains the CPU period of the pod
            ///   - cpu_quota: CPUQuota contains the CPU quota of the pod
            ///   - cpu_shares: CPUShares contains the cpu shares for the pod
            ///   - cpuset_cpus: CPUSetCPUs contains linux specific CPU data for the pod
            ///   - cpuset_mems: CPUSetMems contains linux specific CPU data for the pod
            ///   - device_read_bps: BlkioDeviceReadBps contains the Read/Access limit for the pod's devices
            ///   - device_write_bps: BlkioDeviceReadBps contains the Read/Access limit for the pod's devices
            ///   - devices: Devices contains the specified host devices
            ///   - memory_limit: MemoryLimit contains the specified cgroup memory limit for the pod
            ///   - memory_swap: MemorySwap contains the specified memory swap limit for the pod
            ///   - mounts: Mounts contains volume related information for the pod
            ///   - security_opt: SecurityOpt contains the specified security labels and related SELinux information
            ///   - volumes_from: VolumesFrom contains the containers that the pod inherits mounts from
            internal init(
                CgroupParent: Swift.String? = nil,
                CgroupPath: Swift.String? = nil,
                Containers: [Components.Schemas.InspectPodContainerInfo]? = nil,
                CreateCgroup: Swift.Bool? = nil,
                CreateCommand: [Swift.String]? = nil,
                CreateInfra: Swift.Bool? = nil,
                Created: Foundation.Date? = nil,
                ExitPolicy: Swift.String? = nil,
                Hostname: Swift.String? = nil,
                Id: Swift.String? = nil,
                InfraConfig: Components.Schemas.InspectPodInfraConfig? = nil,
                InfraContainerID: Swift.String? = nil,
                Labels: Components.Schemas.InspectPodData.LabelsPayload? = nil,
                LockNumber: Swift.Int? = nil,
                Name: Swift.String? = nil,
                Namespace: Swift.String? = nil,
                NumContainers: Swift.Int? = nil,
                RestartPolicy: Swift.String? = nil,
                SharedNamespaces: [Swift.String]? = nil,
                State: Swift.String? = nil,
                blkio_weight: Swift.Int? = nil,
                blkio_weight_device: [Components.Schemas.InspectBlkioWeightDevice]? = nil,
                cpu_period: Swift.Int? = nil,
                cpu_quota: Swift.Int64? = nil,
                cpu_shares: Swift.Int? = nil,
                cpuset_cpus: Swift.String? = nil,
                cpuset_mems: Swift.String? = nil,
                device_read_bps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                device_write_bps: [Components.Schemas.InspectBlkioThrottleDevice]? = nil,
                devices: [Components.Schemas.InspectDevice]? = nil,
                memory_limit: Swift.Int? = nil,
                memory_swap: Swift.Int? = nil,
                mounts: [Components.Schemas.InspectMount]? = nil,
                security_opt: [Swift.String]? = nil,
                volumes_from: [Swift.String]? = nil
            ) {
                self.CgroupParent = CgroupParent
                self.CgroupPath = CgroupPath
                self.Containers = Containers
                self.CreateCgroup = CreateCgroup
                self.CreateCommand = CreateCommand
                self.CreateInfra = CreateInfra
                self.Created = Created
                self.ExitPolicy = ExitPolicy
                self.Hostname = Hostname
                self.Id = Id
                self.InfraConfig = InfraConfig
                self.InfraContainerID = InfraContainerID
                self.Labels = Labels
                self.LockNumber = LockNumber
                self.Name = Name
                self.Namespace = Namespace
                self.NumContainers = NumContainers
                self.RestartPolicy = RestartPolicy
                self.SharedNamespaces = SharedNamespaces
                self.State = State
                self.blkio_weight = blkio_weight
                self.blkio_weight_device = blkio_weight_device
                self.cpu_period = cpu_period
                self.cpu_quota = cpu_quota
                self.cpu_shares = cpu_shares
                self.cpuset_cpus = cpuset_cpus
                self.cpuset_mems = cpuset_mems
                self.device_read_bps = device_read_bps
                self.device_write_bps = device_write_bps
                self.devices = devices
                self.memory_limit = memory_limit
                self.memory_swap = memory_swap
                self.mounts = mounts
                self.security_opt = security_opt
                self.volumes_from = volumes_from
            }
            internal enum CodingKeys: String, CodingKey {
                case CgroupParent
                case CgroupPath
                case Containers
                case CreateCgroup
                case CreateCommand
                case CreateInfra
                case Created
                case ExitPolicy
                case Hostname
                case Id
                case InfraConfig
                case InfraContainerID
                case Labels
                case LockNumber
                case Name
                case Namespace
                case NumContainers
                case RestartPolicy
                case SharedNamespaces
                case State
                case blkio_weight
                case blkio_weight_device
                case cpu_period
                case cpu_quota
                case cpu_shares
                case cpuset_cpus
                case cpuset_mems
                case device_read_bps
                case device_write_bps
                case devices
                case memory_limit
                case memory_swap
                case mounts
                case security_opt
                case volumes_from
            }
        }
        /// InspectPodInfraConfig contains the configuration of the pod's infra
        /// container.
        ///
        /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig`.
        internal struct InspectPodInfraConfig: Codable, Hashable, Sendable {
            /// DNSOption is a set of DNS options that will be used by the infra
            /// container's resolv.conf and shared with the remainder of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/DNSOption`.
            internal var DNSOption: [Swift.String]?
            /// DNSSearch is a set of DNS search domains that will be used by the
            /// infra container's resolv.conf and shared with the remainder of the
            /// pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/DNSSearch`.
            internal var DNSSearch: [Swift.String]?
            /// DNSServer is a set of DNS Servers that will be used by the infra
            /// container's resolv.conf and shared with the remainder of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/DNSServer`.
            internal var DNSServer: [Swift.String]?
            /// HostAdd adds a number of hosts to the infra container's resolv.conf
            /// which will be shared with the rest of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/HostAdd`.
            internal var HostAdd: [Swift.String]?
            /// HostNetwork is whether the infra container (and thus the whole pod)
            /// will use the host's network and not create a network namespace.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/HostNetwork`.
            internal var HostNetwork: Swift.Bool?
            /// HostsFile is the base file to create the `/etc/hosts` file inside the infra container
            /// which will be shared with the rest of the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/HostsFile`.
            internal var HostsFile: Swift.String?
            /// NetworkOptions are additional options for each network
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/NetworkOptions`.
            internal struct NetworkOptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `NetworkOptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/NetworkOptions`.
            internal var NetworkOptions: Components.Schemas.InspectPodInfraConfig.NetworkOptionsPayload?
            /// Networks is a list of networks the pod will join.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/Networks`.
            internal var Networks: [Swift.String]?
            /// NoManageHostname indicates that the pod will not manage /etc/hostname
            /// and instead each container will handle their own.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/NoManageHostname`.
            internal var NoManageHostname: Swift.Bool?
            /// NoManageHosts indicates that the pod will not manage /etc/hosts and
            /// instead each container will handle their own.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/NoManageHosts`.
            internal var NoManageHosts: Swift.Bool?
            /// NoManageResolvConf indicates that the pod will not manage resolv.conf
            /// and instead each container will handle their own.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/NoManageResolvConf`.
            internal var NoManageResolvConf: Swift.Bool?
            /// PortBindings are ports that will be forwarded to the infra container
            /// and then shared with the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/PortBindings`.
            internal struct PortBindingsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Components.Schemas.InspectHostPort]]
                /// Creates a new `PortBindingsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Components.Schemas.InspectHostPort]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// PortBindings are ports that will be forwarded to the infra container
            /// and then shared with the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/PortBindings`.
            internal var PortBindings: Components.Schemas.InspectPodInfraConfig.PortBindingsPayload?
            /// StaticIP is a static IPv4 that will be assigned to the infra
            /// container and then used by the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/StaticIP`.
            internal var StaticIP: Swift.String?
            /// StaticMAC is a static MAC address that will be assigned to the infra
            /// container and then used by the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/StaticMAC`.
            internal var StaticMAC: Swift.String?
            /// CPUPeriod contains the CPU period of the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/cpu_period`.
            internal var cpu_period: Swift.Int?
            /// CPUQuota contains the CPU quota of the pod
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/cpu_quota`.
            internal var cpu_quota: Swift.Int64?
            /// CPUSetCPUs contains linux specific CPU data for the container
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/cpuset_cpus`.
            internal var cpuset_cpus: Swift.String?
            /// Pid is the PID namespace mode of the pod's infra container
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/pid_ns`.
            internal var pid_ns: Swift.String?
            /// UserNS is the usernamespace that all the containers in the pod will join.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/userns`.
            internal var userns: Swift.String?
            /// UtsNS is the uts namespace that all containers in the pod will join
            ///
            /// - Remark: Generated from `#/components/schemas/InspectPodInfraConfig/uts_ns`.
            internal var uts_ns: Swift.String?
            /// Creates a new `InspectPodInfraConfig`.
            ///
            /// - Parameters:
            ///   - DNSOption: DNSOption is a set of DNS options that will be used by the infra
            ///   - DNSSearch: DNSSearch is a set of DNS search domains that will be used by the
            ///   - DNSServer: DNSServer is a set of DNS Servers that will be used by the infra
            ///   - HostAdd: HostAdd adds a number of hosts to the infra container's resolv.conf
            ///   - HostNetwork: HostNetwork is whether the infra container (and thus the whole pod)
            ///   - HostsFile: HostsFile is the base file to create the `/etc/hosts` file inside the infra container
            ///   - NetworkOptions: NetworkOptions are additional options for each network
            ///   - Networks: Networks is a list of networks the pod will join.
            ///   - NoManageHostname: NoManageHostname indicates that the pod will not manage /etc/hostname
            ///   - NoManageHosts: NoManageHosts indicates that the pod will not manage /etc/hosts and
            ///   - NoManageResolvConf: NoManageResolvConf indicates that the pod will not manage resolv.conf
            ///   - PortBindings: PortBindings are ports that will be forwarded to the infra container
            ///   - StaticIP: StaticIP is a static IPv4 that will be assigned to the infra
            ///   - StaticMAC: StaticMAC is a static MAC address that will be assigned to the infra
            ///   - cpu_period: CPUPeriod contains the CPU period of the pod
            ///   - cpu_quota: CPUQuota contains the CPU quota of the pod
            ///   - cpuset_cpus: CPUSetCPUs contains linux specific CPU data for the container
            ///   - pid_ns: Pid is the PID namespace mode of the pod's infra container
            ///   - userns: UserNS is the usernamespace that all the containers in the pod will join.
            ///   - uts_ns: UtsNS is the uts namespace that all containers in the pod will join
            internal init(
                DNSOption: [Swift.String]? = nil,
                DNSSearch: [Swift.String]? = nil,
                DNSServer: [Swift.String]? = nil,
                HostAdd: [Swift.String]? = nil,
                HostNetwork: Swift.Bool? = nil,
                HostsFile: Swift.String? = nil,
                NetworkOptions: Components.Schemas.InspectPodInfraConfig.NetworkOptionsPayload? = nil,
                Networks: [Swift.String]? = nil,
                NoManageHostname: Swift.Bool? = nil,
                NoManageHosts: Swift.Bool? = nil,
                NoManageResolvConf: Swift.Bool? = nil,
                PortBindings: Components.Schemas.InspectPodInfraConfig.PortBindingsPayload? = nil,
                StaticIP: Swift.String? = nil,
                StaticMAC: Swift.String? = nil,
                cpu_period: Swift.Int? = nil,
                cpu_quota: Swift.Int64? = nil,
                cpuset_cpus: Swift.String? = nil,
                pid_ns: Swift.String? = nil,
                userns: Swift.String? = nil,
                uts_ns: Swift.String? = nil
            ) {
                self.DNSOption = DNSOption
                self.DNSSearch = DNSSearch
                self.DNSServer = DNSServer
                self.HostAdd = HostAdd
                self.HostNetwork = HostNetwork
                self.HostsFile = HostsFile
                self.NetworkOptions = NetworkOptions
                self.Networks = Networks
                self.NoManageHostname = NoManageHostname
                self.NoManageHosts = NoManageHosts
                self.NoManageResolvConf = NoManageResolvConf
                self.PortBindings = PortBindings
                self.StaticIP = StaticIP
                self.StaticMAC = StaticMAC
                self.cpu_period = cpu_period
                self.cpu_quota = cpu_quota
                self.cpuset_cpus = cpuset_cpus
                self.pid_ns = pid_ns
                self.userns = userns
                self.uts_ns = uts_ns
            }
            internal enum CodingKeys: String, CodingKey {
                case DNSOption
                case DNSSearch
                case DNSServer
                case HostAdd
                case HostNetwork
                case HostsFile
                case NetworkOptions
                case Networks
                case NoManageHostname
                case NoManageHosts
                case NoManageResolvConf
                case PortBindings
                case StaticIP
                case StaticMAC
                case cpu_period
                case cpu_quota
                case cpuset_cpus
                case pid_ns
                case userns
                case uts_ns
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectRestartPolicy`.
        internal struct InspectRestartPolicy: Codable, Hashable, Sendable {
            /// MaximumRetryCount is the maximum number of retries allowed if the
            /// "on-failure" restart policy is in use. Not used if "on-failure" is
            /// not set.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectRestartPolicy/MaximumRetryCount`.
            internal var MaximumRetryCount: Swift.Int?
            /// Name contains the container's restart policy.
            /// Allowable values are "no" or "" (take no action),
            /// "on-failure" (restart on non-zero exit code, with an optional max
            /// retry count), and "always" (always restart on container stop, unless
            /// explicitly requested by API).
            /// Note that this is NOT actually a name of any sort - the poor naming
            /// is for Docker compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectRestartPolicy/Name`.
            internal var Name: Swift.String?
            /// Creates a new `InspectRestartPolicy`.
            ///
            /// - Parameters:
            ///   - MaximumRetryCount: MaximumRetryCount is the maximum number of retries allowed if the
            ///   - Name: Name contains the container's restart policy.
            internal init(
                MaximumRetryCount: Swift.Int? = nil,
                Name: Swift.String? = nil
            ) {
                self.MaximumRetryCount = MaximumRetryCount
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case MaximumRetryCount
                case Name
            }
        }
        /// InspectSecret contains information on secrets mounted inside the container
        ///
        /// - Remark: Generated from `#/components/schemas/InspectSecret`.
        internal struct InspectSecret: Codable, Hashable, Sendable {
            /// ID is the GID of the mounted secret file
            ///
            /// - Remark: Generated from `#/components/schemas/InspectSecret/GID`.
            internal var GID: Swift.Int?
            /// ID is the ID of the secret
            ///
            /// - Remark: Generated from `#/components/schemas/InspectSecret/ID`.
            internal var ID: Swift.String?
            /// ID is the ID of the mode of the mounted secret file
            ///
            /// - Remark: Generated from `#/components/schemas/InspectSecret/Mode`.
            internal var Mode: Swift.Int?
            /// Name is the name of the secret
            ///
            /// - Remark: Generated from `#/components/schemas/InspectSecret/Name`.
            internal var Name: Swift.String?
            /// ID is the UID of the mounted secret file
            ///
            /// - Remark: Generated from `#/components/schemas/InspectSecret/UID`.
            internal var UID: Swift.Int?
            /// Creates a new `InspectSecret`.
            ///
            /// - Parameters:
            ///   - GID: ID is the GID of the mounted secret file
            ///   - ID: ID is the ID of the secret
            ///   - Mode: ID is the ID of the mode of the mounted secret file
            ///   - Name: Name is the name of the secret
            ///   - UID: ID is the UID of the mounted secret file
            internal init(
                GID: Swift.Int? = nil,
                ID: Swift.String? = nil,
                Mode: Swift.Int? = nil,
                Name: Swift.String? = nil,
                UID: Swift.Int? = nil
            ) {
                self.GID = GID
                self.ID = ID
                self.Mode = Mode
                self.Name = Name
                self.UID = UID
            }
            internal enum CodingKeys: String, CodingKey {
                case GID
                case ID
                case Mode
                case Name
                case UID
            }
        }
        /// - Remark: Generated from `#/components/schemas/InspectUlimit`.
        internal struct InspectUlimit: Codable, Hashable, Sendable {
            /// Hard is the hard limit that will be applied.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectUlimit/Hard`.
            internal var Hard: Swift.Int64?
            /// Name is the name (type) of the ulimit.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectUlimit/Name`.
            internal var Name: Swift.String?
            /// Soft is the soft limit that will be applied.
            ///
            /// - Remark: Generated from `#/components/schemas/InspectUlimit/Soft`.
            internal var Soft: Swift.Int64?
            /// Creates a new `InspectUlimit`.
            ///
            /// - Parameters:
            ///   - Hard: Hard is the hard limit that will be applied.
            ///   - Name: Name is the name (type) of the ulimit.
            ///   - Soft: Soft is the soft limit that will be applied.
            internal init(
                Hard: Swift.Int64? = nil,
                Name: Swift.String? = nil,
                Soft: Swift.Int64? = nil
            ) {
                self.Hard = Hard
                self.Name = Name
                self.Soft = Soft
            }
            internal enum CodingKeys: String, CodingKey {
                case Hard
                case Name
                case Soft
            }
        }
        /// - Remark: Generated from `#/components/schemas/IpcMode`.
        internal typealias IpcMode = Swift.String
        /// Isolation represents the isolation technology of a container. The supported
        /// values are platform specific
        ///
        /// - Remark: Generated from `#/components/schemas/Isolation`.
        internal typealias Isolation = Swift.String
        /// - Remark: Generated from `#/components/schemas/LeaseRange`.
        internal struct LeaseRange: Codable, Hashable, Sendable {
            /// EndIP last IP in the subnet which should be used to assign ips.
            ///
            /// - Remark: Generated from `#/components/schemas/LeaseRange/end_ip`.
            internal var end_ip: Swift.String?
            /// StartIP first IP in the subnet which should be used to assign ips.
            ///
            /// - Remark: Generated from `#/components/schemas/LeaseRange/start_ip`.
            internal var start_ip: Swift.String?
            /// Creates a new `LeaseRange`.
            ///
            /// - Parameters:
            ///   - end_ip: EndIP last IP in the subnet which should be used to assign ips.
            ///   - start_ip: StartIP first IP in the subnet which should be used to assign ips.
            internal init(
                end_ip: Swift.String? = nil,
                start_ip: Swift.String? = nil
            ) {
                self.end_ip = end_ip
                self.start_ip = start_ip
            }
            internal enum CodingKeys: String, CodingKey {
                case end_ip
                case start_ip
            }
        }
        /// - Remark: Generated from `#/components/schemas/LibpodContainersRmReport`.
        internal struct LibpodContainersRmReport: Codable, Hashable, Sendable {
            /// Error which occurred during Rm operation (if any).
            /// This field is optional and may be omitted if no error occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodContainersRmReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LibpodContainersRmReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `LibpodContainersRmReport`.
            ///
            /// - Parameters:
            ///   - Err: Error which occurred during Rm operation (if any).
            ///   - Id:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil
            ) {
                self.Err = Err
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/LibpodImageSummary`.
        internal struct LibpodImageSummary: Codable, Hashable, Sendable {
            /// Podman extensions
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Arch`.
            internal var Arch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Containers`.
            internal var Containers: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Created`.
            internal var Created: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Dangling`.
            internal var Dangling: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Digest`.
            internal var Digest: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/History`.
            internal var History: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Id`.
            internal var Id: Swift.String?
            /// IsManifestList is a ptr so we can distinguish between a true
            /// json empty response and false.  the docker compat side needs to return
            /// empty; where as the libpod side needs a value of true or false
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/IsManifestList`.
            internal var IsManifestList: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Labels`.
            internal var Labels: Components.Schemas.LibpodImageSummary.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Names`.
            internal var Names: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Os`.
            internal var Os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/ParentId`.
            internal var ParentId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/ReadOnly`.
            internal var ReadOnly: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/RepoDigests`.
            internal var RepoDigests: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/RepoTags`.
            internal var RepoTags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/SharedSize`.
            internal var SharedSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/LibpodImageSummary/VirtualSize`.
            internal var VirtualSize: Swift.Int64?
            /// Creates a new `LibpodImageSummary`.
            ///
            /// - Parameters:
            ///   - Arch: Podman extensions
            ///   - Containers:
            ///   - Created:
            ///   - Dangling:
            ///   - Digest:
            ///   - History:
            ///   - Id:
            ///   - IsManifestList: IsManifestList is a ptr so we can distinguish between a true
            ///   - Labels:
            ///   - Names:
            ///   - Os:
            ///   - ParentId:
            ///   - ReadOnly:
            ///   - RepoDigests:
            ///   - RepoTags:
            ///   - SharedSize:
            ///   - Size:
            ///   - VirtualSize:
            internal init(
                Arch: Swift.String? = nil,
                Containers: Swift.Int64? = nil,
                Created: Swift.Int64? = nil,
                Dangling: Swift.Bool? = nil,
                Digest: Swift.String? = nil,
                History: [Swift.String]? = nil,
                Id: Swift.String? = nil,
                IsManifestList: Swift.Bool? = nil,
                Labels: Components.Schemas.LibpodImageSummary.LabelsPayload? = nil,
                Names: [Swift.String]? = nil,
                Os: Swift.String? = nil,
                ParentId: Swift.String? = nil,
                ReadOnly: Swift.Bool? = nil,
                RepoDigests: [Swift.String]? = nil,
                RepoTags: [Swift.String]? = nil,
                SharedSize: Swift.Int64? = nil,
                Size: Swift.Int64? = nil,
                VirtualSize: Swift.Int64? = nil
            ) {
                self.Arch = Arch
                self.Containers = Containers
                self.Created = Created
                self.Dangling = Dangling
                self.Digest = Digest
                self.History = History
                self.Id = Id
                self.IsManifestList = IsManifestList
                self.Labels = Labels
                self.Names = Names
                self.Os = Os
                self.ParentId = ParentId
                self.ReadOnly = ReadOnly
                self.RepoDigests = RepoDigests
                self.RepoTags = RepoTags
                self.SharedSize = SharedSize
                self.Size = Size
                self.VirtualSize = VirtualSize
            }
            internal enum CodingKeys: String, CodingKey {
                case Arch
                case Containers
                case Created
                case Dangling
                case Digest
                case History
                case Id
                case IsManifestList
                case Labels
                case Names
                case Os
                case ParentId
                case ReadOnly
                case RepoDigests
                case RepoTags
                case SharedSize
                case Size
                case VirtualSize
            }
        }
        /// - Remark: Generated from `#/components/schemas/LibpodImagesPullReport`.
        internal struct LibpodImagesPullReport: Codable, Hashable, Sendable {
            /// Error contains text of errors from c/image
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesPullReport/error`.
            internal var error: Swift.String?
            /// ID contains image id (retained for backwards compatibility)
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesPullReport/id`.
            internal var id: Swift.String?
            /// Images contains the ID's of the images pulled
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesPullReport/images`.
            internal var images: [Swift.String]?
            /// Stream used to provide output from c/image
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesPullReport/stream`.
            internal var stream: Swift.String?
            /// Creates a new `LibpodImagesPullReport`.
            ///
            /// - Parameters:
            ///   - error: Error contains text of errors from c/image
            ///   - id: ID contains image id (retained for backwards compatibility)
            ///   - images: Images contains the ID's of the images pulled
            ///   - stream: Stream used to provide output from c/image
            internal init(
                error: Swift.String? = nil,
                id: Swift.String? = nil,
                images: [Swift.String]? = nil,
                stream: Swift.String? = nil
            ) {
                self.error = error
                self.id = id
                self.images = images
                self.stream = stream
            }
            internal enum CodingKeys: String, CodingKey {
                case error
                case id
                case images
                case stream
            }
        }
        /// LibpodImagesRemoveReport is the return type for image removal via the rest
        /// api.
        ///
        /// - Remark: Generated from `#/components/schemas/LibpodImagesRemoveReport`.
        internal struct LibpodImagesRemoveReport: Codable, Hashable, Sendable {
            /// Deleted images.
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesRemoveReport/Deleted`.
            internal var Deleted: [Swift.String]?
            /// Image removal requires is to return data and an error.
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesRemoveReport/Errors`.
            internal var Errors: [Swift.String]?
            /// ExitCode describes the exit codes as described in the `podman rmi`
            /// man page.
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesRemoveReport/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// Untagged images. Can be longer than Deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/LibpodImagesRemoveReport/Untagged`.
            internal var Untagged: [Swift.String]?
            /// Creates a new `LibpodImagesRemoveReport`.
            ///
            /// - Parameters:
            ///   - Deleted: Deleted images.
            ///   - Errors: Image removal requires is to return data and an error.
            ///   - ExitCode: ExitCode describes the exit codes as described in the `podman rmi`
            ///   - Untagged: Untagged images. Can be longer than Deleted.
            internal init(
                Deleted: [Swift.String]? = nil,
                Errors: [Swift.String]? = nil,
                ExitCode: Swift.Int64? = nil,
                Untagged: [Swift.String]? = nil
            ) {
                self.Deleted = Deleted
                self.Errors = Errors
                self.ExitCode = ExitCode
                self.Untagged = Untagged
            }
            internal enum CodingKeys: String, CodingKey {
                case Deleted
                case Errors
                case ExitCode
                case Untagged
            }
        }
        /// Info is the overall struct that describes the host system
        /// running libpod/podman
        ///
        /// - Remark: Generated from `#/components/schemas/LibpodInfo`.
        internal struct LibpodInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/host`.
            internal var host: Components.Schemas.HostInfo?
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/plugins`.
            internal var plugins: Components.Schemas.Plugins?
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/registries`.
            internal struct registriesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `registriesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/registries`.
            internal var registries: Components.Schemas.LibpodInfo.registriesPayload?
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/store`.
            internal var store: Components.Schemas.StoreInfo?
            /// - Remark: Generated from `#/components/schemas/LibpodInfo/version`.
            internal var version: Components.Schemas.Version?
            /// Creates a new `LibpodInfo`.
            ///
            /// - Parameters:
            ///   - host:
            ///   - plugins:
            ///   - registries:
            ///   - store:
            ///   - version:
            internal init(
                host: Components.Schemas.HostInfo? = nil,
                plugins: Components.Schemas.Plugins? = nil,
                registries: Components.Schemas.LibpodInfo.registriesPayload? = nil,
                store: Components.Schemas.StoreInfo? = nil,
                version: Components.Schemas.Version? = nil
            ) {
                self.host = host
                self.plugins = plugins
                self.registries = registries
                self.store = store
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case host
                case plugins
                case registries
                case store
                case version
            }
        }
        /// LinuxBlockIO for Linux cgroup 'blkio' resource management
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxBlockIO`.
        internal struct LinuxBlockIO: Codable, Hashable, Sendable {
            /// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/leafWeight`.
            internal var leafWeight: Swift.Int?
            /// IO read rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/throttleReadBpsDevice`.
            internal var throttleReadBpsDevice: [Components.Schemas.LinuxThrottleDevice]?
            /// IO read rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/throttleReadIOPSDevice`.
            internal var throttleReadIOPSDevice: [Components.Schemas.LinuxThrottleDevice]?
            /// IO write rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/throttleWriteBpsDevice`.
            internal var throttleWriteBpsDevice: [Components.Schemas.LinuxThrottleDevice]?
            /// IO write rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/throttleWriteIOPSDevice`.
            internal var throttleWriteIOPSDevice: [Components.Schemas.LinuxThrottleDevice]?
            /// Specifies per cgroup weight
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/weight`.
            internal var weight: Swift.Int?
            /// Weight per cgroup per device, can override BlkioWeight
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIO/weightDevice`.
            internal var weightDevice: [Components.Schemas.LinuxWeightDevice]?
            /// Creates a new `LinuxBlockIO`.
            ///
            /// - Parameters:
            ///   - leafWeight: Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
            ///   - throttleReadBpsDevice: IO read rate limit per cgroup per device, bytes per second
            ///   - throttleReadIOPSDevice: IO read rate limit per cgroup per device, IO per second
            ///   - throttleWriteBpsDevice: IO write rate limit per cgroup per device, bytes per second
            ///   - throttleWriteIOPSDevice: IO write rate limit per cgroup per device, IO per second
            ///   - weight: Specifies per cgroup weight
            ///   - weightDevice: Weight per cgroup per device, can override BlkioWeight
            internal init(
                leafWeight: Swift.Int? = nil,
                throttleReadBpsDevice: [Components.Schemas.LinuxThrottleDevice]? = nil,
                throttleReadIOPSDevice: [Components.Schemas.LinuxThrottleDevice]? = nil,
                throttleWriteBpsDevice: [Components.Schemas.LinuxThrottleDevice]? = nil,
                throttleWriteIOPSDevice: [Components.Schemas.LinuxThrottleDevice]? = nil,
                weight: Swift.Int? = nil,
                weightDevice: [Components.Schemas.LinuxWeightDevice]? = nil
            ) {
                self.leafWeight = leafWeight
                self.throttleReadBpsDevice = throttleReadBpsDevice
                self.throttleReadIOPSDevice = throttleReadIOPSDevice
                self.throttleWriteBpsDevice = throttleWriteBpsDevice
                self.throttleWriteIOPSDevice = throttleWriteIOPSDevice
                self.weight = weight
                self.weightDevice = weightDevice
            }
            internal enum CodingKeys: String, CodingKey {
                case leafWeight
                case throttleReadBpsDevice
                case throttleReadIOPSDevice
                case throttleWriteBpsDevice
                case throttleWriteIOPSDevice
                case weight
                case weightDevice
            }
        }
        /// LinuxBlockIODevice holds major:minor format supported in blkio cgroup
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxBlockIODevice`.
        internal struct LinuxBlockIODevice: Codable, Hashable, Sendable {
            /// Major is the device's major number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIODevice/major`.
            internal var major: Swift.Int64?
            /// Minor is the device's minor number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxBlockIODevice/minor`.
            internal var minor: Swift.Int64?
            /// Creates a new `LinuxBlockIODevice`.
            ///
            /// - Parameters:
            ///   - major: Major is the device's major number.
            ///   - minor: Minor is the device's minor number.
            internal init(
                major: Swift.Int64? = nil,
                minor: Swift.Int64? = nil
            ) {
                self.major = major
                self.minor = minor
            }
            internal enum CodingKeys: String, CodingKey {
                case major
                case minor
            }
        }
        /// LinuxCPU for Linux cgroup 'cpu' resource management
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxCPU`.
        internal struct LinuxCPU: Codable, Hashable, Sendable {
            /// CPU hardcap burst limit (in usecs). Allowed accumulated cpu time additionally for burst in a
            /// given period.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/burst`.
            internal var burst: Swift.Int?
            /// CPUs to use within the cpuset. Default is to use any CPU available.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/cpus`.
            internal var cpus: Swift.String?
            /// cgroups are configured with minimum weight, 0: default behavior, 1: SCHED_IDLE.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/idle`.
            internal var idle: Swift.Int64?
            /// List of memory nodes in the cpuset. Default is to use any available memory node.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/mems`.
            internal var mems: Swift.String?
            /// CPU period to be used for hardcapping (in usecs).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/period`.
            internal var period: Swift.Int?
            /// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/quota`.
            internal var quota: Swift.Int64?
            /// CPU period to be used for realtime scheduling (in usecs).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/realtimePeriod`.
            internal var realtimePeriod: Swift.Int?
            /// How much time realtime scheduling may use (in usecs).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/realtimeRuntime`.
            internal var realtimeRuntime: Swift.Int64?
            /// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxCPU/shares`.
            internal var shares: Swift.Int?
            /// Creates a new `LinuxCPU`.
            ///
            /// - Parameters:
            ///   - burst: CPU hardcap burst limit (in usecs). Allowed accumulated cpu time additionally for burst in a
            ///   - cpus: CPUs to use within the cpuset. Default is to use any CPU available.
            ///   - idle: cgroups are configured with minimum weight, 0: default behavior, 1: SCHED_IDLE.
            ///   - mems: List of memory nodes in the cpuset. Default is to use any available memory node.
            ///   - period: CPU period to be used for hardcapping (in usecs).
            ///   - quota: CPU hardcap limit (in usecs). Allowed cpu time in a given period.
            ///   - realtimePeriod: CPU period to be used for realtime scheduling (in usecs).
            ///   - realtimeRuntime: How much time realtime scheduling may use (in usecs).
            ///   - shares: CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
            internal init(
                burst: Swift.Int? = nil,
                cpus: Swift.String? = nil,
                idle: Swift.Int64? = nil,
                mems: Swift.String? = nil,
                period: Swift.Int? = nil,
                quota: Swift.Int64? = nil,
                realtimePeriod: Swift.Int? = nil,
                realtimeRuntime: Swift.Int64? = nil,
                shares: Swift.Int? = nil
            ) {
                self.burst = burst
                self.cpus = cpus
                self.idle = idle
                self.mems = mems
                self.period = period
                self.quota = quota
                self.realtimePeriod = realtimePeriod
                self.realtimeRuntime = realtimeRuntime
                self.shares = shares
            }
            internal enum CodingKeys: String, CodingKey {
                case burst
                case cpus
                case idle
                case mems
                case period
                case quota
                case realtimePeriod
                case realtimeRuntime
                case shares
            }
        }
        /// LinuxDevice represents the mknod information for a Linux special device file
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxDevice`.
        internal struct LinuxDevice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/fileMode`.
            internal var fileMode: Components.Schemas.FileMode?
            /// Gid of the device.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/gid`.
            internal var gid: Swift.Int?
            /// Major is the device's major number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/major`.
            internal var major: Swift.Int64?
            /// Minor is the device's minor number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/minor`.
            internal var minor: Swift.Int64?
            /// Path to the device.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/path`.
            internal var path: Swift.String?
            /// Device type, block, char, etc.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/type`.
            internal var _type: Swift.String?
            /// UID of the device.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDevice/uid`.
            internal var uid: Swift.Int?
            /// Creates a new `LinuxDevice`.
            ///
            /// - Parameters:
            ///   - fileMode:
            ///   - gid: Gid of the device.
            ///   - major: Major is the device's major number.
            ///   - minor: Minor is the device's minor number.
            ///   - path: Path to the device.
            ///   - _type: Device type, block, char, etc.
            ///   - uid: UID of the device.
            internal init(
                fileMode: Components.Schemas.FileMode? = nil,
                gid: Swift.Int? = nil,
                major: Swift.Int64? = nil,
                minor: Swift.Int64? = nil,
                path: Swift.String? = nil,
                _type: Swift.String? = nil,
                uid: Swift.Int? = nil
            ) {
                self.fileMode = fileMode
                self.gid = gid
                self.major = major
                self.minor = minor
                self.path = path
                self._type = _type
                self.uid = uid
            }
            internal enum CodingKeys: String, CodingKey {
                case fileMode
                case gid
                case major
                case minor
                case path
                case _type = "type"
                case uid
            }
        }
        /// LinuxDeviceCgroup represents a device rule for the devices specified to
        /// the device controller
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup`.
        internal struct LinuxDeviceCgroup: Codable, Hashable, Sendable {
            /// Cgroup access permissions format, rwm.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup/access`.
            internal var access: Swift.String?
            /// Allow or deny
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup/allow`.
            internal var allow: Swift.Bool?
            /// Major is the device's major number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup/major`.
            internal var major: Swift.Int64?
            /// Minor is the device's minor number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup/minor`.
            internal var minor: Swift.Int64?
            /// Device type, block, char, etc.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxDeviceCgroup/type`.
            internal var _type: Swift.String?
            /// Creates a new `LinuxDeviceCgroup`.
            ///
            /// - Parameters:
            ///   - access: Cgroup access permissions format, rwm.
            ///   - allow: Allow or deny
            ///   - major: Major is the device's major number.
            ///   - minor: Minor is the device's minor number.
            ///   - _type: Device type, block, char, etc.
            internal init(
                access: Swift.String? = nil,
                allow: Swift.Bool? = nil,
                major: Swift.Int64? = nil,
                minor: Swift.Int64? = nil,
                _type: Swift.String? = nil
            ) {
                self.access = access
                self.allow = allow
                self.major = major
                self.minor = minor
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case access
                case allow
                case major
                case minor
                case _type = "type"
            }
        }
        /// Default to reservation limits if supported. Otherwise fallback to page fault limits.
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxHugepageLimit`.
        internal struct LinuxHugepageLimit: Codable, Hashable, Sendable {
            /// Limit is the limit of "hugepagesize" hugetlb reservations (if supported) or usage.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxHugepageLimit/limit`.
            internal var limit: Swift.Int?
            /// Pagesize is the hugepage size.
            /// Format: "<size><unit-prefix>B' (e.g. 64KB, 2MB, 1GB, etc.).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxHugepageLimit/pageSize`.
            internal var pageSize: Swift.String?
            /// Creates a new `LinuxHugepageLimit`.
            ///
            /// - Parameters:
            ///   - limit: Limit is the limit of "hugepagesize" hugetlb reservations (if supported) or usage.
            ///   - pageSize: Pagesize is the hugepage size.
            internal init(
                limit: Swift.Int? = nil,
                pageSize: Swift.String? = nil
            ) {
                self.limit = limit
                self.pageSize = pageSize
            }
            internal enum CodingKeys: String, CodingKey {
                case limit
                case pageSize
            }
        }
        /// LinuxIDMapping specifies UID/GID mappings
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxIDMapping`.
        internal struct LinuxIDMapping: Codable, Hashable, Sendable {
            /// ContainerID is the starting UID/GID in the container
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIDMapping/containerID`.
            internal var containerID: Swift.Int?
            /// HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIDMapping/hostID`.
            internal var hostID: Swift.Int?
            /// Size is the number of IDs to be mapped
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIDMapping/size`.
            internal var size: Swift.Int?
            /// Creates a new `LinuxIDMapping`.
            ///
            /// - Parameters:
            ///   - containerID: ContainerID is the starting UID/GID in the container
            ///   - hostID: HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
            ///   - size: Size is the number of IDs to be mapped
            internal init(
                containerID: Swift.Int? = nil,
                hostID: Swift.Int? = nil,
                size: Swift.Int? = nil
            ) {
                self.containerID = containerID
                self.hostID = hostID
                self.size = size
            }
            internal enum CodingKeys: String, CodingKey {
                case containerID
                case hostID
                case size
            }
        }
        /// LinuxIntelRdt has container runtime resource constraints for Intel RDT CAT and MBA
        /// features and flags enabling Intel RDT CMT and MBM features.
        /// Intel RDT features are available in Linux 4.14 and newer kernel versions.
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt`.
        internal struct LinuxIntelRdt: Codable, Hashable, Sendable {
            /// The identity for RDT Class of Service
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt/closID`.
            internal var closID: Swift.String?
            /// EnableCMT is the flag to indicate if the Intel RDT CMT is enabled. CMT (Cache Monitoring Technology) supports monitoring of
            /// the last-level cache (LLC) occupancy for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt/enableCMT`.
            internal var enableCMT: Swift.Bool?
            /// EnableMBM is the flag to indicate if the Intel RDT MBM is enabled. MBM (Memory Bandwidth Monitoring) supports monitoring of
            /// total and local memory bandwidth for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt/enableMBM`.
            internal var enableMBM: Swift.Bool?
            /// The schema for L3 cache id and capacity bitmask (CBM)
            /// Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt/l3CacheSchema`.
            internal var l3CacheSchema: Swift.String?
            /// The schema of memory bandwidth per L3 cache id
            /// Format: "MB:<cache_id0>=bandwidth0;<cache_id1>=bandwidth1;..."
            /// The unit of memory bandwidth is specified in "percentages" by
            /// default, and in "MBps" if MBA Software Controller is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxIntelRdt/memBwSchema`.
            internal var memBwSchema: Swift.String?
            /// Creates a new `LinuxIntelRdt`.
            ///
            /// - Parameters:
            ///   - closID: The identity for RDT Class of Service
            ///   - enableCMT: EnableCMT is the flag to indicate if the Intel RDT CMT is enabled. CMT (Cache Monitoring Technology) supports monitoring of
            ///   - enableMBM: EnableMBM is the flag to indicate if the Intel RDT MBM is enabled. MBM (Memory Bandwidth Monitoring) supports monitoring of
            ///   - l3CacheSchema: The schema for L3 cache id and capacity bitmask (CBM)
            ///   - memBwSchema: The schema of memory bandwidth per L3 cache id
            internal init(
                closID: Swift.String? = nil,
                enableCMT: Swift.Bool? = nil,
                enableMBM: Swift.Bool? = nil,
                l3CacheSchema: Swift.String? = nil,
                memBwSchema: Swift.String? = nil
            ) {
                self.closID = closID
                self.enableCMT = enableCMT
                self.enableMBM = enableMBM
                self.l3CacheSchema = l3CacheSchema
                self.memBwSchema = memBwSchema
            }
            internal enum CodingKeys: String, CodingKey {
                case closID
                case enableCMT
                case enableMBM
                case l3CacheSchema
                case memBwSchema
            }
        }
        /// LinuxInterfacePriority for network interfaces
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxInterfacePriority`.
        internal struct LinuxInterfacePriority: Codable, Hashable, Sendable {
            /// Name is the name of the network interface
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxInterfacePriority/name`.
            internal var name: Swift.String?
            /// Priority for the interface
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxInterfacePriority/priority`.
            internal var priority: Swift.Int?
            /// Creates a new `LinuxInterfacePriority`.
            ///
            /// - Parameters:
            ///   - name: Name is the name of the network interface
            ///   - priority: Priority for the interface
            internal init(
                name: Swift.String? = nil,
                priority: Swift.Int? = nil
            ) {
                self.name = name
                self.priority = priority
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case priority
            }
        }
        /// LinuxMemory for Linux cgroup 'memory' resource management
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxMemory`.
        internal struct LinuxMemory: Codable, Hashable, Sendable {
            /// CheckBeforeUpdate enables checking if a new memory limit is lower
            /// than the current usage during update, and if so, rejecting the new
            /// limit.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/checkBeforeUpdate`.
            internal var checkBeforeUpdate: Swift.Bool?
            /// DisableOOMKiller disables the OOM killer for out of memory conditions
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/disableOOMKiller`.
            internal var disableOOMKiller: Swift.Bool?
            /// Kernel memory limit (in bytes).
            ///
            /// Deprecated: kernel-memory limits are not supported in cgroups v2, and
            /// were obsoleted in [kernel v5.4]. This field should no longer be used,
            /// as it may be ignored by runtimes.
            ///
            /// [kernel v5.4]: https://github.com/torvalds/linux/commit/0158115f702b0ba208ab0
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/kernel`.
            internal var kernel: Swift.Int64?
            /// Kernel memory limit for tcp (in bytes)
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/kernelTCP`.
            internal var kernelTCP: Swift.Int64?
            /// Memory limit (in bytes).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/limit`.
            internal var limit: Swift.Int64?
            /// Memory reservation or soft_limit (in bytes).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/reservation`.
            internal var reservation: Swift.Int64?
            /// Total memory limit (memory + swap).
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/swap`.
            internal var swap: Swift.Int64?
            /// How aggressive the kernel will swap memory pages.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/swappiness`.
            internal var swappiness: Swift.Int?
            /// Enables hierarchical memory accounting
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxMemory/useHierarchy`.
            internal var useHierarchy: Swift.Bool?
            /// Creates a new `LinuxMemory`.
            ///
            /// - Parameters:
            ///   - checkBeforeUpdate: CheckBeforeUpdate enables checking if a new memory limit is lower
            ///   - disableOOMKiller: DisableOOMKiller disables the OOM killer for out of memory conditions
            ///   - kernel: Kernel memory limit (in bytes).
            ///   - kernelTCP: Kernel memory limit for tcp (in bytes)
            ///   - limit: Memory limit (in bytes).
            ///   - reservation: Memory reservation or soft_limit (in bytes).
            ///   - swap: Total memory limit (memory + swap).
            ///   - swappiness: How aggressive the kernel will swap memory pages.
            ///   - useHierarchy: Enables hierarchical memory accounting
            internal init(
                checkBeforeUpdate: Swift.Bool? = nil,
                disableOOMKiller: Swift.Bool? = nil,
                kernel: Swift.Int64? = nil,
                kernelTCP: Swift.Int64? = nil,
                limit: Swift.Int64? = nil,
                reservation: Swift.Int64? = nil,
                swap: Swift.Int64? = nil,
                swappiness: Swift.Int? = nil,
                useHierarchy: Swift.Bool? = nil
            ) {
                self.checkBeforeUpdate = checkBeforeUpdate
                self.disableOOMKiller = disableOOMKiller
                self.kernel = kernel
                self.kernelTCP = kernelTCP
                self.limit = limit
                self.reservation = reservation
                self.swap = swap
                self.swappiness = swappiness
                self.useHierarchy = useHierarchy
            }
            internal enum CodingKeys: String, CodingKey {
                case checkBeforeUpdate
                case disableOOMKiller
                case kernel
                case kernelTCP
                case limit
                case reservation
                case swap
                case swappiness
                case useHierarchy
            }
        }
        /// LinuxNetwork identification and priority configuration
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxNetwork`.
        internal struct LinuxNetwork: Codable, Hashable, Sendable {
            /// Set class identifier for container's network packets
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxNetwork/classID`.
            internal var classID: Swift.Int?
            /// Set priority of network traffic for container
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxNetwork/priorities`.
            internal var priorities: [Components.Schemas.LinuxInterfacePriority]?
            /// Creates a new `LinuxNetwork`.
            ///
            /// - Parameters:
            ///   - classID: Set class identifier for container's network packets
            ///   - priorities: Set priority of network traffic for container
            internal init(
                classID: Swift.Int? = nil,
                priorities: [Components.Schemas.LinuxInterfacePriority]? = nil
            ) {
                self.classID = classID
                self.priorities = priorities
            }
            internal enum CodingKeys: String, CodingKey {
                case classID
                case priorities
            }
        }
        /// LinuxPersonality represents the Linux personality syscall input
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxPersonality`.
        internal struct LinuxPersonality: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinuxPersonality/domain`.
            internal var domain: Components.Schemas.LinuxPersonalityDomain?
            /// Additional flags
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxPersonality/flags`.
            internal var flags: [Components.Schemas.LinuxPersonalityFlag]?
            /// Creates a new `LinuxPersonality`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - flags: Additional flags
            internal init(
                domain: Components.Schemas.LinuxPersonalityDomain? = nil,
                flags: [Components.Schemas.LinuxPersonalityFlag]? = nil
            ) {
                self.domain = domain
                self.flags = flags
            }
            internal enum CodingKeys: String, CodingKey {
                case domain
                case flags
            }
        }
        /// - Remark: Generated from `#/components/schemas/LinuxPersonalityDomain`.
        internal typealias LinuxPersonalityDomain = Swift.String
        /// - Remark: Generated from `#/components/schemas/LinuxPersonalityFlag`.
        internal typealias LinuxPersonalityFlag = Swift.String
        /// LinuxPids for Linux cgroup 'pids' resource management (Linux 4.3)
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxPids`.
        internal struct LinuxPids: Codable, Hashable, Sendable {
            /// Maximum number of PIDs. Default is "no limit".
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxPids/limit`.
            internal var limit: Swift.Int64?
            /// Creates a new `LinuxPids`.
            ///
            /// - Parameters:
            ///   - limit: Maximum number of PIDs. Default is "no limit".
            internal init(limit: Swift.Int64? = nil) {
                self.limit = limit
            }
            internal enum CodingKeys: String, CodingKey {
                case limit
            }
        }
        /// LinuxRdma for Linux cgroup 'rdma' resource management (Linux 4.11)
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxRdma`.
        internal struct LinuxRdma: Codable, Hashable, Sendable {
            /// Maximum number of HCA handles that can be opened. Default is "no limit".
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxRdma/hcaHandles`.
            internal var hcaHandles: Swift.Int?
            /// Maximum number of HCA objects that can be created. Default is "no limit".
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxRdma/hcaObjects`.
            internal var hcaObjects: Swift.Int?
            /// Creates a new `LinuxRdma`.
            ///
            /// - Parameters:
            ///   - hcaHandles: Maximum number of HCA handles that can be opened. Default is "no limit".
            ///   - hcaObjects: Maximum number of HCA objects that can be created. Default is "no limit".
            internal init(
                hcaHandles: Swift.Int? = nil,
                hcaObjects: Swift.Int? = nil
            ) {
                self.hcaHandles = hcaHandles
                self.hcaObjects = hcaObjects
            }
            internal enum CodingKeys: String, CodingKey {
                case hcaHandles
                case hcaObjects
            }
        }
        /// LinuxResources has container runtime resource constraints
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxResources`.
        internal struct LinuxResources: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinuxResources/blockIO`.
            internal var blockIO: Components.Schemas.LinuxBlockIO?
            /// - Remark: Generated from `#/components/schemas/LinuxResources/cpu`.
            internal var cpu: Components.Schemas.LinuxCPU?
            /// Devices configures the device allowlist.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/devices`.
            internal var devices: [Components.Schemas.LinuxDeviceCgroup]?
            /// Hugetlb limits (in bytes). Default to reservation limits if supported.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/hugepageLimits`.
            internal var hugepageLimits: [Components.Schemas.LinuxHugepageLimit]?
            /// - Remark: Generated from `#/components/schemas/LinuxResources/memory`.
            internal var memory: Components.Schemas.LinuxMemory?
            /// - Remark: Generated from `#/components/schemas/LinuxResources/network`.
            internal var network: Components.Schemas.LinuxNetwork?
            /// - Remark: Generated from `#/components/schemas/LinuxResources/pids`.
            internal var pids: Components.Schemas.LinuxPids?
            /// Rdma resource restriction configuration.
            /// Limits are a set of key value pairs that define RDMA resource limits,
            /// where the key is device name and value is resource limits.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/rdma`.
            internal struct rdmaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxRdma]
                /// Creates a new `rdmaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxRdma] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Rdma resource restriction configuration.
            /// Limits are a set of key value pairs that define RDMA resource limits,
            /// where the key is device name and value is resource limits.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/rdma`.
            internal var rdma: Components.Schemas.LinuxResources.rdmaPayload?
            /// Unified resources.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/unified`.
            internal struct unifiedPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `unifiedPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Unified resources.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxResources/unified`.
            internal var unified: Components.Schemas.LinuxResources.unifiedPayload?
            /// Creates a new `LinuxResources`.
            ///
            /// - Parameters:
            ///   - blockIO:
            ///   - cpu:
            ///   - devices: Devices configures the device allowlist.
            ///   - hugepageLimits: Hugetlb limits (in bytes). Default to reservation limits if supported.
            ///   - memory:
            ///   - network:
            ///   - pids:
            ///   - rdma: Rdma resource restriction configuration.
            ///   - unified: Unified resources.
            internal init(
                blockIO: Components.Schemas.LinuxBlockIO? = nil,
                cpu: Components.Schemas.LinuxCPU? = nil,
                devices: [Components.Schemas.LinuxDeviceCgroup]? = nil,
                hugepageLimits: [Components.Schemas.LinuxHugepageLimit]? = nil,
                memory: Components.Schemas.LinuxMemory? = nil,
                network: Components.Schemas.LinuxNetwork? = nil,
                pids: Components.Schemas.LinuxPids? = nil,
                rdma: Components.Schemas.LinuxResources.rdmaPayload? = nil,
                unified: Components.Schemas.LinuxResources.unifiedPayload? = nil
            ) {
                self.blockIO = blockIO
                self.cpu = cpu
                self.devices = devices
                self.hugepageLimits = hugepageLimits
                self.memory = memory
                self.network = network
                self.pids = pids
                self.rdma = rdma
                self.unified = unified
            }
            internal enum CodingKeys: String, CodingKey {
                case blockIO
                case cpu
                case devices
                case hugepageLimits
                case memory
                case network
                case pids
                case rdma
                case unified
            }
        }
        /// LinuxThrottleDevice struct holds a `major:minor rate_per_second` pair
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxThrottleDevice`.
        internal struct LinuxThrottleDevice: Codable, Hashable, Sendable {
            /// Major is the device's major number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxThrottleDevice/major`.
            internal var major: Swift.Int64?
            /// Minor is the device's minor number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxThrottleDevice/minor`.
            internal var minor: Swift.Int64?
            /// Rate is the IO rate limit per cgroup per device
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxThrottleDevice/rate`.
            internal var rate: Swift.Int?
            /// Creates a new `LinuxThrottleDevice`.
            ///
            /// - Parameters:
            ///   - major: Major is the device's major number.
            ///   - minor: Minor is the device's minor number.
            ///   - rate: Rate is the IO rate limit per cgroup per device
            internal init(
                major: Swift.Int64? = nil,
                minor: Swift.Int64? = nil,
                rate: Swift.Int? = nil
            ) {
                self.major = major
                self.minor = minor
                self.rate = rate
            }
            internal enum CodingKeys: String, CodingKey {
                case major
                case minor
                case rate
            }
        }
        /// LinuxWeightDevice struct holds a `major:minor weight` pair for weightDevice
        ///
        /// - Remark: Generated from `#/components/schemas/LinuxWeightDevice`.
        internal struct LinuxWeightDevice: Codable, Hashable, Sendable {
            /// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxWeightDevice/leafWeight`.
            internal var leafWeight: Swift.Int?
            /// Major is the device's major number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxWeightDevice/major`.
            internal var major: Swift.Int64?
            /// Minor is the device's minor number.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxWeightDevice/minor`.
            internal var minor: Swift.Int64?
            /// Weight is the bandwidth rate for the device.
            ///
            /// - Remark: Generated from `#/components/schemas/LinuxWeightDevice/weight`.
            internal var weight: Swift.Int?
            /// Creates a new `LinuxWeightDevice`.
            ///
            /// - Parameters:
            ///   - leafWeight: LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
            ///   - major: Major is the device's major number.
            ///   - minor: Minor is the device's minor number.
            ///   - weight: Weight is the bandwidth rate for the device.
            internal init(
                leafWeight: Swift.Int? = nil,
                major: Swift.Int64? = nil,
                minor: Swift.Int64? = nil,
                weight: Swift.Int? = nil
            ) {
                self.leafWeight = leafWeight
                self.major = major
                self.minor = minor
                self.weight = weight
            }
            internal enum CodingKeys: String, CodingKey {
                case leafWeight
                case major
                case minor
                case weight
            }
        }
        /// ListContainer describes a container suitable for listing
        ///
        /// - Remark: Generated from `#/components/schemas/ListContainer`.
        internal struct ListContainer: Codable, Hashable, Sendable {
            /// AutoRemove
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/AutoRemove`.
            internal var AutoRemove: Swift.Bool?
            /// CIDFile specified at creation time.
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/CIDFile`.
            internal var CIDFile: Swift.String?
            /// Container command
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Command`.
            internal var Command: [Swift.String]?
            /// Container creation time
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Created`.
            internal var Created: Foundation.Date?
            /// Human-readable container creation time.
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/CreatedAt`.
            internal var CreatedAt: Swift.String?
            /// If container has exited, the return code from the command
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/ExitCode`.
            internal var ExitCode: Swift.Int32?
            /// If container has exited/stopped
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Exited`.
            internal var Exited: Swift.Bool?
            /// Time container exited
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/ExitedAt`.
            internal var ExitedAt: Swift.Int64?
            /// ExposedPorts contains the ports that are exposed but not forwarded,
            /// see Ports for forwarded ports.
            /// The key is the port number and the string slice contains the protocols,
            /// i.e. "tcp", "udp" and "sctp".
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/ExposedPorts`.
            internal var ExposedPorts: OpenAPIRuntime.OpenAPIValueContainer?
            /// The unique identifier for the container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Id`.
            internal var Id: Swift.String?
            /// Container image
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Image`.
            internal var Image: Swift.String?
            /// Container image ID
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/ImageID`.
            internal var ImageID: Swift.String?
            /// If this container is a Pod infra container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/IsInfra`.
            internal var IsInfra: Swift.Bool?
            /// Labels for container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels for container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Labels`.
            internal var Labels: Components.Schemas.ListContainer.LabelsPayload?
            /// User volume mounts
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Mounts`.
            internal var Mounts: [Swift.String]?
            /// The names assigned to the container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Names`.
            internal var Names: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ListContainer/Namespaces`.
            internal var Namespaces: Components.Schemas.ListContainerNamespaces?
            /// The network names assigned to the container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Networks`.
            internal var Networks: [Swift.String]?
            /// The process id of the container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Pid`.
            internal var Pid: Swift.Int64?
            /// If the container is part of Pod, the Pod ID. Requires the pod
            /// boolean to be set
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Pod`.
            internal var Pod: Swift.String?
            /// If the container is part of Pod, the Pod name. Requires the pod
            /// boolean to be set
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/PodName`.
            internal var PodName: Swift.String?
            /// Port mappings
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Ports`.
            internal var Ports: [Components.Schemas.PortMapping]?
            /// Restarts is how many times the container was restarted by its
            /// restart policy. This is NOT incremented by normal container restarts
            /// (only by restart policy).
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Restarts`.
            internal var Restarts: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListContainer/Size`.
            internal var Size: Components.Schemas.ContainerSize?
            /// Time when container started
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/StartedAt`.
            internal var StartedAt: Swift.Int64?
            /// State of container
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/State`.
            internal var State: Swift.String?
            /// Status is a human-readable approximation of a duration for json output
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainer/Status`.
            internal var Status: Swift.String?
            /// Creates a new `ListContainer`.
            ///
            /// - Parameters:
            ///   - AutoRemove: AutoRemove
            ///   - CIDFile: CIDFile specified at creation time.
            ///   - Command: Container command
            ///   - Created: Container creation time
            ///   - CreatedAt: Human-readable container creation time.
            ///   - ExitCode: If container has exited, the return code from the command
            ///   - Exited: If container has exited/stopped
            ///   - ExitedAt: Time container exited
            ///   - ExposedPorts: ExposedPorts contains the ports that are exposed but not forwarded,
            ///   - Id: The unique identifier for the container
            ///   - Image: Container image
            ///   - ImageID: Container image ID
            ///   - IsInfra: If this container is a Pod infra container
            ///   - Labels: Labels for container
            ///   - Mounts: User volume mounts
            ///   - Names: The names assigned to the container
            ///   - Namespaces:
            ///   - Networks: The network names assigned to the container
            ///   - Pid: The process id of the container
            ///   - Pod: If the container is part of Pod, the Pod ID. Requires the pod
            ///   - PodName: If the container is part of Pod, the Pod name. Requires the pod
            ///   - Ports: Port mappings
            ///   - Restarts: Restarts is how many times the container was restarted by its
            ///   - Size:
            ///   - StartedAt: Time when container started
            ///   - State: State of container
            ///   - Status: Status is a human-readable approximation of a duration for json output
            internal init(
                AutoRemove: Swift.Bool? = nil,
                CIDFile: Swift.String? = nil,
                Command: [Swift.String]? = nil,
                Created: Foundation.Date? = nil,
                CreatedAt: Swift.String? = nil,
                ExitCode: Swift.Int32? = nil,
                Exited: Swift.Bool? = nil,
                ExitedAt: Swift.Int64? = nil,
                ExposedPorts: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                Id: Swift.String? = nil,
                Image: Swift.String? = nil,
                ImageID: Swift.String? = nil,
                IsInfra: Swift.Bool? = nil,
                Labels: Components.Schemas.ListContainer.LabelsPayload? = nil,
                Mounts: [Swift.String]? = nil,
                Names: [Swift.String]? = nil,
                Namespaces: Components.Schemas.ListContainerNamespaces? = nil,
                Networks: [Swift.String]? = nil,
                Pid: Swift.Int64? = nil,
                Pod: Swift.String? = nil,
                PodName: Swift.String? = nil,
                Ports: [Components.Schemas.PortMapping]? = nil,
                Restarts: Swift.Int? = nil,
                Size: Components.Schemas.ContainerSize? = nil,
                StartedAt: Swift.Int64? = nil,
                State: Swift.String? = nil,
                Status: Swift.String? = nil
            ) {
                self.AutoRemove = AutoRemove
                self.CIDFile = CIDFile
                self.Command = Command
                self.Created = Created
                self.CreatedAt = CreatedAt
                self.ExitCode = ExitCode
                self.Exited = Exited
                self.ExitedAt = ExitedAt
                self.ExposedPorts = ExposedPorts
                self.Id = Id
                self.Image = Image
                self.ImageID = ImageID
                self.IsInfra = IsInfra
                self.Labels = Labels
                self.Mounts = Mounts
                self.Names = Names
                self.Namespaces = Namespaces
                self.Networks = Networks
                self.Pid = Pid
                self.Pod = Pod
                self.PodName = PodName
                self.Ports = Ports
                self.Restarts = Restarts
                self.Size = Size
                self.StartedAt = StartedAt
                self.State = State
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case AutoRemove
                case CIDFile
                case Command
                case Created
                case CreatedAt
                case ExitCode
                case Exited
                case ExitedAt
                case ExposedPorts
                case Id
                case Image
                case ImageID
                case IsInfra
                case Labels
                case Mounts
                case Names
                case Namespaces
                case Networks
                case Pid
                case Pod
                case PodName
                case Ports
                case Restarts
                case Size
                case StartedAt
                case State
                case Status
            }
        }
        /// ListContainerNamespaces contains the identifiers of the container's Linux namespaces
        ///
        /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces`.
        internal struct ListContainerNamespaces: Codable, Hashable, Sendable {
            /// Cgroup namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Cgroup`.
            internal var Cgroup: Swift.String?
            /// IPC namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Ipc`.
            internal var Ipc: Swift.String?
            /// Mount namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Mnt`.
            internal var Mnt: Swift.String?
            /// Network namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Net`.
            internal var Net: Swift.String?
            /// PID namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Pidns`.
            internal var Pidns: Swift.String?
            /// User namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/User`.
            internal var User: Swift.String?
            /// UTS namespace
            ///
            /// - Remark: Generated from `#/components/schemas/ListContainerNamespaces/Uts`.
            internal var Uts: Swift.String?
            /// Creates a new `ListContainerNamespaces`.
            ///
            /// - Parameters:
            ///   - Cgroup: Cgroup namespace
            ///   - Ipc: IPC namespace
            ///   - Mnt: Mount namespace
            ///   - Net: Network namespace
            ///   - Pidns: PID namespace
            ///   - User: User namespace
            ///   - Uts: UTS namespace
            internal init(
                Cgroup: Swift.String? = nil,
                Ipc: Swift.String? = nil,
                Mnt: Swift.String? = nil,
                Net: Swift.String? = nil,
                Pidns: Swift.String? = nil,
                User: Swift.String? = nil,
                Uts: Swift.String? = nil
            ) {
                self.Cgroup = Cgroup
                self.Ipc = Ipc
                self.Mnt = Mnt
                self.Net = Net
                self.Pidns = Pidns
                self.User = User
                self.Uts = Uts
            }
            internal enum CodingKeys: String, CodingKey {
                case Cgroup
                case Ipc
                case Mnt
                case Net
                case Pidns
                case User
                case Uts
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListPodContainer`.
        internal struct ListPodContainer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListPodContainer/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodContainer/Names`.
            internal var Names: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodContainer/RestartCount`.
            internal var RestartCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ListPodContainer/Status`.
            internal var Status: Swift.String?
            /// Creates a new `ListPodContainer`.
            ///
            /// - Parameters:
            ///   - Id:
            ///   - Names:
            ///   - RestartCount:
            ///   - Status:
            internal init(
                Id: Swift.String? = nil,
                Names: Swift.String? = nil,
                RestartCount: Swift.Int? = nil,
                Status: Swift.String? = nil
            ) {
                self.Id = Id
                self.Names = Names
                self.RestartCount = RestartCount
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case Names
                case RestartCount
                case Status
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListPodsReport`.
        internal struct ListPodsReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Cgroup`.
            internal var Cgroup: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Containers`.
            internal var Containers: [Components.Schemas.ListPodContainer]?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/InfraId`.
            internal var InfraId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Labels`.
            internal var Labels: Components.Schemas.ListPodsReport.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Namespace`.
            internal var Namespace: Swift.String?
            /// Network names connected to infra container
            ///
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Networks`.
            internal var Networks: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ListPodsReport/Status`.
            internal var Status: Swift.String?
            /// Creates a new `ListPodsReport`.
            ///
            /// - Parameters:
            ///   - Cgroup:
            ///   - Containers:
            ///   - Created:
            ///   - Id:
            ///   - InfraId:
            ///   - Labels:
            ///   - Name:
            ///   - Namespace:
            ///   - Networks: Network names connected to infra container
            ///   - Status:
            internal init(
                Cgroup: Swift.String? = nil,
                Containers: [Components.Schemas.ListPodContainer]? = nil,
                Created: Foundation.Date? = nil,
                Id: Swift.String? = nil,
                InfraId: Swift.String? = nil,
                Labels: Components.Schemas.ListPodsReport.LabelsPayload? = nil,
                Name: Swift.String? = nil,
                Namespace: Swift.String? = nil,
                Networks: [Swift.String]? = nil,
                Status: Swift.String? = nil
            ) {
                self.Cgroup = Cgroup
                self.Containers = Containers
                self.Created = Created
                self.Id = Id
                self.InfraId = InfraId
                self.Labels = Labels
                self.Name = Name
                self.Namespace = Namespace
                self.Networks = Networks
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case Cgroup
                case Containers
                case Created
                case Id
                case InfraId
                case Labels
                case Name
                case Namespace
                case Networks
                case Status
            }
        }
        /// Volume list response
        ///
        /// - Remark: Generated from `#/components/schemas/ListResponse`.
        internal struct ListResponse: Codable, Hashable, Sendable {
            /// List of volumes
            ///
            /// - Remark: Generated from `#/components/schemas/ListResponse/Volumes`.
            internal var Volumes: [Components.Schemas.Volume]?
            /// Warnings that occurred when fetching the list of volumes.
            ///
            /// - Remark: Generated from `#/components/schemas/ListResponse/Warnings`.
            internal var Warnings: [Swift.String]?
            /// Creates a new `ListResponse`.
            ///
            /// - Parameters:
            ///   - Volumes: List of volumes
            ///   - Warnings: Warnings that occurred when fetching the list of volumes.
            internal init(
                Volumes: [Components.Schemas.Volume]? = nil,
                Warnings: [Swift.String]? = nil
            ) {
                self.Volumes = Volumes
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case Volumes
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/LogConfig`.
        internal struct LogConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LogConfig/Config`.
            internal struct ConfigPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ConfigPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/LogConfig/Config`.
            internal var Config: Components.Schemas.LogConfig.ConfigPayload?
            /// - Remark: Generated from `#/components/schemas/LogConfig/Type`.
            internal var _Type: Swift.String?
            /// Creates a new `LogConfig`.
            ///
            /// - Parameters:
            ///   - Config:
            ///   - _Type:
            internal init(
                Config: Components.Schemas.LogConfig.ConfigPayload? = nil,
                _Type: Swift.String? = nil
            ) {
                self.Config = Config
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Config
                case _Type = "Type"
            }
        }
        /// LogConfig describes the logging characteristics for a container
        ///
        /// - Remark: Generated from `#/components/schemas/LogConfigLibpod`.
        internal struct LogConfigLibpod: Codable, Hashable, Sendable {
            /// LogDriver is the container's log driver.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/LogConfigLibpod/driver`.
            internal var driver: Swift.String?
            /// A set of options to accompany the log driver.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/LogConfigLibpod/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A set of options to accompany the log driver.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/LogConfigLibpod/options`.
            internal var options: Components.Schemas.LogConfigLibpod.optionsPayload?
            /// LogPath is the path the container's logs will be stored at.
            /// Only available if LogDriver is set to "json-file" or "k8s-file".
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/LogConfigLibpod/path`.
            internal var path: Swift.String?
            /// Size is the maximum size of the log file
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/LogConfigLibpod/size`.
            internal var size: Swift.Int64?
            /// Creates a new `LogConfigLibpod`.
            ///
            /// - Parameters:
            ///   - driver: LogDriver is the container's log driver.
            ///   - options: A set of options to accompany the log driver.
            ///   - path: LogPath is the path the container's logs will be stored at.
            ///   - size: Size is the maximum size of the log file
            internal init(
                driver: Swift.String? = nil,
                options: Components.Schemas.LogConfigLibpod.optionsPayload? = nil,
                path: Swift.String? = nil,
                size: Swift.Int64? = nil
            ) {
                self.driver = driver
                self.options = options
                self.path = path
                self.size = size
            }
            internal enum CodingKeys: String, CodingKey {
                case driver
                case options
                case path
                case size
            }
        }
        /// - Remark: Generated from `#/components/schemas/MacAddress`.
        internal typealias MacAddress = Components.Schemas.HardwareAddr
        /// ManifestAddArtifactOptions provides the model for creating artifact manifests
        /// for files and adding those manifests to a manifest list
        ///
        /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions`.
        internal struct ManifestAddArtifactOptions: Codable, Hashable, Sendable {
            /// Annotation to add to the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/annotation`.
            internal var annotation: [Swift.String]?
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/annotations`.
            internal var annotations: Components.Schemas.ManifestAddArtifactOptions.annotationsPayload?
            /// Arch overrides the architecture for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/arch`.
            internal var arch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_annotations`.
            internal struct artifact_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `artifact_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_annotations`.
            internal var artifact_annotations: Components.Schemas.ManifestAddArtifactOptions.artifact_annotationsPayload?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_config`.
            internal var artifact_config: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_config_type`.
            internal var artifact_config_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_exclude_titles`.
            internal var artifact_exclude_titles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_files`.
            internal var artifact_files: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_layer_type`.
            internal var artifact_layer_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_subject`.
            internal var artifact_subject: Swift.String?
            /// Note to future maintainers: keep these fields synchronized with ManifestModifyOptions!
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/artifact_type`.
            internal var artifact_type: Swift.String?
            /// Feature list for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/features`.
            internal var features: [Swift.String]?
            /// IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/index_annotation`.
            internal var index_annotation: [Swift.String]?
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/index_annotations`.
            internal struct index_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `index_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/index_annotations`.
            internal var index_annotations: Components.Schemas.ManifestAddArtifactOptions.index_annotationsPayload?
            /// OS overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/os`.
            internal var os: Swift.String?
            /// OS features for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/os_features`.
            internal var os_features: [Swift.String]?
            /// OSVersion overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/os_version`.
            internal var os_version: Swift.String?
            /// IndexSubject is a subject value to set in the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/subject`.
            internal var subject: Swift.String?
            /// Variant for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddArtifactOptions/variant`.
            internal var variant: Swift.String?
            /// Creates a new `ManifestAddArtifactOptions`.
            ///
            /// - Parameters:
            ///   - annotation: Annotation to add to the item in the manifest list
            ///   - annotations: Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///   - arch: Arch overrides the architecture for the item in the manifest list
            ///   - artifact_annotations:
            ///   - artifact_config:
            ///   - artifact_config_type:
            ///   - artifact_exclude_titles:
            ///   - artifact_files:
            ///   - artifact_layer_type:
            ///   - artifact_subject:
            ///   - artifact_type: Note to future maintainers: keep these fields synchronized with ManifestModifyOptions!
            ///   - features: Feature list for the item in the manifest list
            ///   - index_annotation: IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///   - index_annotations: IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///   - os: OS overrides the operating system for the item in the manifest list
            ///   - os_features: OS features for the item in the manifest list
            ///   - os_version: OSVersion overrides the operating system for the item in the manifest list
            ///   - subject: IndexSubject is a subject value to set in the manifest list itself
            ///   - variant: Variant for the item in the manifest list
            internal init(
                annotation: [Swift.String]? = nil,
                annotations: Components.Schemas.ManifestAddArtifactOptions.annotationsPayload? = nil,
                arch: Swift.String? = nil,
                artifact_annotations: Components.Schemas.ManifestAddArtifactOptions.artifact_annotationsPayload? = nil,
                artifact_config: Swift.String? = nil,
                artifact_config_type: Swift.String? = nil,
                artifact_exclude_titles: Swift.Bool? = nil,
                artifact_files: [Swift.String]? = nil,
                artifact_layer_type: Swift.String? = nil,
                artifact_subject: Swift.String? = nil,
                artifact_type: Swift.String? = nil,
                features: [Swift.String]? = nil,
                index_annotation: [Swift.String]? = nil,
                index_annotations: Components.Schemas.ManifestAddArtifactOptions.index_annotationsPayload? = nil,
                os: Swift.String? = nil,
                os_features: [Swift.String]? = nil,
                os_version: Swift.String? = nil,
                subject: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.annotation = annotation
                self.annotations = annotations
                self.arch = arch
                self.artifact_annotations = artifact_annotations
                self.artifact_config = artifact_config
                self.artifact_config_type = artifact_config_type
                self.artifact_exclude_titles = artifact_exclude_titles
                self.artifact_files = artifact_files
                self.artifact_layer_type = artifact_layer_type
                self.artifact_subject = artifact_subject
                self.artifact_type = artifact_type
                self.features = features
                self.index_annotation = index_annotation
                self.index_annotations = index_annotations
                self.os = os
                self.os_features = os_features
                self.os_version = os_version
                self.subject = subject
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case annotation
                case annotations
                case arch
                case artifact_annotations
                case artifact_config
                case artifact_config_type
                case artifact_exclude_titles
                case artifact_files
                case artifact_layer_type
                case artifact_subject
                case artifact_type
                case features
                case index_annotation
                case index_annotations
                case os
                case os_features
                case os_version
                case subject
                case variant
            }
        }
        /// ManifestAddOptions provides model for adding digests to manifest list
        ///
        /// - Remark: Generated from `#/components/schemas/ManifestAddOptions`.
        internal struct ManifestAddOptions: Codable, Hashable, Sendable {
            /// True when operating on a list to include all images
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/all`.
            internal var all: Swift.Bool?
            /// Annotation to add to the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/annotation`.
            internal var annotation: [Swift.String]?
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/annotations`.
            internal var annotations: Components.Schemas.ManifestAddOptions.annotationsPayload?
            /// Arch overrides the architecture for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/arch`.
            internal var arch: Swift.String?
            /// Feature list for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/features`.
            internal var features: [Swift.String]?
            /// Images is an optional list of image references to add to manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/images`.
            internal var images: [Swift.String]?
            /// IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/index_annotation`.
            internal var index_annotation: [Swift.String]?
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/index_annotations`.
            internal struct index_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `index_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/index_annotations`.
            internal var index_annotations: Components.Schemas.ManifestAddOptions.index_annotationsPayload?
            /// OS overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/os`.
            internal var os: Swift.String?
            /// OS features for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/os_features`.
            internal var os_features: [Swift.String]?
            /// OSVersion overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/os_version`.
            internal var os_version: Swift.String?
            /// IndexSubject is a subject value to set in the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/subject`.
            internal var subject: Swift.String?
            /// Variant for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAddOptions/variant`.
            internal var variant: Swift.String?
            /// Creates a new `ManifestAddOptions`.
            ///
            /// - Parameters:
            ///   - all: True when operating on a list to include all images
            ///   - annotation: Annotation to add to the item in the manifest list
            ///   - annotations: Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///   - arch: Arch overrides the architecture for the item in the manifest list
            ///   - features: Feature list for the item in the manifest list
            ///   - images: Images is an optional list of image references to add to manifest list
            ///   - index_annotation: IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///   - index_annotations: IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///   - os: OS overrides the operating system for the item in the manifest list
            ///   - os_features: OS features for the item in the manifest list
            ///   - os_version: OSVersion overrides the operating system for the item in the manifest list
            ///   - subject: IndexSubject is a subject value to set in the manifest list itself
            ///   - variant: Variant for the item in the manifest list
            internal init(
                all: Swift.Bool? = nil,
                annotation: [Swift.String]? = nil,
                annotations: Components.Schemas.ManifestAddOptions.annotationsPayload? = nil,
                arch: Swift.String? = nil,
                features: [Swift.String]? = nil,
                images: [Swift.String]? = nil,
                index_annotation: [Swift.String]? = nil,
                index_annotations: Components.Schemas.ManifestAddOptions.index_annotationsPayload? = nil,
                os: Swift.String? = nil,
                os_features: [Swift.String]? = nil,
                os_version: Swift.String? = nil,
                subject: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.all = all
                self.annotation = annotation
                self.annotations = annotations
                self.arch = arch
                self.features = features
                self.images = images
                self.index_annotation = index_annotation
                self.index_annotations = index_annotations
                self.os = os
                self.os_features = os_features
                self.os_version = os_version
                self.subject = subject
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case all
                case annotation
                case annotations
                case arch
                case features
                case images
                case index_annotation
                case index_annotations
                case os
                case os_features
                case os_version
                case subject
                case variant
            }
        }
        /// ManifestAnnotateOptions provides model for annotating manifest list
        ///
        /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions`.
        internal struct ManifestAnnotateOptions: Codable, Hashable, Sendable {
            /// Annotation to add to the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/annotation`.
            internal var annotation: [Swift.String]?
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/annotations`.
            internal var annotations: Components.Schemas.ManifestAnnotateOptions.annotationsPayload?
            /// Arch overrides the architecture for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/arch`.
            internal var arch: Swift.String?
            /// Feature list for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/features`.
            internal var features: [Swift.String]?
            /// IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/index_annotation`.
            internal var index_annotation: [Swift.String]?
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/index_annotations`.
            internal struct index_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `index_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/index_annotations`.
            internal var index_annotations: Components.Schemas.ManifestAnnotateOptions.index_annotationsPayload?
            /// OS overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/os`.
            internal var os: Swift.String?
            /// OS features for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/os_features`.
            internal var os_features: [Swift.String]?
            /// OSVersion overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/os_version`.
            internal var os_version: Swift.String?
            /// IndexSubject is a subject value to set in the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/subject`.
            internal var subject: Swift.String?
            /// Variant for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestAnnotateOptions/variant`.
            internal var variant: Swift.String?
            /// Creates a new `ManifestAnnotateOptions`.
            ///
            /// - Parameters:
            ///   - annotation: Annotation to add to the item in the manifest list
            ///   - annotations: Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///   - arch: Arch overrides the architecture for the item in the manifest list
            ///   - features: Feature list for the item in the manifest list
            ///   - index_annotation: IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///   - index_annotations: IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///   - os: OS overrides the operating system for the item in the manifest list
            ///   - os_features: OS features for the item in the manifest list
            ///   - os_version: OSVersion overrides the operating system for the item in the manifest list
            ///   - subject: IndexSubject is a subject value to set in the manifest list itself
            ///   - variant: Variant for the item in the manifest list
            internal init(
                annotation: [Swift.String]? = nil,
                annotations: Components.Schemas.ManifestAnnotateOptions.annotationsPayload? = nil,
                arch: Swift.String? = nil,
                features: [Swift.String]? = nil,
                index_annotation: [Swift.String]? = nil,
                index_annotations: Components.Schemas.ManifestAnnotateOptions.index_annotationsPayload? = nil,
                os: Swift.String? = nil,
                os_features: [Swift.String]? = nil,
                os_version: Swift.String? = nil,
                subject: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.annotation = annotation
                self.annotations = annotations
                self.arch = arch
                self.features = features
                self.index_annotation = index_annotation
                self.index_annotations = index_annotations
                self.os = os
                self.os_features = os_features
                self.os_version = os_version
                self.subject = subject
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case annotation
                case annotations
                case arch
                case features
                case index_annotation
                case index_annotations
                case os
                case os_features
                case os_version
                case subject
                case variant
            }
        }
        /// - Remark: Generated from `#/components/schemas/ManifestKind`.
        internal typealias ManifestKind = Swift.String
        /// swagger 2.0 does not support oneOf for schema validation.
        ///
        /// Operation "update" uses all fields.
        /// Operation "remove" uses fields: Operation and Images
        /// Operation "annotate" uses fields: Operation and Annotations
        ///
        /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions`.
        internal struct ManifestModifyOptions: Codable, Hashable, Sendable {
            /// True when operating on a list to include all images
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/all`.
            internal var all: Swift.Bool?
            /// Annotation to add to the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/annotation`.
            internal var annotation: [Swift.String]?
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/annotations`.
            internal var annotations: Components.Schemas.ManifestModifyOptions.annotationsPayload?
            /// Arch overrides the architecture for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/arch`.
            internal var arch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_annotations`.
            internal struct artifact_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `artifact_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_annotations`.
            internal var artifact_annotations: Components.Schemas.ManifestModifyOptions.artifact_annotationsPayload?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_config`.
            internal var artifact_config: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_config_type`.
            internal var artifact_config_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_exclude_titles`.
            internal var artifact_exclude_titles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_files`.
            internal var artifact_files: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_layer_type`.
            internal var artifact_layer_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_subject`.
            internal var artifact_subject: Swift.String?
            /// The following are all of the fields from ManifestAddArtifactOptions.
            /// We can't just embed the whole structure because it embeds a
            /// ManifestAnnotateOptions, which would conflict with the one that
            /// ManifestAddOptions embeds.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/artifact_type`.
            internal var artifact_type: Swift.String?
            /// Feature list for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/features`.
            internal var features: [Swift.String]?
            /// Images is an optional list of image references to add to manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/images`.
            internal var images: [Swift.String]?
            /// IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/index_annotation`.
            internal var index_annotation: [Swift.String]?
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/index_annotations`.
            internal struct index_annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `index_annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/index_annotations`.
            internal var index_annotations: Components.Schemas.ManifestModifyOptions.index_annotationsPayload?
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/operation`.
            internal var operation: Swift.String?
            /// OS overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/os`.
            internal var os: Swift.String?
            /// OS features for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/os_features`.
            internal var os_features: [Swift.String]?
            /// OSVersion overrides the operating system for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/os_version`.
            internal var os_version: Swift.String?
            /// IndexSubject is a subject value to set in the manifest list itself
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/subject`.
            internal var subject: Swift.String?
            /// Variant for the item in the manifest list
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyOptions/variant`.
            internal var variant: Swift.String?
            /// Creates a new `ManifestModifyOptions`.
            ///
            /// - Parameters:
            ///   - all: True when operating on a list to include all images
            ///   - annotation: Annotation to add to the item in the manifest list
            ///   - annotations: Annotations to add to the item in the manifest list by a map which is preferred over Annotation
            ///   - arch: Arch overrides the architecture for the item in the manifest list
            ///   - artifact_annotations:
            ///   - artifact_config:
            ///   - artifact_config_type:
            ///   - artifact_exclude_titles:
            ///   - artifact_files:
            ///   - artifact_layer_type:
            ///   - artifact_subject:
            ///   - artifact_type: The following are all of the fields from ManifestAddArtifactOptions.
            ///   - features: Feature list for the item in the manifest list
            ///   - images: Images is an optional list of image references to add to manifest list
            ///   - index_annotation: IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
            ///   - index_annotations: IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
            ///   - operation:
            ///   - os: OS overrides the operating system for the item in the manifest list
            ///   - os_features: OS features for the item in the manifest list
            ///   - os_version: OSVersion overrides the operating system for the item in the manifest list
            ///   - subject: IndexSubject is a subject value to set in the manifest list itself
            ///   - variant: Variant for the item in the manifest list
            internal init(
                all: Swift.Bool? = nil,
                annotation: [Swift.String]? = nil,
                annotations: Components.Schemas.ManifestModifyOptions.annotationsPayload? = nil,
                arch: Swift.String? = nil,
                artifact_annotations: Components.Schemas.ManifestModifyOptions.artifact_annotationsPayload? = nil,
                artifact_config: Swift.String? = nil,
                artifact_config_type: Swift.String? = nil,
                artifact_exclude_titles: Swift.Bool? = nil,
                artifact_files: [Swift.String]? = nil,
                artifact_layer_type: Swift.String? = nil,
                artifact_subject: Swift.String? = nil,
                artifact_type: Swift.String? = nil,
                features: [Swift.String]? = nil,
                images: [Swift.String]? = nil,
                index_annotation: [Swift.String]? = nil,
                index_annotations: Components.Schemas.ManifestModifyOptions.index_annotationsPayload? = nil,
                operation: Swift.String? = nil,
                os: Swift.String? = nil,
                os_features: [Swift.String]? = nil,
                os_version: Swift.String? = nil,
                subject: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.all = all
                self.annotation = annotation
                self.annotations = annotations
                self.arch = arch
                self.artifact_annotations = artifact_annotations
                self.artifact_config = artifact_config
                self.artifact_config_type = artifact_config_type
                self.artifact_exclude_titles = artifact_exclude_titles
                self.artifact_files = artifact_files
                self.artifact_layer_type = artifact_layer_type
                self.artifact_subject = artifact_subject
                self.artifact_type = artifact_type
                self.features = features
                self.images = images
                self.index_annotation = index_annotation
                self.index_annotations = index_annotations
                self.operation = operation
                self.os = os
                self.os_features = os_features
                self.os_version = os_version
                self.subject = subject
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case all
                case annotation
                case annotations
                case arch
                case artifact_annotations
                case artifact_config
                case artifact_config_type
                case artifact_exclude_titles
                case artifact_files
                case artifact_layer_type
                case artifact_subject
                case artifact_type
                case features
                case images
                case index_annotation
                case index_annotations
                case operation
                case os
                case os_features
                case os_version
                case subject
                case variant
            }
        }
        /// - Remark: Generated from `#/components/schemas/ManifestModifyReport`.
        internal struct ManifestModifyReport: Codable, Hashable, Sendable {
            /// Manifest List ID
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyReport/Id`.
            internal var Id: Swift.String?
            /// Errors associated with operation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyReport/errors`.
            internal var errors: [Swift.String]?
            /// Files added to manifest list, otherwise not provided.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyReport/files`.
            internal var files: [Swift.String]?
            /// Images added to or removed from manifest list, otherwise not provided.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestModifyReport/images`.
            internal var images: [Swift.String]?
            /// Creates a new `ManifestModifyReport`.
            ///
            /// - Parameters:
            ///   - Id: Manifest List ID
            ///   - errors: Errors associated with operation
            ///   - files: Files added to manifest list, otherwise not provided.
            ///   - images: Images added to or removed from manifest list, otherwise not provided.
            internal init(
                Id: Swift.String? = nil,
                errors: [Swift.String]? = nil,
                files: [Swift.String]? = nil,
                images: [Swift.String]? = nil
            ) {
                self.Id = Id
                self.errors = errors
                self.files = files
                self.images = images
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case errors
                case files
                case images
            }
        }
        /// - Remark: Generated from `#/components/schemas/ManifestPushReport`.
        internal struct ManifestPushReport: Codable, Hashable, Sendable {
            /// ID of the pushed manifest
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestPushReport/Id`.
            internal var Id: Swift.String?
            /// Error contains text of errors from pushing
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestPushReport/error`.
            internal var error: Swift.String?
            /// Stream used to provide push progress
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestPushReport/stream`.
            internal var stream: Swift.String?
            /// Creates a new `ManifestPushReport`.
            ///
            /// - Parameters:
            ///   - Id: ID of the pushed manifest
            ///   - error: Error contains text of errors from pushing
            ///   - stream: Stream used to provide push progress
            internal init(
                Id: Swift.String? = nil,
                error: Swift.String? = nil,
                stream: Swift.String? = nil
            ) {
                self.Id = Id
                self.error = error
                self.stream = stream
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
                case error
                case stream
            }
        }
        /// ManifestRemoveOptions provides the model for removing digests from a manifest
        ///
        /// - Remark: Generated from `#/components/schemas/ManifestRemoveOptions`.
        internal typealias ManifestRemoveOptions = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/ManifestRemoveReport`.
        internal struct ManifestRemoveReport: Codable, Hashable, Sendable {
            /// Deleted manifest list.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestRemoveReport/Deleted`.
            internal var Deleted: [Swift.String]?
            /// Errors associated with operation
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestRemoveReport/Errors`.
            internal var Errors: [Swift.String]?
            /// ExitCode describes the exit codes as described in the `podman rmi`
            /// man page.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestRemoveReport/ExitCode`.
            internal var ExitCode: Swift.Int64?
            /// Untagged images. Can be longer than Deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestRemoveReport/Untagged`.
            internal var Untagged: [Swift.String]?
            /// Creates a new `ManifestRemoveReport`.
            ///
            /// - Parameters:
            ///   - Deleted: Deleted manifest list.
            ///   - Errors: Errors associated with operation
            ///   - ExitCode: ExitCode describes the exit codes as described in the `podman rmi`
            ///   - Untagged: Untagged images. Can be longer than Deleted.
            internal init(
                Deleted: [Swift.String]? = nil,
                Errors: [Swift.String]? = nil,
                ExitCode: Swift.Int64? = nil,
                Untagged: [Swift.String]? = nil
            ) {
                self.Deleted = Deleted
                self.Errors = Errors
                self.ExitCode = ExitCode
                self.Untagged = Untagged
            }
            internal enum CodingKeys: String, CodingKey {
                case Deleted
                case Errors
                case ExitCode
                case Untagged
            }
        }
        /// - Remark: Generated from `#/components/schemas/ManifestSummary`.
        internal struct ManifestSummary: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/AttestationData`.
            internal var AttestationData: Components.Schemas.AttestationProperties?
            /// Indicates whether all the child content (image config, layers) is
            /// fully available locally
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/Available`.
            internal var Available: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/Descriptor`.
            internal var Descriptor: Components.Schemas.Descriptor
            /// ID is the content-addressable ID of an image and is the same as the
            /// digest of the image manifest.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/ID`.
            internal var ID: Swift.String
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/ImageData`.
            internal var ImageData: Components.Schemas.ImageProperties?
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/Kind`.
            internal var Kind: Components.Schemas.ManifestKind
            /// Size is the size information of the content related to this manifest.
            /// Note: These sizes only take the locally available content into account.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/Size`.
            internal struct SizePayload: Codable, Hashable, Sendable {
                /// Content is the size (in bytes) of all the locally present
                /// content in the content store (e.g. image config, layers)
                /// referenced by this manifest and its children.
                /// This only includes blobs in the content store.
                ///
                /// - Remark: Generated from `#/components/schemas/ManifestSummary/Size/Content`.
                internal var Content: Swift.Int64?
                /// Total is the total size (in bytes) of all the locally present
                /// data (both distributable and non-distributable) that's related to
                /// this manifest and its children.
                /// This equal to the sum of [Content] size AND all the sizes in the
                /// [Size] struct present in the Kind-specific data struct.
                /// For example, for an image kind (Kind == ManifestKindImage),
                /// this would include the size of the image content and unpacked
                /// image snapshots ([Size.Content] + [ImageData.Size.Unpacked]).
                ///
                /// - Remark: Generated from `#/components/schemas/ManifestSummary/Size/Total`.
                internal var Total: Swift.Int64?
                /// Creates a new `SizePayload`.
                ///
                /// - Parameters:
                ///   - Content: Content is the size (in bytes) of all the locally present
                ///   - Total: Total is the total size (in bytes) of all the locally present
                internal init(
                    Content: Swift.Int64? = nil,
                    Total: Swift.Int64? = nil
                ) {
                    self.Content = Content
                    self.Total = Total
                }
                internal enum CodingKeys: String, CodingKey {
                    case Content
                    case Total
                }
            }
            /// Size is the size information of the content related to this manifest.
            /// Note: These sizes only take the locally available content into account.
            ///
            /// - Remark: Generated from `#/components/schemas/ManifestSummary/Size`.
            internal var Size: Components.Schemas.ManifestSummary.SizePayload
            /// Creates a new `ManifestSummary`.
            ///
            /// - Parameters:
            ///   - AttestationData:
            ///   - Available: Indicates whether all the child content (image config, layers) is
            ///   - Descriptor:
            ///   - ID: ID is the content-addressable ID of an image and is the same as the
            ///   - ImageData:
            ///   - Kind:
            ///   - Size: Size is the size information of the content related to this manifest.
            internal init(
                AttestationData: Components.Schemas.AttestationProperties? = nil,
                Available: Swift.Bool,
                Descriptor: Components.Schemas.Descriptor,
                ID: Swift.String,
                ImageData: Components.Schemas.ImageProperties? = nil,
                Kind: Components.Schemas.ManifestKind,
                Size: Components.Schemas.ManifestSummary.SizePayload
            ) {
                self.AttestationData = AttestationData
                self.Available = Available
                self.Descriptor = Descriptor
                self.ID = ID
                self.ImageData = ImageData
                self.Kind = Kind
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case AttestationData
                case Available
                case Descriptor
                case ID
                case ImageData
                case Kind
                case Size
            }
        }
        /// - Remark: Generated from `#/components/schemas/Meta`.
        internal struct Meta: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Meta/CreatedAt`.
            internal var CreatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Meta/UpdatedAt`.
            internal var UpdatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Meta/Version`.
            internal var Version: Components.Schemas.Version?
            /// Creates a new `Meta`.
            ///
            /// - Parameters:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Version:
            internal init(
                CreatedAt: Foundation.Date? = nil,
                UpdatedAt: Foundation.Date? = nil,
                Version: Components.Schemas.Version? = nil
            ) {
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case CreatedAt
                case UpdatedAt
                case Version
            }
        }
        /// - Remark: Generated from `#/components/schemas/Metadata`.
        internal struct Metadata: Codable, Hashable, Sendable {
            /// LastTagTime is the date and time at which the image was last tagged.
            ///
            /// - Remark: Generated from `#/components/schemas/Metadata/LastTagTime`.
            internal var LastTagTime: Foundation.Date?
            /// Creates a new `Metadata`.
            ///
            /// - Parameters:
            ///   - LastTagTime: LastTagTime is the date and time at which the image was last tagged.
            internal init(LastTagTime: Foundation.Date? = nil) {
                self.LastTagTime = LastTagTime
            }
            internal enum CodingKeys: String, CodingKey {
                case LastTagTime
            }
        }
        /// - Remark: Generated from `#/components/schemas/Mount`.
        internal struct Mount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Mount/BindOptions`.
            internal var BindOptions: Components.Schemas.BindOptions?
            /// - Remark: Generated from `#/components/schemas/Mount/ClusterOptions`.
            internal var ClusterOptions: Components.Schemas.ClusterOptions?
            /// - Remark: Generated from `#/components/schemas/Mount/Consistency`.
            internal var Consistency: Components.Schemas.Consistency?
            /// - Remark: Generated from `#/components/schemas/Mount/ReadOnly`.
            internal var ReadOnly: Swift.Bool?
            /// Source specifies the name of the mount. Depending on mount type, this
            /// may be a volume name or a host path, or even ignored.
            /// Source is not supported for tmpfs (must be an empty value)
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Source`.
            internal var Source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mount/Target`.
            internal var Target: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions`.
            internal var TmpfsOptions: Components.Schemas.TmpfsOptions?
            /// - Remark: Generated from `#/components/schemas/Mount/Type`.
            internal var _Type: Components.Schemas._Type?
            /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions`.
            internal var VolumeOptions: Components.Schemas.VolumeOptions?
            /// Creates a new `Mount`.
            ///
            /// - Parameters:
            ///   - BindOptions:
            ///   - ClusterOptions:
            ///   - Consistency:
            ///   - ReadOnly:
            ///   - Source: Source specifies the name of the mount. Depending on mount type, this
            ///   - Target:
            ///   - TmpfsOptions:
            ///   - _Type:
            ///   - VolumeOptions:
            internal init(
                BindOptions: Components.Schemas.BindOptions? = nil,
                ClusterOptions: Components.Schemas.ClusterOptions? = nil,
                Consistency: Components.Schemas.Consistency? = nil,
                ReadOnly: Swift.Bool? = nil,
                Source: Swift.String? = nil,
                Target: Swift.String? = nil,
                TmpfsOptions: Components.Schemas.TmpfsOptions? = nil,
                _Type: Components.Schemas._Type? = nil,
                VolumeOptions: Components.Schemas.VolumeOptions? = nil
            ) {
                self.BindOptions = BindOptions
                self.ClusterOptions = ClusterOptions
                self.Consistency = Consistency
                self.ReadOnly = ReadOnly
                self.Source = Source
                self.Target = Target
                self.TmpfsOptions = TmpfsOptions
                self._Type = _Type
                self.VolumeOptions = VolumeOptions
            }
            internal enum CodingKeys: String, CodingKey {
                case BindOptions
                case ClusterOptions
                case Consistency
                case ReadOnly
                case Source
                case Target
                case TmpfsOptions
                case _Type = "Type"
                case VolumeOptions
            }
        }
        /// This is used for reporting the mountpoints in use by a container.
        ///
        /// - Remark: Generated from `#/components/schemas/MountPoint`.
        internal struct MountPoint: Codable, Hashable, Sendable {
            /// Destination is the path relative to the container root (`/`) where the
            /// Source is mounted inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Destination`.
            internal var Destination: Swift.String?
            /// Driver is the volume driver used to create the volume (if it is a volume).
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Driver`.
            internal var Driver: Swift.String?
            /// Mode is a comma separated list of options supplied by the user when
            /// creating the bind/volume mount.
            ///
            /// The default is platform-specific (`"z"` on Linux, empty on Windows).
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Mode`.
            internal var Mode: Swift.String?
            /// Name is the name reference to the underlying data defined by `Source`
            /// e.g., the volume name.
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MountPoint/Propagation`.
            internal var Propagation: Components.Schemas.Propagation?
            /// RW indicates whether the mount is mounted writable (read-write).
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/RW`.
            internal var RW: Swift.Bool?
            /// Source is the source location of the mount.
            ///
            /// For volumes, this contains the storage location of the volume (within
            /// `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
            /// the source (host) part of the bind-mount. For `tmpfs` mount points, this
            /// field is empty.
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Source`.
            internal var Source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MountPoint/Type`.
            internal var _Type: Components.Schemas._Type?
            /// Creates a new `MountPoint`.
            ///
            /// - Parameters:
            ///   - Destination: Destination is the path relative to the container root (`/`) where the
            ///   - Driver: Driver is the volume driver used to create the volume (if it is a volume).
            ///   - Mode: Mode is a comma separated list of options supplied by the user when
            ///   - Name: Name is the name reference to the underlying data defined by `Source`
            ///   - Propagation:
            ///   - RW: RW indicates whether the mount is mounted writable (read-write).
            ///   - Source: Source is the source location of the mount.
            ///   - _Type:
            internal init(
                Destination: Swift.String? = nil,
                Driver: Swift.String? = nil,
                Mode: Swift.String? = nil,
                Name: Swift.String? = nil,
                Propagation: Components.Schemas.Propagation? = nil,
                RW: Swift.Bool? = nil,
                Source: Swift.String? = nil,
                _Type: Components.Schemas._Type? = nil
            ) {
                self.Destination = Destination
                self.Driver = Driver
                self.Mode = Mode
                self.Name = Name
                self.Propagation = Propagation
                self.RW = RW
                self.Source = Source
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Destination
                case Driver
                case Mode
                case Name
                case Propagation
                case RW
                case Source
                case _Type = "Type"
            }
        }
        /// NamedVolume holds information about a named volume that will be mounted into
        /// the container.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedVolume`.
        internal struct NamedVolume: Codable, Hashable, Sendable {
            /// Destination to mount the named volume within the container. Must be
            /// an absolute path. Path will be created if it does not exist.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedVolume/Dest`.
            internal var Dest: Swift.String?
            /// IsAnonymous sets the named volume as anonymous even if it has a name
            /// This is used for emptyDir volumes from a kube yaml
            ///
            /// - Remark: Generated from `#/components/schemas/NamedVolume/IsAnonymous`.
            internal var IsAnonymous: Swift.Bool?
            /// Name is the name of the named volume to be mounted. May be empty.
            /// If empty, a new named volume with a pseudorandomly generated name
            /// will be mounted at the given destination.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedVolume/Name`.
            internal var Name: Swift.String?
            /// Options are options that the named volume will be mounted with.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedVolume/Options`.
            internal var Options: [Swift.String]?
            /// SubPath stores the sub directory of the named volume to be mounted in the container
            ///
            /// - Remark: Generated from `#/components/schemas/NamedVolume/SubPath`.
            internal var SubPath: Swift.String?
            /// Creates a new `NamedVolume`.
            ///
            /// - Parameters:
            ///   - Dest: Destination to mount the named volume within the container. Must be
            ///   - IsAnonymous: IsAnonymous sets the named volume as anonymous even if it has a name
            ///   - Name: Name is the name of the named volume to be mounted. May be empty.
            ///   - Options: Options are options that the named volume will be mounted with.
            ///   - SubPath: SubPath stores the sub directory of the named volume to be mounted in the container
            internal init(
                Dest: Swift.String? = nil,
                IsAnonymous: Swift.Bool? = nil,
                Name: Swift.String? = nil,
                Options: [Swift.String]? = nil,
                SubPath: Swift.String? = nil
            ) {
                self.Dest = Dest
                self.IsAnonymous = IsAnonymous
                self.Name = Name
                self.Options = Options
                self.SubPath = SubPath
            }
            internal enum CodingKeys: String, CodingKey {
                case Dest
                case IsAnonymous
                case Name
                case Options
                case SubPath
            }
        }
        /// Namespace describes the namespace
        ///
        /// - Remark: Generated from `#/components/schemas/Namespace`.
        internal struct Namespace: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Namespace/nsmode`.
            internal var nsmode: Components.Schemas.NamespaceMode?
            /// - Remark: Generated from `#/components/schemas/Namespace/value`.
            internal var value: Swift.String?
            /// Creates a new `Namespace`.
            ///
            /// - Parameters:
            ///   - nsmode:
            ///   - value:
            internal init(
                nsmode: Components.Schemas.NamespaceMode? = nil,
                value: Swift.String? = nil
            ) {
                self.nsmode = nsmode
                self.value = value
            }
            internal enum CodingKeys: String, CodingKey {
                case nsmode
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/NamespaceMode`.
        internal typealias NamespaceMode = Swift.String
        /// - Remark: Generated from `#/components/schemas/NetAddress`.
        internal struct NetAddress: Codable, Hashable, Sendable {
            /// Gateway for the network. This can be empty if there is no gateway, e.g. internal network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetAddress/gateway`.
            internal var gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetAddress/ipnet`.
            internal var ipnet: Components.Schemas.IPNet?
            /// Creates a new `NetAddress`.
            ///
            /// - Parameters:
            ///   - gateway: Gateway for the network. This can be empty if there is no gateway, e.g. internal network.
            ///   - ipnet:
            internal init(
                gateway: Swift.String? = nil,
                ipnet: Components.Schemas.IPNet? = nil
            ) {
                self.gateway = gateway
                self.ipnet = ipnet
            }
            internal enum CodingKeys: String, CodingKey {
                case gateway
                case ipnet
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetInterface`.
        internal struct NetInterface: Codable, Hashable, Sendable {
            /// MacAddress for this Interface.
            ///
            /// - Remark: Generated from `#/components/schemas/NetInterface/mac_address`.
            internal var mac_address: Swift.String?
            /// Subnets list of assigned subnets with their gateway.
            ///
            /// - Remark: Generated from `#/components/schemas/NetInterface/subnets`.
            internal var subnets: [Components.Schemas.NetAddress]?
            /// Creates a new `NetInterface`.
            ///
            /// - Parameters:
            ///   - mac_address: MacAddress for this Interface.
            ///   - subnets: Subnets list of assigned subnets with their gateway.
            internal init(
                mac_address: Swift.String? = nil,
                subnets: [Components.Schemas.NetAddress]? = nil
            ) {
                self.mac_address = mac_address
                self.subnets = subnets
            }
            internal enum CodingKeys: String, CodingKey {
                case mac_address
                case subnets
            }
        }
        /// NetOptions reflect the shared network options between
        /// pods and containers
        ///
        /// - Remark: Generated from `#/components/schemas/NetOptions`.
        internal struct NetOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetOptions/dns_option`.
            internal var dns_option: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetOptions/dns_search`.
            internal var dns_search: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetOptions/dns_server`.
            internal var dns_server: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetOptions/hostadd`.
            internal var hostadd: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetOptions/hosts_file`.
            internal var hosts_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetOptions/netns`.
            internal var netns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/NetOptions/network_alias`.
            internal var network_alias: [Swift.String]?
            /// NetworkOptions are additional options for each network
            ///
            /// - Remark: Generated from `#/components/schemas/NetOptions/network_options`.
            internal struct network_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `network_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            ///
            /// - Remark: Generated from `#/components/schemas/NetOptions/network_options`.
            internal var network_options: Components.Schemas.NetOptions.network_optionsPayload?
            /// - Remark: Generated from `#/components/schemas/NetOptions/networks`.
            internal struct networksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PerNetworkOptions]
                /// Creates a new `networksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PerNetworkOptions] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NetOptions/networks`.
            internal var networks: Components.Schemas.NetOptions.networksPayload?
            /// - Remark: Generated from `#/components/schemas/NetOptions/no_manage_hostname`.
            internal var no_manage_hostname: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/NetOptions/no_manage_hosts`.
            internal var no_manage_hosts: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/NetOptions/no_manage_resolv_conf`.
            internal var no_manage_resolv_conf: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/NetOptions/portmappings`.
            internal var portmappings: [Components.Schemas.PortMapping]?
            /// Creates a new `NetOptions`.
            ///
            /// - Parameters:
            ///   - dns_option:
            ///   - dns_search:
            ///   - dns_server:
            ///   - hostadd:
            ///   - hosts_file:
            ///   - netns:
            ///   - network_alias:
            ///   - network_options: NetworkOptions are additional options for each network
            ///   - networks:
            ///   - no_manage_hostname:
            ///   - no_manage_hosts:
            ///   - no_manage_resolv_conf:
            ///   - portmappings:
            internal init(
                dns_option: [Swift.String]? = nil,
                dns_search: [Swift.String]? = nil,
                dns_server: [Swift.String]? = nil,
                hostadd: [Swift.String]? = nil,
                hosts_file: Swift.String? = nil,
                netns: Components.Schemas.Namespace? = nil,
                network_alias: [Swift.String]? = nil,
                network_options: Components.Schemas.NetOptions.network_optionsPayload? = nil,
                networks: Components.Schemas.NetOptions.networksPayload? = nil,
                no_manage_hostname: Swift.Bool? = nil,
                no_manage_hosts: Swift.Bool? = nil,
                no_manage_resolv_conf: Swift.Bool? = nil,
                portmappings: [Components.Schemas.PortMapping]? = nil
            ) {
                self.dns_option = dns_option
                self.dns_search = dns_search
                self.dns_server = dns_server
                self.hostadd = hostadd
                self.hosts_file = hosts_file
                self.netns = netns
                self.network_alias = network_alias
                self.network_options = network_options
                self.networks = networks
                self.no_manage_hostname = no_manage_hostname
                self.no_manage_hosts = no_manage_hosts
                self.no_manage_resolv_conf = no_manage_resolv_conf
                self.portmappings = portmappings
            }
            internal enum CodingKeys: String, CodingKey {
                case dns_option
                case dns_search
                case dns_server
                case hostadd
                case hosts_file
                case netns
                case network_alias
                case network_options
                case networks
                case no_manage_hostname
                case no_manage_hosts
                case no_manage_resolv_conf
                case portmappings
            }
        }
        /// - Remark: Generated from `#/components/schemas/Network`.
        internal struct Network: Codable, Hashable, Sendable {
            /// Created contains the timestamp when this network was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/created`.
            internal var created: Foundation.Date?
            /// DNSEnabled is whether name resolution is active for container on
            /// this Network. Only supported with the bridge driver.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/dns_enabled`.
            internal var dns_enabled: Swift.Bool?
            /// Driver for this Network, e.g. bridge, macvlan...
            ///
            /// - Remark: Generated from `#/components/schemas/Network/driver`.
            internal var driver: Swift.String?
            /// ID of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/id`.
            internal var id: Swift.String?
            /// Internal is whether the Network should not have external routes
            /// to public or other Networks.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/internal`.
            internal var _internal: Swift.Bool?
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/ipam_options`.
            internal struct ipam_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ipam_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/ipam_options`.
            internal var ipam_options: Components.Schemas.Network.ipam_optionsPayload?
            /// IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/ipv6_enabled`.
            internal var ipv6_enabled: Swift.Bool?
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/labels`.
            internal var labels: Components.Schemas.Network.labelsPayload?
            /// Name of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/name`.
            internal var name: Swift.String?
            /// List of custom DNS server for podman's DNS resolver at network level,
            /// all the containers attached to this network will consider resolvers
            /// configured at network level.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/network_dns_servers`.
            internal var network_dns_servers: [Swift.String]?
            /// NetworkInterface is the network interface name on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/network_interface`.
            internal var network_interface: Swift.String?
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/options`.
            internal var options: Components.Schemas.Network.optionsPayload?
            /// Routes to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/routes`.
            internal var routes: [Components.Schemas.Route]?
            /// Subnets to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/subnets`.
            internal var subnets: [Components.Schemas.Subnet]?
            /// Creates a new `Network`.
            ///
            /// - Parameters:
            ///   - created: Created contains the timestamp when this network was created.
            ///   - dns_enabled: DNSEnabled is whether name resolution is active for container on
            ///   - driver: Driver for this Network, e.g. bridge, macvlan...
            ///   - id: ID of the Network.
            ///   - _internal: Internal is whether the Network should not have external routes
            ///   - ipam_options: IPAMOptions contains options used for the ip assignment.
            ///   - ipv6_enabled: IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///   - labels: Labels is a set of key-value labels that have been applied to the
            ///   - name: Name of the Network.
            ///   - network_dns_servers: List of custom DNS server for podman's DNS resolver at network level,
            ///   - network_interface: NetworkInterface is the network interface name on the host.
            ///   - options: Options is a set of key-value options that have been applied to
            ///   - routes: Routes to use for this network.
            ///   - subnets: Subnets to use for this network.
            internal init(
                created: Foundation.Date? = nil,
                dns_enabled: Swift.Bool? = nil,
                driver: Swift.String? = nil,
                id: Swift.String? = nil,
                _internal: Swift.Bool? = nil,
                ipam_options: Components.Schemas.Network.ipam_optionsPayload? = nil,
                ipv6_enabled: Swift.Bool? = nil,
                labels: Components.Schemas.Network.labelsPayload? = nil,
                name: Swift.String? = nil,
                network_dns_servers: [Swift.String]? = nil,
                network_interface: Swift.String? = nil,
                options: Components.Schemas.Network.optionsPayload? = nil,
                routes: [Components.Schemas.Route]? = nil,
                subnets: [Components.Schemas.Subnet]? = nil
            ) {
                self.created = created
                self.dns_enabled = dns_enabled
                self.driver = driver
                self.id = id
                self._internal = _internal
                self.ipam_options = ipam_options
                self.ipv6_enabled = ipv6_enabled
                self.labels = labels
                self.name = name
                self.network_dns_servers = network_dns_servers
                self.network_interface = network_interface
                self.options = options
                self.routes = routes
                self.subnets = subnets
            }
            internal enum CodingKeys: String, CodingKey {
                case created
                case dns_enabled
                case driver
                case id
                case _internal = "internal"
                case ipam_options
                case ipv6_enabled
                case labels
                case name
                case network_dns_servers
                case network_interface
                case options
                case routes
                case subnets
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkBackend`.
        internal typealias NetworkBackend = Swift.String
        /// NetworkConnectOptions describes options for connecting
        /// a container to a network
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions`.
        internal struct NetworkConnectOptions: Codable, Hashable, Sendable {
            /// Aliases contains a list of names which the dns server should resolve
            /// to this container. Should only be set when DNSEnabled is true on the Network.
            /// If aliases are set but there is no dns support for this network the
            /// network interface implementation should ignore this and NOT error.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/aliases`.
            internal var aliases: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/container`.
            internal var container: Swift.String?
            /// InterfaceName for this container. Required in the backend.
            /// Optional in the frontend. Will be filled with ethX (where X is a integer) when empty.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/interface_name`.
            internal var interface_name: Swift.String?
            /// Driver-specific options for this container.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Driver-specific options for this container.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/options`.
            internal var options: Components.Schemas.NetworkConnectOptions.optionsPayload?
            /// StaticIPs for this container. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/static_ips`.
            internal var static_ips: [Swift.String]?
            /// StaticMac for this container. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkConnectOptions/static_mac`.
            internal var static_mac: Swift.String?
            /// Creates a new `NetworkConnectOptions`.
            ///
            /// - Parameters:
            ///   - aliases: Aliases contains a list of names which the dns server should resolve
            ///   - container:
            ///   - interface_name: InterfaceName for this container. Required in the backend.
            ///   - options: Driver-specific options for this container.
            ///   - static_ips: StaticIPs for this container. Optional.
            ///   - static_mac: StaticMac for this container. Optional.
            internal init(
                aliases: [Swift.String]? = nil,
                container: Swift.String? = nil,
                interface_name: Swift.String? = nil,
                options: Components.Schemas.NetworkConnectOptions.optionsPayload? = nil,
                static_ips: [Swift.String]? = nil,
                static_mac: Swift.String? = nil
            ) {
                self.aliases = aliases
                self.container = container
                self.interface_name = interface_name
                self.options = options
                self.static_ips = static_ips
                self.static_mac = static_mac
            }
            internal enum CodingKeys: String, CodingKey {
                case aliases
                case container
                case interface_name
                case options
                case static_ips
                case static_mac
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkContainerInfo`.
        internal struct NetworkContainerInfo: Codable, Hashable, Sendable {
            /// Interfaces configured for this container with their addresses
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkContainerInfo/interfaces`.
            internal struct interfacesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.NetInterface]
                /// Creates a new `interfacesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.NetInterface] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Interfaces configured for this container with their addresses
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkContainerInfo/interfaces`.
            internal var interfaces: Components.Schemas.NetworkContainerInfo.interfacesPayload?
            /// Name of the container
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkContainerInfo/name`.
            internal var name: Swift.String?
            /// Creates a new `NetworkContainerInfo`.
            ///
            /// - Parameters:
            ///   - interfaces: Interfaces configured for this container with their addresses
            ///   - name: Name of the container
            internal init(
                interfaces: Components.Schemas.NetworkContainerInfo.interfacesPayload? = nil,
                name: Swift.String? = nil
            ) {
                self.interfaces = interfaces
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case interfaces
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkInfo`.
        internal struct NetworkInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkInfo/backend`.
            internal var backend: Components.Schemas.NetworkBackend?
            /// - Remark: Generated from `#/components/schemas/NetworkInfo/dns`.
            internal var dns: Components.Schemas.DNSNetworkInfo?
            /// - Remark: Generated from `#/components/schemas/NetworkInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkInfo/path`.
            internal var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `NetworkInfo`.
            ///
            /// - Parameters:
            ///   - backend:
            ///   - dns:
            ///   - package:
            ///   - path:
            ///   - version:
            internal init(
                backend: Components.Schemas.NetworkBackend? = nil,
                dns: Components.Schemas.DNSNetworkInfo? = nil,
                package: Swift.String? = nil,
                path: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.backend = backend
                self.dns = dns
                self.package = package
                self.path = path
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case backend
                case dns
                case package
                case path
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkInspectReport`.
        internal struct NetworkInspectReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/containers`.
            internal struct containersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.NetworkContainerInfo]
                /// Creates a new `containersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.NetworkContainerInfo] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/containers`.
            internal var containers: Components.Schemas.NetworkInspectReport.containersPayload?
            /// Created contains the timestamp when this network was created.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/created`.
            internal var created: Foundation.Date?
            /// DNSEnabled is whether name resolution is active for container on
            /// this Network. Only supported with the bridge driver.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/dns_enabled`.
            internal var dns_enabled: Swift.Bool?
            /// Driver for this Network, e.g. bridge, macvlan...
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/driver`.
            internal var driver: Swift.String?
            /// ID of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/id`.
            internal var id: Swift.String?
            /// Internal is whether the Network should not have external routes
            /// to public or other Networks.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/internal`.
            internal var _internal: Swift.Bool?
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/ipam_options`.
            internal struct ipam_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ipam_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/ipam_options`.
            internal var ipam_options: Components.Schemas.NetworkInspectReport.ipam_optionsPayload?
            /// IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/ipv6_enabled`.
            internal var ipv6_enabled: Swift.Bool?
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/labels`.
            internal var labels: Components.Schemas.NetworkInspectReport.labelsPayload?
            /// Name of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/name`.
            internal var name: Swift.String?
            /// List of custom DNS server for podman's DNS resolver at network level,
            /// all the containers attached to this network will consider resolvers
            /// configured at network level.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/network_dns_servers`.
            internal var network_dns_servers: [Swift.String]?
            /// NetworkInterface is the network interface name on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/network_interface`.
            internal var network_interface: Swift.String?
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/options`.
            internal var options: Components.Schemas.NetworkInspectReport.optionsPayload?
            /// Routes to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/routes`.
            internal var routes: [Components.Schemas.Route]?
            /// Subnets to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkInspectReport/subnets`.
            internal var subnets: [Components.Schemas.Subnet]?
            /// Creates a new `NetworkInspectReport`.
            ///
            /// - Parameters:
            ///   - containers:
            ///   - created: Created contains the timestamp when this network was created.
            ///   - dns_enabled: DNSEnabled is whether name resolution is active for container on
            ///   - driver: Driver for this Network, e.g. bridge, macvlan...
            ///   - id: ID of the Network.
            ///   - _internal: Internal is whether the Network should not have external routes
            ///   - ipam_options: IPAMOptions contains options used for the ip assignment.
            ///   - ipv6_enabled: IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///   - labels: Labels is a set of key-value labels that have been applied to the
            ///   - name: Name of the Network.
            ///   - network_dns_servers: List of custom DNS server for podman's DNS resolver at network level,
            ///   - network_interface: NetworkInterface is the network interface name on the host.
            ///   - options: Options is a set of key-value options that have been applied to
            ///   - routes: Routes to use for this network.
            ///   - subnets: Subnets to use for this network.
            internal init(
                containers: Components.Schemas.NetworkInspectReport.containersPayload? = nil,
                created: Foundation.Date? = nil,
                dns_enabled: Swift.Bool? = nil,
                driver: Swift.String? = nil,
                id: Swift.String? = nil,
                _internal: Swift.Bool? = nil,
                ipam_options: Components.Schemas.NetworkInspectReport.ipam_optionsPayload? = nil,
                ipv6_enabled: Swift.Bool? = nil,
                labels: Components.Schemas.NetworkInspectReport.labelsPayload? = nil,
                name: Swift.String? = nil,
                network_dns_servers: [Swift.String]? = nil,
                network_interface: Swift.String? = nil,
                options: Components.Schemas.NetworkInspectReport.optionsPayload? = nil,
                routes: [Components.Schemas.Route]? = nil,
                subnets: [Components.Schemas.Subnet]? = nil
            ) {
                self.containers = containers
                self.created = created
                self.dns_enabled = dns_enabled
                self.driver = driver
                self.id = id
                self._internal = _internal
                self.ipam_options = ipam_options
                self.ipv6_enabled = ipv6_enabled
                self.labels = labels
                self.name = name
                self.network_dns_servers = network_dns_servers
                self.network_interface = network_interface
                self.options = options
                self.routes = routes
                self.subnets = subnets
            }
            internal enum CodingKeys: String, CodingKey {
                case containers
                case created
                case dns_enabled
                case driver
                case id
                case _internal = "internal"
                case ipam_options
                case ipv6_enabled
                case labels
                case name
                case network_dns_servers
                case network_interface
                case options
                case routes
                case subnets
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkMode`.
        internal typealias NetworkMode = Swift.String
        /// NetworkPruneReport containers the name of network and an error
        /// associated in its pruning (removal)
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkPruneReport`.
        internal struct NetworkPruneReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkPruneReport/Error`.
            internal var _Error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkPruneReport/Name`.
            internal var Name: Swift.String?
            /// Creates a new `NetworkPruneReport`.
            ///
            /// - Parameters:
            ///   - _Error:
            ///   - Name:
            internal init(
                _Error: Swift.String? = nil,
                Name: Swift.String? = nil
            ) {
                self._Error = _Error
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case _Error = "Error"
                case Name
            }
        }
        /// NetworkRmReport describes the results of network removal
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkRmReport`.
        internal struct NetworkRmReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkRmReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkRmReport/Name`.
            internal var Name: Swift.String?
            /// Creates a new `NetworkRmReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - Name:
            internal init(
                Err: Swift.String? = nil,
                Name: Swift.String? = nil
            ) {
                self.Err = Err
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Name
            }
        }
        /// NetworkSettings exposes the network settings in the api
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkSettings`.
        internal struct NetworkSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Bridge`.
            internal var Bridge: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/EndpointID`.
            internal var EndpointID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Gateway`.
            internal var Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/GlobalIPv6Address`.
            internal var GlobalIPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/GlobalIPv6PrefixLen`.
            internal var GlobalIPv6PrefixLen: Swift.Int64?
            /// HairpinMode specifies if hairpin NAT should be enabled on the virtual interface
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/HairpinMode`.
            internal var HairpinMode: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPAddress`.
            internal var IPAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPPrefixLen`.
            internal var IPPrefixLen: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPv6Gateway`.
            internal var IPv6Gateway: Swift.String?
            /// LinkLocalIPv6Address is an IPv6 unicast address using the link-local prefix
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/LinkLocalIPv6Address`.
            internal var LinkLocalIPv6Address: Swift.String?
            /// LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast address
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/LinkLocalIPv6PrefixLen`.
            internal var LinkLocalIPv6PrefixLen: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/MacAddress`.
            internal var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.EndpointSettings]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Networks`.
            internal var Networks: Components.Schemas.NetworkSettings.NetworksPayload?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Ports`.
            internal var Ports: Components.Schemas.PortMap?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SandboxID`.
            internal var SandboxID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SandboxKey`.
            internal var SandboxKey: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SecondaryIPAddresses`.
            internal var SecondaryIPAddresses: [Components.Schemas.Address]?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SecondaryIPv6Addresses`.
            internal var SecondaryIPv6Addresses: [Components.Schemas.Address]?
            /// Creates a new `NetworkSettings`.
            ///
            /// - Parameters:
            ///   - Bridge:
            ///   - EndpointID:
            ///   - Gateway:
            ///   - GlobalIPv6Address:
            ///   - GlobalIPv6PrefixLen:
            ///   - HairpinMode: HairpinMode specifies if hairpin NAT should be enabled on the virtual interface
            ///   - IPAddress:
            ///   - IPPrefixLen:
            ///   - IPv6Gateway:
            ///   - LinkLocalIPv6Address: LinkLocalIPv6Address is an IPv6 unicast address using the link-local prefix
            ///   - LinkLocalIPv6PrefixLen: LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast address
            ///   - MacAddress:
            ///   - Networks:
            ///   - Ports:
            ///   - SandboxID:
            ///   - SandboxKey:
            ///   - SecondaryIPAddresses:
            ///   - SecondaryIPv6Addresses:
            internal init(
                Bridge: Swift.String? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int64? = nil,
                HairpinMode: Swift.Bool? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int64? = nil,
                IPv6Gateway: Swift.String? = nil,
                LinkLocalIPv6Address: Swift.String? = nil,
                LinkLocalIPv6PrefixLen: Swift.Int64? = nil,
                MacAddress: Swift.String? = nil,
                Networks: Components.Schemas.NetworkSettings.NetworksPayload? = nil,
                Ports: Components.Schemas.PortMap? = nil,
                SandboxID: Swift.String? = nil,
                SandboxKey: Swift.String? = nil,
                SecondaryIPAddresses: [Components.Schemas.Address]? = nil,
                SecondaryIPv6Addresses: [Components.Schemas.Address]? = nil
            ) {
                self.Bridge = Bridge
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.HairpinMode = HairpinMode
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.LinkLocalIPv6Address = LinkLocalIPv6Address
                self.LinkLocalIPv6PrefixLen = LinkLocalIPv6PrefixLen
                self.MacAddress = MacAddress
                self.Networks = Networks
                self.Ports = Ports
                self.SandboxID = SandboxID
                self.SandboxKey = SandboxKey
                self.SecondaryIPAddresses = SecondaryIPAddresses
                self.SecondaryIPv6Addresses = SecondaryIPv6Addresses
            }
            internal enum CodingKeys: String, CodingKey {
                case Bridge
                case EndpointID
                case Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case HairpinMode
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case LinkLocalIPv6Address
                case LinkLocalIPv6PrefixLen
                case MacAddress
                case Networks
                case Ports
                case SandboxID
                case SandboxKey
                case SecondaryIPAddresses
                case SecondaryIPv6Addresses
            }
        }
        /// NetworkUpdateOptions describes options to update a network
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkUpdateOptions`.
        internal struct NetworkUpdateOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkUpdateOptions/adddnsservers`.
            internal var adddnsservers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NetworkUpdateOptions/removednsservers`.
            internal var removednsservers: [Swift.String]?
            /// Creates a new `NetworkUpdateOptions`.
            ///
            /// - Parameters:
            ///   - adddnsservers:
            ///   - removednsservers:
            internal init(
                adddnsservers: [Swift.String]? = nil,
                removednsservers: [Swift.String]? = nil
            ) {
                self.adddnsservers = adddnsservers
                self.removednsservers = removednsservers
            }
            internal enum CodingKeys: String, CodingKey {
                case adddnsservers
                case removednsservers
            }
        }
        /// NetworkingConfig represents the container's networking configuration for each of its interfaces
        /// Carries the networking configs specified in the `docker run` and `docker network connect` commands
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkingConfig`.
        internal struct NetworkingConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkingConfig/EndpointsConfig`.
            internal struct EndpointsConfigPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.EndpointSettings]
                /// Creates a new `EndpointsConfigPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NetworkingConfig/EndpointsConfig`.
            internal var EndpointsConfig: Components.Schemas.NetworkingConfig.EndpointsConfigPayload?
            /// Creates a new `NetworkingConfig`.
            ///
            /// - Parameters:
            ///   - EndpointsConfig:
            internal init(EndpointsConfig: Components.Schemas.NetworkingConfig.EndpointsConfigPayload? = nil) {
                self.EndpointsConfig = EndpointsConfig
            }
            internal enum CodingKeys: String, CodingKey {
                case EndpointsConfig
            }
        }
        /// OCIRuntimeInfo describes the runtime (crun or runc) being
        /// used with podman
        ///
        /// - Remark: Generated from `#/components/schemas/OCIRuntimeInfo`.
        internal struct OCIRuntimeInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OCIRuntimeInfo/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OCIRuntimeInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OCIRuntimeInfo/path`.
            internal var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OCIRuntimeInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `OCIRuntimeInfo`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - package:
            ///   - path:
            ///   - version:
            internal init(
                name: Swift.String? = nil,
                package: Swift.String? = nil,
                path: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.name = name
                self.package = package
                self.path = path
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case package
                case path
                case version
            }
        }
        /// OverlayVolume holds information about an overlay volume that will be mounted into
        /// the container.
        ///
        /// - Remark: Generated from `#/components/schemas/OverlayVolume`.
        internal struct OverlayVolume: Codable, Hashable, Sendable {
            /// Destination is the absolute path where the mount will be placed in the container.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayVolume/destination`.
            internal var destination: Swift.String?
            /// Options holds overlay volume options.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayVolume/options`.
            internal var options: [Swift.String]?
            /// Source specifies the source path of the mount.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayVolume/source`.
            internal var source: Swift.String?
            /// Creates a new `OverlayVolume`.
            ///
            /// - Parameters:
            ///   - destination: Destination is the absolute path where the mount will be placed in the container.
            ///   - options: Options holds overlay volume options.
            ///   - source: Source specifies the source path of the mount.
            internal init(
                destination: Swift.String? = nil,
                options: [Swift.String]? = nil,
                source: Swift.String? = nil
            ) {
                self.destination = destination
                self.options = options
                self.source = source
            }
            internal enum CodingKeys: String, CodingKey {
                case destination
                case options
                case source
            }
        }
        /// POSIXRlimit type and restrictions
        ///
        /// - Remark: Generated from `#/components/schemas/POSIXRlimit`.
        internal struct POSIXRlimit: Codable, Hashable, Sendable {
            /// Hard is the hard limit for the specified type
            ///
            /// - Remark: Generated from `#/components/schemas/POSIXRlimit/hard`.
            internal var hard: Swift.Int?
            /// Soft is the soft limit for the specified type
            ///
            /// - Remark: Generated from `#/components/schemas/POSIXRlimit/soft`.
            internal var soft: Swift.Int?
            /// Type of the rlimit to set
            ///
            /// - Remark: Generated from `#/components/schemas/POSIXRlimit/type`.
            internal var _type: Swift.String?
            /// Creates a new `POSIXRlimit`.
            ///
            /// - Parameters:
            ///   - hard: Hard is the hard limit for the specified type
            ///   - soft: Soft is the soft limit for the specified type
            ///   - _type: Type of the rlimit to set
            internal init(
                hard: Swift.Int? = nil,
                soft: Swift.Int? = nil,
                _type: Swift.String? = nil
            ) {
                self.hard = hard
                self.soft = soft
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case hard
                case soft
                case _type = "type"
            }
        }
        /// PastaInfo describes the pasta executable that is being used
        ///
        /// - Remark: Generated from `#/components/schemas/PastaInfo`.
        internal struct PastaInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PastaInfo/executable`.
            internal var executable: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PastaInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PastaInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `PastaInfo`.
            ///
            /// - Parameters:
            ///   - executable:
            ///   - package:
            ///   - version:
            internal init(
                executable: Swift.String? = nil,
                package: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.executable = executable
                self.package = package
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case executable
                case package
                case version
            }
        }
        /// PeerInfo represents one peer of an overlay network
        ///
        /// - Remark: Generated from `#/components/schemas/PeerInfo`.
        internal struct PeerInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PeerInfo/IP`.
            internal var IP: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PeerInfo/Name`.
            internal var Name: Swift.String?
            /// Creates a new `PeerInfo`.
            ///
            /// - Parameters:
            ///   - IP:
            ///   - Name:
            internal init(
                IP: Swift.String? = nil,
                Name: Swift.String? = nil
            ) {
                self.IP = IP
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case IP
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/PerNetworkOptions`.
        internal struct PerNetworkOptions: Codable, Hashable, Sendable {
            /// Aliases contains a list of names which the dns server should resolve
            /// to this container. Should only be set when DNSEnabled is true on the Network.
            /// If aliases are set but there is no dns support for this network the
            /// network interface implementation should ignore this and NOT error.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/aliases`.
            internal var aliases: [Swift.String]?
            /// InterfaceName for this container. Required in the backend.
            /// Optional in the frontend. Will be filled with ethX (where X is a integer) when empty.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/interface_name`.
            internal var interface_name: Swift.String?
            /// Driver-specific options for this container.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Driver-specific options for this container.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/options`.
            internal var options: Components.Schemas.PerNetworkOptions.optionsPayload?
            /// StaticIPs for this container. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/static_ips`.
            internal var static_ips: [Swift.String]?
            /// StaticMac for this container. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PerNetworkOptions/static_mac`.
            internal var static_mac: Swift.String?
            /// Creates a new `PerNetworkOptions`.
            ///
            /// - Parameters:
            ///   - aliases: Aliases contains a list of names which the dns server should resolve
            ///   - interface_name: InterfaceName for this container. Required in the backend.
            ///   - options: Driver-specific options for this container.
            ///   - static_ips: StaticIPs for this container. Optional.
            ///   - static_mac: StaticMac for this container. Optional.
            internal init(
                aliases: [Swift.String]? = nil,
                interface_name: Swift.String? = nil,
                options: Components.Schemas.PerNetworkOptions.optionsPayload? = nil,
                static_ips: [Swift.String]? = nil,
                static_mac: Swift.String? = nil
            ) {
                self.aliases = aliases
                self.interface_name = interface_name
                self.options = options
                self.static_ips = static_ips
                self.static_mac = static_mac
            }
            internal enum CodingKeys: String, CodingKey {
                case aliases
                case interface_name
                case options
                case static_ips
                case static_mac
            }
        }
        /// - Remark: Generated from `#/components/schemas/PidMode`.
        internal typealias PidMode = Swift.String
        /// - Remark: Generated from `#/components/schemas/Platform`.
        internal struct Platform: Codable, Hashable, Sendable {
            /// Architecture field specifies the CPU architecture, for example
            /// `amd64` or `ppc64le`.
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/architecture`.
            internal var architecture: Swift.String?
            /// OS specifies the operating system, for example `linux` or `windows`.
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/os`.
            internal var os: Swift.String?
            /// OSFeatures is an optional field specifying an array of strings,
            /// each listing a required OS feature (for example on Windows `win32k`).
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/os.features`.
            internal var os_period_features: [Swift.String]?
            /// OSVersion is an optional field specifying the operating system
            /// version, for example on Windows `10.0.14393.1066`.
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/os.version`.
            internal var os_period_version: Swift.String?
            /// Variant is an optional field specifying a variant of the CPU, for
            /// example `v7` to specify ARMv7 when architecture is `arm`.
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/variant`.
            internal var variant: Swift.String?
            /// Creates a new `Platform`.
            ///
            /// - Parameters:
            ///   - architecture: Architecture field specifies the CPU architecture, for example
            ///   - os: OS specifies the operating system, for example `linux` or `windows`.
            ///   - os_period_features: OSFeatures is an optional field specifying an array of strings,
            ///   - os_period_version: OSVersion is an optional field specifying the operating system
            ///   - variant: Variant is an optional field specifying a variant of the CPU, for
            internal init(
                architecture: Swift.String? = nil,
                os: Swift.String? = nil,
                os_period_features: [Swift.String]? = nil,
                os_period_version: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.architecture = architecture
                self.os = os
                self.os_period_features = os_period_features
                self.os_period_version = os_period_version
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case architecture
                case os
                case os_period_features = "os.features"
                case os_period_version = "os.version"
                case variant
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayKubePod`.
        internal struct PlayKubePod: Codable, Hashable, Sendable {
            /// ContainerErrors - any errors that occurred while starting containers
            /// in the pod.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubePod/ContainerErrors`.
            internal var ContainerErrors: [Swift.String]?
            /// Containers - the IDs of the containers running in the created pod.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubePod/Containers`.
            internal var Containers: [Swift.String]?
            /// ID - ID of the pod created as a result of play kube.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubePod/ID`.
            internal var ID: Swift.String?
            /// InitContainers - the IDs of the init containers to be run in the created pod.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubePod/InitContainers`.
            internal var InitContainers: [Swift.String]?
            /// Logs - non-fatal errors and log messages while processing.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubePod/Logs`.
            internal var Logs: [Swift.String]?
            /// Creates a new `PlayKubePod`.
            ///
            /// - Parameters:
            ///   - ContainerErrors: ContainerErrors - any errors that occurred while starting containers
            ///   - Containers: Containers - the IDs of the containers running in the created pod.
            ///   - ID: ID - ID of the pod created as a result of play kube.
            ///   - InitContainers: InitContainers - the IDs of the init containers to be run in the created pod.
            ///   - Logs: Logs - non-fatal errors and log messages while processing.
            internal init(
                ContainerErrors: [Swift.String]? = nil,
                Containers: [Swift.String]? = nil,
                ID: Swift.String? = nil,
                InitContainers: [Swift.String]? = nil,
                Logs: [Swift.String]? = nil
            ) {
                self.ContainerErrors = ContainerErrors
                self.Containers = Containers
                self.ID = ID
                self.InitContainers = InitContainers
                self.Logs = Logs
            }
            internal enum CodingKeys: String, CodingKey {
                case ContainerErrors
                case Containers
                case ID
                case InitContainers
                case Logs
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayKubeReport`.
        internal struct PlayKubeReport: Codable, Hashable, Sendable {
            /// If set, exit with the specified exit code.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/ExitCode`.
            internal var ExitCode: Swift.Int32?
            /// Pods - pods created by play kube.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/Pods`.
            internal var Pods: [Components.Schemas.PlayKubePod]?
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/RmReport`.
            internal var RmReport: [Components.Schemas.PodRmReport]?
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/SecretRmReport`.
            internal var SecretRmReport: [Components.Schemas.SecretRmReport]?
            /// Secrets - secrets created by play kube
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/Secrets`.
            internal var Secrets: [Components.Schemas.PlaySecret]?
            /// ServiceContainerID - ID of the service container if one is created
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/ServiceContainerID`.
            internal var ServiceContainerID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/StopReport`.
            internal var StopReport: [Components.Schemas.PodStopReport]?
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/VolumeRmReport`.
            internal var VolumeRmReport: [Components.Schemas.VolumeRmReport]?
            /// Volumes - volumes created by play kube.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeReport/Volumes`.
            internal var Volumes: [Components.Schemas.PlayKubeVolume]?
            /// Creates a new `PlayKubeReport`.
            ///
            /// - Parameters:
            ///   - ExitCode: If set, exit with the specified exit code.
            ///   - Pods: Pods - pods created by play kube.
            ///   - RmReport:
            ///   - SecretRmReport:
            ///   - Secrets: Secrets - secrets created by play kube
            ///   - ServiceContainerID: ServiceContainerID - ID of the service container if one is created
            ///   - StopReport:
            ///   - VolumeRmReport:
            ///   - Volumes: Volumes - volumes created by play kube.
            internal init(
                ExitCode: Swift.Int32? = nil,
                Pods: [Components.Schemas.PlayKubePod]? = nil,
                RmReport: [Components.Schemas.PodRmReport]? = nil,
                SecretRmReport: [Components.Schemas.SecretRmReport]? = nil,
                Secrets: [Components.Schemas.PlaySecret]? = nil,
                ServiceContainerID: Swift.String? = nil,
                StopReport: [Components.Schemas.PodStopReport]? = nil,
                VolumeRmReport: [Components.Schemas.VolumeRmReport]? = nil,
                Volumes: [Components.Schemas.PlayKubeVolume]? = nil
            ) {
                self.ExitCode = ExitCode
                self.Pods = Pods
                self.RmReport = RmReport
                self.SecretRmReport = SecretRmReport
                self.Secrets = Secrets
                self.ServiceContainerID = ServiceContainerID
                self.StopReport = StopReport
                self.VolumeRmReport = VolumeRmReport
                self.Volumes = Volumes
            }
            internal enum CodingKeys: String, CodingKey {
                case ExitCode
                case Pods
                case RmReport
                case SecretRmReport
                case Secrets
                case ServiceContainerID
                case StopReport
                case VolumeRmReport
                case Volumes
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayKubeVolume`.
        internal struct PlayKubeVolume: Codable, Hashable, Sendable {
            /// Name - Name of the volume created by play kube.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayKubeVolume/Name`.
            internal var Name: Swift.String?
            /// Creates a new `PlayKubeVolume`.
            ///
            /// - Parameters:
            ///   - Name: Name - Name of the volume created by play kube.
            internal init(Name: Swift.String? = nil) {
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaySecret`.
        internal struct PlaySecret: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaySecret/CreateReport`.
            internal var CreateReport: Components.Schemas.SecretCreateReport?
            /// Creates a new `PlaySecret`.
            ///
            /// - Parameters:
            ///   - CreateReport:
            internal init(CreateReport: Components.Schemas.SecretCreateReport? = nil) {
                self.CreateReport = CreateReport
            }
            internal enum CodingKeys: String, CodingKey {
                case CreateReport
            }
        }
        /// Plugin A plugin for the Engine API
        ///
        /// - Remark: Generated from `#/components/schemas/Plugin`.
        internal struct Plugin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Plugin/Config`.
            internal var Config: Components.Schemas.PluginConfig
            /// True if the plugin is running. False if the plugin is not running, only installed.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Enabled`.
            internal var Enabled: Swift.Bool
            /// Id
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Id`.
            internal var Id: Swift.String?
            /// name
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Name`.
            internal var Name: Swift.String
            /// plugin remote reference used to push/pull the plugin
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/PluginReference`.
            internal var PluginReference: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Plugin/Settings`.
            internal var Settings: Components.Schemas.PluginSettings
            /// Creates a new `Plugin`.
            ///
            /// - Parameters:
            ///   - Config:
            ///   - Enabled: True if the plugin is running. False if the plugin is not running, only installed.
            ///   - Id: Id
            ///   - Name: name
            ///   - PluginReference: plugin remote reference used to push/pull the plugin
            ///   - Settings:
            internal init(
                Config: Components.Schemas.PluginConfig,
                Enabled: Swift.Bool,
                Id: Swift.String? = nil,
                Name: Swift.String,
                PluginReference: Swift.String? = nil,
                Settings: Components.Schemas.PluginSettings
            ) {
                self.Config = Config
                self.Enabled = Enabled
                self.Id = Id
                self.Name = Name
                self.PluginReference = PluginReference
                self.Settings = Settings
            }
            internal enum CodingKeys: String, CodingKey {
                case Config
                case Enabled
                case Id
                case Name
                case PluginReference
                case Settings
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginConfig`.
        internal struct PluginConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Args`.
            internal var Args: Components.Schemas.PluginConfigArgs
            /// description
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Description`.
            internal var Description: Swift.String
            /// Docker Version used to create the plugin
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/DockerVersion`.
            internal var DockerVersion: Swift.String?
            /// documentation
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Documentation`.
            internal var Documentation: Swift.String
            /// entrypoint
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Entrypoint`.
            internal var Entrypoint: [Swift.String]
            /// env
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Env`.
            internal var Env: [Components.Schemas.PluginEnv]
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Interface`.
            internal var Interface: Components.Schemas.PluginConfigInterface
            /// ipc host
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/IpcHost`.
            internal var IpcHost: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Linux`.
            internal var Linux: Components.Schemas.PluginConfigLinux
            /// mounts
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Mounts`.
            internal var Mounts: [Components.Schemas.PluginMount]
            /// - Remark: Generated from `#/components/schemas/PluginConfig/Network`.
            internal var Network: Components.Schemas.PluginConfigNetwork
            /// pid host
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/PidHost`.
            internal var PidHost: Swift.Bool
            /// propagated mount
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/PropagatedMount`.
            internal var PropagatedMount: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginConfig/User`.
            internal var User: Components.Schemas.PluginConfigUser?
            /// work dir
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfig/WorkDir`.
            internal var WorkDir: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginConfig/rootfs`.
            internal var rootfs: Components.Schemas.PluginConfigRootfs?
            /// Creates a new `PluginConfig`.
            ///
            /// - Parameters:
            ///   - Args:
            ///   - Description: description
            ///   - DockerVersion: Docker Version used to create the plugin
            ///   - Documentation: documentation
            ///   - Entrypoint: entrypoint
            ///   - Env: env
            ///   - Interface:
            ///   - IpcHost: ipc host
            ///   - Linux:
            ///   - Mounts: mounts
            ///   - Network:
            ///   - PidHost: pid host
            ///   - PropagatedMount: propagated mount
            ///   - User:
            ///   - WorkDir: work dir
            ///   - rootfs:
            internal init(
                Args: Components.Schemas.PluginConfigArgs,
                Description: Swift.String,
                DockerVersion: Swift.String? = nil,
                Documentation: Swift.String,
                Entrypoint: [Swift.String],
                Env: [Components.Schemas.PluginEnv],
                Interface: Components.Schemas.PluginConfigInterface,
                IpcHost: Swift.Bool,
                Linux: Components.Schemas.PluginConfigLinux,
                Mounts: [Components.Schemas.PluginMount],
                Network: Components.Schemas.PluginConfigNetwork,
                PidHost: Swift.Bool,
                PropagatedMount: Swift.String,
                User: Components.Schemas.PluginConfigUser? = nil,
                WorkDir: Swift.String,
                rootfs: Components.Schemas.PluginConfigRootfs? = nil
            ) {
                self.Args = Args
                self.Description = Description
                self.DockerVersion = DockerVersion
                self.Documentation = Documentation
                self.Entrypoint = Entrypoint
                self.Env = Env
                self.Interface = Interface
                self.IpcHost = IpcHost
                self.Linux = Linux
                self.Mounts = Mounts
                self.Network = Network
                self.PidHost = PidHost
                self.PropagatedMount = PropagatedMount
                self.User = User
                self.WorkDir = WorkDir
                self.rootfs = rootfs
            }
            internal enum CodingKeys: String, CodingKey {
                case Args
                case Description
                case DockerVersion
                case Documentation
                case Entrypoint
                case Env
                case Interface
                case IpcHost
                case Linux
                case Mounts
                case Network
                case PidHost
                case PropagatedMount
                case User
                case WorkDir
                case rootfs
            }
        }
        /// PluginConfigArgs plugin config args
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigArgs`.
        internal struct PluginConfigArgs: Codable, Hashable, Sendable {
            /// description
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigArgs/Description`.
            internal var Description: Swift.String
            /// name
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigArgs/Name`.
            internal var Name: Swift.String
            /// settable
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigArgs/Settable`.
            internal var Settable: [Swift.String]
            /// value
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigArgs/Value`.
            internal var Value: [Swift.String]
            /// Creates a new `PluginConfigArgs`.
            ///
            /// - Parameters:
            ///   - Description: description
            ///   - Name: name
            ///   - Settable: settable
            ///   - Value: value
            internal init(
                Description: Swift.String,
                Name: Swift.String,
                Settable: [Swift.String],
                Value: [Swift.String]
            ) {
                self.Description = Description
                self.Name = Name
                self.Settable = Settable
                self.Value = Value
            }
            internal enum CodingKeys: String, CodingKey {
                case Description
                case Name
                case Settable
                case Value
            }
        }
        /// PluginConfigInterface The interface between Docker and the plugin
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigInterface`.
        internal struct PluginConfigInterface: Codable, Hashable, Sendable {
            /// Protocol to use for clients connecting to the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigInterface/ProtocolScheme`.
            internal var ProtocolScheme: Swift.String?
            /// socket
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigInterface/Socket`.
            internal var Socket: Swift.String
            /// types
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigInterface/Types`.
            internal var Types: [Components.Schemas.PluginInterfaceType]
            /// Creates a new `PluginConfigInterface`.
            ///
            /// - Parameters:
            ///   - ProtocolScheme: Protocol to use for clients connecting to the plugin.
            ///   - Socket: socket
            ///   - Types: types
            internal init(
                ProtocolScheme: Swift.String? = nil,
                Socket: Swift.String,
                Types: [Components.Schemas.PluginInterfaceType]
            ) {
                self.ProtocolScheme = ProtocolScheme
                self.Socket = Socket
                self.Types = Types
            }
            internal enum CodingKeys: String, CodingKey {
                case ProtocolScheme
                case Socket
                case Types
            }
        }
        /// PluginConfigLinux plugin config linux
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigLinux`.
        internal struct PluginConfigLinux: Codable, Hashable, Sendable {
            /// allow all devices
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigLinux/AllowAllDevices`.
            internal var AllowAllDevices: Swift.Bool
            /// capabilities
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigLinux/Capabilities`.
            internal var Capabilities: [Swift.String]
            /// devices
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigLinux/Devices`.
            internal var Devices: [Components.Schemas.PluginDevice]
            /// Creates a new `PluginConfigLinux`.
            ///
            /// - Parameters:
            ///   - AllowAllDevices: allow all devices
            ///   - Capabilities: capabilities
            ///   - Devices: devices
            internal init(
                AllowAllDevices: Swift.Bool,
                Capabilities: [Swift.String],
                Devices: [Components.Schemas.PluginDevice]
            ) {
                self.AllowAllDevices = AllowAllDevices
                self.Capabilities = Capabilities
                self.Devices = Devices
            }
            internal enum CodingKeys: String, CodingKey {
                case AllowAllDevices
                case Capabilities
                case Devices
            }
        }
        /// PluginConfigNetwork plugin config network
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigNetwork`.
        internal struct PluginConfigNetwork: Codable, Hashable, Sendable {
            /// type
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigNetwork/Type`.
            internal var _Type: Swift.String
            /// Creates a new `PluginConfigNetwork`.
            ///
            /// - Parameters:
            ///   - _Type: type
            internal init(_Type: Swift.String) {
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case _Type = "Type"
            }
        }
        /// PluginConfigRootfs plugin config rootfs
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigRootfs`.
        internal struct PluginConfigRootfs: Codable, Hashable, Sendable {
            /// diff ids
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigRootfs/diff_ids`.
            internal var diff_ids: [Swift.String]?
            /// type
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigRootfs/type`.
            internal var _type: Swift.String?
            /// Creates a new `PluginConfigRootfs`.
            ///
            /// - Parameters:
            ///   - diff_ids: diff ids
            ///   - _type: type
            internal init(
                diff_ids: [Swift.String]? = nil,
                _type: Swift.String? = nil
            ) {
                self.diff_ids = diff_ids
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case diff_ids
                case _type = "type"
            }
        }
        /// PluginConfigUser plugin config user
        ///
        /// - Remark: Generated from `#/components/schemas/PluginConfigUser`.
        internal struct PluginConfigUser: Codable, Hashable, Sendable {
            /// g ID
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigUser/GID`.
            internal var GID: Swift.Int?
            /// UID
            ///
            /// - Remark: Generated from `#/components/schemas/PluginConfigUser/UID`.
            internal var UID: Swift.Int?
            /// Creates a new `PluginConfigUser`.
            ///
            /// - Parameters:
            ///   - GID: g ID
            ///   - UID: UID
            internal init(
                GID: Swift.Int? = nil,
                UID: Swift.Int? = nil
            ) {
                self.GID = GID
                self.UID = UID
            }
            internal enum CodingKeys: String, CodingKey {
                case GID
                case UID
            }
        }
        /// PluginDevice plugin device
        ///
        /// - Remark: Generated from `#/components/schemas/PluginDevice`.
        internal struct PluginDevice: Codable, Hashable, Sendable {
            /// description
            ///
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Description`.
            internal var Description: Swift.String
            /// name
            ///
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Name`.
            internal var Name: Swift.String
            /// path
            ///
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Path`.
            internal var Path: Swift.String
            /// settable
            ///
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Settable`.
            internal var Settable: [Swift.String]
            /// Creates a new `PluginDevice`.
            ///
            /// - Parameters:
            ///   - Description: description
            ///   - Name: name
            ///   - Path: path
            ///   - Settable: settable
            internal init(
                Description: Swift.String,
                Name: Swift.String,
                Path: Swift.String,
                Settable: [Swift.String]
            ) {
                self.Description = Description
                self.Name = Name
                self.Path = Path
                self.Settable = Settable
            }
            internal enum CodingKeys: String, CodingKey {
                case Description
                case Name
                case Path
                case Settable
            }
        }
        /// PluginEnv plugin env
        ///
        /// - Remark: Generated from `#/components/schemas/PluginEnv`.
        internal struct PluginEnv: Codable, Hashable, Sendable {
            /// description
            ///
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Description`.
            internal var Description: Swift.String
            /// name
            ///
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Name`.
            internal var Name: Swift.String
            /// settable
            ///
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Settable`.
            internal var Settable: [Swift.String]
            /// value
            ///
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Value`.
            internal var Value: Swift.String
            /// Creates a new `PluginEnv`.
            ///
            /// - Parameters:
            ///   - Description: description
            ///   - Name: name
            ///   - Settable: settable
            ///   - Value: value
            internal init(
                Description: Swift.String,
                Name: Swift.String,
                Settable: [Swift.String],
                Value: Swift.String
            ) {
                self.Description = Description
                self.Name = Name
                self.Settable = Settable
                self.Value = Value
            }
            internal enum CodingKeys: String, CodingKey {
                case Description
                case Name
                case Settable
                case Value
            }
        }
        /// PluginInterfaceType plugin interface type
        ///
        /// - Remark: Generated from `#/components/schemas/PluginInterfaceType`.
        internal struct PluginInterfaceType: Codable, Hashable, Sendable {
            /// capability
            ///
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Capability`.
            internal var Capability: Swift.String
            /// prefix
            ///
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Prefix`.
            internal var Prefix: Swift.String
            /// version
            ///
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Version`.
            internal var Version: Swift.String
            /// Creates a new `PluginInterfaceType`.
            ///
            /// - Parameters:
            ///   - Capability: capability
            ///   - Prefix: prefix
            ///   - Version: version
            internal init(
                Capability: Swift.String,
                Prefix: Swift.String,
                Version: Swift.String
            ) {
                self.Capability = Capability
                self.Prefix = Prefix
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case Capability
                case Prefix
                case Version
            }
        }
        /// PluginMount plugin mount
        ///
        /// - Remark: Generated from `#/components/schemas/PluginMount`.
        internal struct PluginMount: Codable, Hashable, Sendable {
            /// description
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Description`.
            internal var Description: Swift.String
            /// destination
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Destination`.
            internal var Destination: Swift.String
            /// name
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Name`.
            internal var Name: Swift.String
            /// options
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Options`.
            internal var Options: [Swift.String]
            /// settable
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Settable`.
            internal var Settable: [Swift.String]
            /// source
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Source`.
            internal var Source: Swift.String
            /// type
            ///
            /// - Remark: Generated from `#/components/schemas/PluginMount/Type`.
            internal var _Type: Swift.String
            /// Creates a new `PluginMount`.
            ///
            /// - Parameters:
            ///   - Description: description
            ///   - Destination: destination
            ///   - Name: name
            ///   - Options: options
            ///   - Settable: settable
            ///   - Source: source
            ///   - _Type: type
            internal init(
                Description: Swift.String,
                Destination: Swift.String,
                Name: Swift.String,
                Options: [Swift.String],
                Settable: [Swift.String],
                Source: Swift.String,
                _Type: Swift.String
            ) {
                self.Description = Description
                self.Destination = Destination
                self.Name = Name
                self.Options = Options
                self.Settable = Settable
                self.Source = Source
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Description
                case Destination
                case Name
                case Options
                case Settable
                case Source
                case _Type = "Type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginSettings`.
        internal struct PluginSettings: Codable, Hashable, Sendable {
            /// args
            ///
            /// - Remark: Generated from `#/components/schemas/PluginSettings/Args`.
            internal var Args: [Swift.String]
            /// devices
            ///
            /// - Remark: Generated from `#/components/schemas/PluginSettings/Devices`.
            internal var Devices: [Components.Schemas.PluginDevice]
            /// env
            ///
            /// - Remark: Generated from `#/components/schemas/PluginSettings/Env`.
            internal var Env: [Swift.String]
            /// mounts
            ///
            /// - Remark: Generated from `#/components/schemas/PluginSettings/Mounts`.
            internal var Mounts: [Components.Schemas.PluginMount]
            /// Creates a new `PluginSettings`.
            ///
            /// - Parameters:
            ///   - Args: args
            ///   - Devices: devices
            ///   - Env: env
            ///   - Mounts: mounts
            internal init(
                Args: [Swift.String],
                Devices: [Components.Schemas.PluginDevice],
                Env: [Swift.String],
                Mounts: [Components.Schemas.PluginMount]
            ) {
                self.Args = Args
                self.Devices = Devices
                self.Env = Env
                self.Mounts = Mounts
            }
            internal enum CodingKeys: String, CodingKey {
                case Args
                case Devices
                case Env
                case Mounts
            }
        }
        /// - Remark: Generated from `#/components/schemas/Plugins`.
        internal struct Plugins: Codable, Hashable, Sendable {
            /// Authorization is provided for compatibility, will always be nil as Podman has no daemon
            ///
            /// - Remark: Generated from `#/components/schemas/Plugins/authorization`.
            internal var authorization: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Plugins/log`.
            internal var log: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Plugins/network`.
            internal var network: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Plugins/volume`.
            internal var volume: [Swift.String]?
            /// Creates a new `Plugins`.
            ///
            /// - Parameters:
            ///   - authorization: Authorization is provided for compatibility, will always be nil as Podman has no daemon
            ///   - log:
            ///   - network:
            ///   - volume:
            internal init(
                authorization: [Swift.String]? = nil,
                log: [Swift.String]? = nil,
                network: [Swift.String]? = nil,
                volume: [Swift.String]? = nil
            ) {
                self.authorization = authorization
                self.log = log
                self.network = network
                self.volume = volume
            }
            internal enum CodingKeys: String, CodingKey {
                case authorization
                case log
                case network
                case volume
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodBasicConfig`.
        internal struct PodBasicConfig: Codable, Hashable, Sendable {
            /// ExitPolicy determines the pod's exit and stop behaviour.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/exit_policy`.
            internal var exit_policy: Swift.String?
            /// Hostname is the pod's hostname. If not set, the name of the pod will
            /// be used (if a name was not provided here, the name auto-generated for
            /// the pod will be used). This will be used by the infra container and
            /// all containers in the pod as long as the UTS namespace is shared.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/hostname`.
            internal var hostname: Swift.String?
            /// InfraCommand sets the command that will be used to start the infra
            /// container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/infra_command`.
            internal var infra_command: [Swift.String]?
            /// InfraConmonPidFile is a custom path to store the infra container's
            /// conmon PID.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/infra_conmon_pid_file`.
            internal var infra_conmon_pid_file: Swift.String?
            /// InfraImage is the image that will be used for the infra container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/infra_image`.
            internal var infra_image: Swift.String?
            /// InfraName is the name that will be used for the infra container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/infra_name`.
            internal var infra_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/ipcns`.
            internal var ipcns: Components.Schemas.Namespace?
            /// Labels are key-value pairs that are used to add metadata to pods.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels are key-value pairs that are used to add metadata to pods.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/labels`.
            internal var labels: Components.Schemas.PodBasicConfig.labelsPayload?
            /// Name is the name of the pod.
            /// If not provided, a name will be generated when the pod is created.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/name`.
            internal var name: Swift.String?
            /// NoInfra tells the pod not to create an infra container. If this is
            /// done, many networking-related options will become unavailable.
            /// Conflicts with setting any options in PodNetworkConfig, and the
            /// InfraCommand and InfraImages in this struct.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/no_infra`.
            internal var no_infra: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/pidns`.
            internal var pidns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/pod_create_command`.
            internal var pod_create_command: [Swift.String]?
            /// Devices contains user specified Devices to be added to the Pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/pod_devices`.
            internal var pod_devices: [Swift.String]?
            /// RestartPolicy is the pod's restart policy - an action which
            /// will be taken when one or all the containers in the pod exits.
            /// If not given, the default policy will be set to Always, which
            /// restarts the containers in the pod when they exit indefinitely.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/restart_policy`.
            internal var restart_policy: Swift.String?
            /// RestartRetries is the number of attempts that will be made to restart
            /// the container.
            /// Only available when RestartPolicy is set to "on-failure".
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/restart_tries`.
            internal var restart_tries: Swift.Int?
            /// PodCreateCommand is the command used to create this pod.
            /// This will be shown in the output of Inspect() on the pod, and may
            /// also be used by some tools that wish to recreate the pod
            /// (e.g. `podman generate systemd --new`).
            /// Optional.
            /// ShareParent determines if all containers in the pod will share the pod's cgroup as the cgroup parent
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/share_parent`.
            internal var share_parent: Swift.Bool?
            /// SharedNamespaces instructs the pod to share a set of namespaces.
            /// Shared namespaces will be joined (by default) by every container
            /// which joins the pod.
            /// If not set and NoInfra is false, the pod will set a default set of
            /// namespaces to share.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/shared_namespaces`.
            internal var shared_namespaces: [Swift.String]?
            /// Sysctl sets kernel parameters for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/sysctl`.
            internal struct sysctlPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `sysctlPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Sysctl sets kernel parameters for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/sysctl`.
            internal var sysctl: Components.Schemas.PodBasicConfig.sysctlPayload?
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/userns`.
            internal var userns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/PodBasicConfig/utsns`.
            internal var utsns: Components.Schemas.Namespace?
            /// Creates a new `PodBasicConfig`.
            ///
            /// - Parameters:
            ///   - exit_policy: ExitPolicy determines the pod's exit and stop behaviour.
            ///   - hostname: Hostname is the pod's hostname. If not set, the name of the pod will
            ///   - infra_command: InfraCommand sets the command that will be used to start the infra
            ///   - infra_conmon_pid_file: InfraConmonPidFile is a custom path to store the infra container's
            ///   - infra_image: InfraImage is the image that will be used for the infra container.
            ///   - infra_name: InfraName is the name that will be used for the infra container.
            ///   - ipcns:
            ///   - labels: Labels are key-value pairs that are used to add metadata to pods.
            ///   - name: Name is the name of the pod.
            ///   - no_infra: NoInfra tells the pod not to create an infra container. If this is
            ///   - pidns:
            ///   - pod_create_command:
            ///   - pod_devices: Devices contains user specified Devices to be added to the Pod
            ///   - restart_policy: RestartPolicy is the pod's restart policy - an action which
            ///   - restart_tries: RestartRetries is the number of attempts that will be made to restart
            ///   - share_parent: PodCreateCommand is the command used to create this pod.
            ///   - shared_namespaces: SharedNamespaces instructs the pod to share a set of namespaces.
            ///   - sysctl: Sysctl sets kernel parameters for the pod
            ///   - userns:
            ///   - utsns:
            internal init(
                exit_policy: Swift.String? = nil,
                hostname: Swift.String? = nil,
                infra_command: [Swift.String]? = nil,
                infra_conmon_pid_file: Swift.String? = nil,
                infra_image: Swift.String? = nil,
                infra_name: Swift.String? = nil,
                ipcns: Components.Schemas.Namespace? = nil,
                labels: Components.Schemas.PodBasicConfig.labelsPayload? = nil,
                name: Swift.String? = nil,
                no_infra: Swift.Bool? = nil,
                pidns: Components.Schemas.Namespace? = nil,
                pod_create_command: [Swift.String]? = nil,
                pod_devices: [Swift.String]? = nil,
                restart_policy: Swift.String? = nil,
                restart_tries: Swift.Int? = nil,
                share_parent: Swift.Bool? = nil,
                shared_namespaces: [Swift.String]? = nil,
                sysctl: Components.Schemas.PodBasicConfig.sysctlPayload? = nil,
                userns: Components.Schemas.Namespace? = nil,
                utsns: Components.Schemas.Namespace? = nil
            ) {
                self.exit_policy = exit_policy
                self.hostname = hostname
                self.infra_command = infra_command
                self.infra_conmon_pid_file = infra_conmon_pid_file
                self.infra_image = infra_image
                self.infra_name = infra_name
                self.ipcns = ipcns
                self.labels = labels
                self.name = name
                self.no_infra = no_infra
                self.pidns = pidns
                self.pod_create_command = pod_create_command
                self.pod_devices = pod_devices
                self.restart_policy = restart_policy
                self.restart_tries = restart_tries
                self.share_parent = share_parent
                self.shared_namespaces = shared_namespaces
                self.sysctl = sysctl
                self.userns = userns
                self.utsns = utsns
            }
            internal enum CodingKeys: String, CodingKey {
                case exit_policy
                case hostname
                case infra_command
                case infra_conmon_pid_file
                case infra_image
                case infra_name
                case ipcns
                case labels
                case name
                case no_infra
                case pidns
                case pod_create_command
                case pod_devices
                case restart_policy
                case restart_tries
                case share_parent
                case shared_namespaces
                case sysctl
                case userns
                case utsns
            }
        }
        /// This will be expanded in future updates to pods.
        ///
        /// - Remark: Generated from `#/components/schemas/PodCgroupConfig`.
        internal struct PodCgroupConfig: Codable, Hashable, Sendable {
            /// CgroupParent is the parent for the Cgroup that the pod will create.
            /// This pod cgroup will, in turn, be the default cgroup parent for all
            /// containers in the pod.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodCgroupConfig/cgroup_parent`.
            internal var cgroup_parent: Swift.String?
            /// Creates a new `PodCgroupConfig`.
            ///
            /// - Parameters:
            ///   - cgroup_parent: CgroupParent is the parent for the Cgroup that the pod will create.
            internal init(cgroup_parent: Swift.String? = nil) {
                self.cgroup_parent = cgroup_parent
            }
            internal enum CodingKeys: String, CodingKey {
                case cgroup_parent
            }
        }
        /// The JSON tags below are made to match the respective field in ContainerCreateOptions for the purpose of mapping.
        ///
        /// - Remark: Generated from `#/components/schemas/PodCreateOptions`.
        internal struct PodCreateOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/cgroup_parent`.
            internal var cgroup_parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/container_command`.
            internal var container_command: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/container_conmon_pidfile`.
            internal var container_conmon_pidfile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/container_name`.
            internal var container_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/cpus`.
            internal var cpus: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/cpuset_cpus`.
            internal var cpuset_cpus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/create_command`.
            internal var create_command: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/device_read_bps`.
            internal var device_read_bps: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/devices`.
            internal var devices: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/exit_policy`.
            internal var exit_policy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/hostname`.
            internal var hostname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/infra`.
            internal var infra: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/infra_image`.
            internal var infra_image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/ipc`.
            internal var ipc: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/labels`.
            internal var labels: Components.Schemas.PodCreateOptions.labelsPayload?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/net`.
            internal var net: Components.Schemas.NetOptions?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/pid`.
            internal var pid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/restart`.
            internal var restart: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/security_opt`.
            internal var security_opt: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/share`.
            internal var share: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/share_parent`.
            internal var share_parent: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/sysctl`.
            internal var sysctl: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/uts`.
            internal var uts: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/volume`.
            internal var volume: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodCreateOptions/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// Creates a new `PodCreateOptions`.
            ///
            /// - Parameters:
            ///   - cgroup_parent:
            ///   - container_command:
            ///   - container_conmon_pidfile:
            ///   - container_name:
            ///   - cpus:
            ///   - cpuset_cpus:
            ///   - create_command:
            ///   - device_read_bps:
            ///   - devices:
            ///   - exit_policy:
            ///   - hostname:
            ///   - infra:
            ///   - infra_image:
            ///   - ipc:
            ///   - labels:
            ///   - name:
            ///   - net:
            ///   - pid:
            ///   - restart:
            ///   - security_opt:
            ///   - share:
            ///   - share_parent:
            ///   - sysctl:
            ///   - uts:
            ///   - volume:
            ///   - volumes_from:
            internal init(
                cgroup_parent: Swift.String? = nil,
                container_command: Swift.String? = nil,
                container_conmon_pidfile: Swift.String? = nil,
                container_name: Swift.String? = nil,
                cpus: Swift.Double? = nil,
                cpuset_cpus: Swift.String? = nil,
                create_command: [Swift.String]? = nil,
                device_read_bps: [Swift.String]? = nil,
                devices: [Swift.String]? = nil,
                exit_policy: Swift.String? = nil,
                hostname: Swift.String? = nil,
                infra: Swift.Bool? = nil,
                infra_image: Swift.String? = nil,
                ipc: Swift.String? = nil,
                labels: Components.Schemas.PodCreateOptions.labelsPayload? = nil,
                name: Swift.String? = nil,
                net: Components.Schemas.NetOptions? = nil,
                pid: Swift.String? = nil,
                restart: Swift.String? = nil,
                security_opt: [Swift.String]? = nil,
                share: [Swift.String]? = nil,
                share_parent: Swift.Bool? = nil,
                sysctl: [Swift.String]? = nil,
                uts: Swift.String? = nil,
                volume: [Swift.String]? = nil,
                volumes_from: [Swift.String]? = nil
            ) {
                self.cgroup_parent = cgroup_parent
                self.container_command = container_command
                self.container_conmon_pidfile = container_conmon_pidfile
                self.container_name = container_name
                self.cpus = cpus
                self.cpuset_cpus = cpuset_cpus
                self.create_command = create_command
                self.device_read_bps = device_read_bps
                self.devices = devices
                self.exit_policy = exit_policy
                self.hostname = hostname
                self.infra = infra
                self.infra_image = infra_image
                self.ipc = ipc
                self.labels = labels
                self.name = name
                self.net = net
                self.pid = pid
                self.restart = restart
                self.security_opt = security_opt
                self.share = share
                self.share_parent = share_parent
                self.sysctl = sysctl
                self.uts = uts
                self.volume = volume
                self.volumes_from = volumes_from
            }
            internal enum CodingKeys: String, CodingKey {
                case cgroup_parent
                case container_command
                case container_conmon_pidfile
                case container_name
                case cpus
                case cpuset_cpus
                case create_command
                case device_read_bps
                case devices
                case exit_policy
                case hostname
                case infra
                case infra_image
                case ipc
                case labels
                case name
                case net
                case pid
                case restart
                case security_opt
                case share
                case share_parent
                case sysctl
                case uts
                case volume
                case volumes_from
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodKillReport`.
        internal struct PodKillReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodKillReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodKillReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PodKillReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodNetworkConfig`.
        internal struct PodNetworkConfig: Codable, Hashable, Sendable {
            /// Map of networks names to ids the container should join to.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PerNetworkOptions]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PerNetworkOptions] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of networks names to ids the container should join to.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/Networks`.
            internal var Networks: Components.Schemas.PodNetworkConfig.NetworksPayload?
            /// CNINetworks is a list of CNI networks to join the container to.
            /// If this list is empty, the default CNI network will be joined
            /// instead. If at least one entry is present, we will not join the
            /// default network (unless it is part of this list).
            /// Only available if NetNS is set to bridge.
            /// Optional.
            /// Deprecated: as of podman 4.0 use "Networks" instead.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/cni_networks`.
            internal var cni_networks: [Swift.String]?
            /// DNSOption is a set of DNS options that will be used in the infra
            /// container's resolv.conf, which will, by default, be shared with all
            /// containers in the pod.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/dns_option`.
            internal var dns_option: [Swift.String]?
            /// DNSSearch is a set of DNS search domains that will be used in the
            /// infra container's resolv.conf, which will, by default, be shared with
            /// all containers in the pod.
            /// If not provided, DNS search domains from the host's resolv.conf will
            /// be used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/dns_search`.
            internal var dns_search: [Swift.String]?
            /// DNSServer is a set of DNS servers that will be used in the infra
            /// container's resolv.conf, which will, by default, be shared with all
            /// containers in the pod.
            /// If not provided, the host's DNS servers will be used, unless the only
            /// server set is a localhost address. As the container cannot connect to
            /// the host's localhost, a default server will instead be set.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/dns_server`.
            internal var dns_server: [Swift.String]?
            /// HostAdd is a set of hosts that will be added to the infra container's
            /// etc/hosts that will, by default, be shared with all containers in
            /// the pod.
            /// Conflicts with NoInfra=true and NoManageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/hostadd`.
            internal var hostadd: [Swift.String]?
            /// HostsFile is the base file to create the `/etc/hosts` file inside the infra container.
            /// This must either be an absolute path to a file on the host system, or one of the
            /// special flags `image` or `none`.
            /// If it is empty it defaults to the base_hosts_file configuration in containers.conf.
            /// Conflicts with NoInfra=true and NoManageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/hostsFile`.
            internal var hostsFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/netns`.
            internal var netns: Components.Schemas.Namespace?
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/network_options`.
            internal struct network_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `network_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/network_options`.
            internal var network_options: Components.Schemas.PodNetworkConfig.network_optionsPayload?
            /// NoManageHostname indicates that /etc/hostname should not be managed
            /// by the pod. Instead, each container will create a separate
            /// etc/hostname as they would if not in a pod.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/no_manage_hostname`.
            internal var no_manage_hostname: Swift.Bool?
            /// NoManageHosts indicates that /etc/hosts should not be managed by the
            /// pod. Instead, each container will create a separate /etc/hosts as
            /// they would if not in a pod.
            /// Conflicts with HostAdd.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/no_manage_hosts`.
            internal var no_manage_hosts: Swift.Bool?
            /// NoManageResolvConf indicates that /etc/resolv.conf should not be
            /// managed by the pod. Instead, each container will create and manage a
            /// separate resolv.conf as if they had not joined a pod.
            /// Conflicts with NoInfra=true and DNSServer, DNSSearch, DNSOption.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/no_manage_resolv_conf`.
            internal var no_manage_resolv_conf: Swift.Bool?
            /// PortMappings is a set of ports to map into the infra container.
            /// As, by default, containers share their network with the infra
            /// container, this will forward the ports to the entire pod.
            /// Only available if NetNS is set to Bridge, Slirp, or Pasta.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodNetworkConfig/portmappings`.
            internal var portmappings: [Components.Schemas.PortMapping]?
            /// Creates a new `PodNetworkConfig`.
            ///
            /// - Parameters:
            ///   - Networks: Map of networks names to ids the container should join to.
            ///   - cni_networks: CNINetworks is a list of CNI networks to join the container to.
            ///   - dns_option: DNSOption is a set of DNS options that will be used in the infra
            ///   - dns_search: DNSSearch is a set of DNS search domains that will be used in the
            ///   - dns_server: DNSServer is a set of DNS servers that will be used in the infra
            ///   - hostadd: HostAdd is a set of hosts that will be added to the infra container's
            ///   - hostsFile: HostsFile is the base file to create the `/etc/hosts` file inside the infra container.
            ///   - netns:
            ///   - network_options: NetworkOptions are additional options for each network
            ///   - no_manage_hostname: NoManageHostname indicates that /etc/hostname should not be managed
            ///   - no_manage_hosts: NoManageHosts indicates that /etc/hosts should not be managed by the
            ///   - no_manage_resolv_conf: NoManageResolvConf indicates that /etc/resolv.conf should not be
            ///   - portmappings: PortMappings is a set of ports to map into the infra container.
            internal init(
                Networks: Components.Schemas.PodNetworkConfig.NetworksPayload? = nil,
                cni_networks: [Swift.String]? = nil,
                dns_option: [Swift.String]? = nil,
                dns_search: [Swift.String]? = nil,
                dns_server: [Swift.String]? = nil,
                hostadd: [Swift.String]? = nil,
                hostsFile: Swift.String? = nil,
                netns: Components.Schemas.Namespace? = nil,
                network_options: Components.Schemas.PodNetworkConfig.network_optionsPayload? = nil,
                no_manage_hostname: Swift.Bool? = nil,
                no_manage_hosts: Swift.Bool? = nil,
                no_manage_resolv_conf: Swift.Bool? = nil,
                portmappings: [Components.Schemas.PortMapping]? = nil
            ) {
                self.Networks = Networks
                self.cni_networks = cni_networks
                self.dns_option = dns_option
                self.dns_search = dns_search
                self.dns_server = dns_server
                self.hostadd = hostadd
                self.hostsFile = hostsFile
                self.netns = netns
                self.network_options = network_options
                self.no_manage_hostname = no_manage_hostname
                self.no_manage_hosts = no_manage_hosts
                self.no_manage_resolv_conf = no_manage_resolv_conf
                self.portmappings = portmappings
            }
            internal enum CodingKeys: String, CodingKey {
                case Networks
                case cni_networks
                case dns_option
                case dns_search
                case dns_server
                case hostadd
                case hostsFile
                case netns
                case network_options
                case no_manage_hostname
                case no_manage_hosts
                case no_manage_resolv_conf
                case portmappings
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodPauseReport`.
        internal struct PodPauseReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodPauseReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodPauseReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PodPauseReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodPruneReport`.
        internal struct PodPruneReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodPruneReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodPruneReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PodPruneReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - Id:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil
            ) {
                self.Err = Err
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodResourceConfig`.
        internal struct PodResourceConfig: Codable, Hashable, Sendable {
            /// CPU period of the cpuset, determined by --cpus
            ///
            /// - Remark: Generated from `#/components/schemas/PodResourceConfig/cpu_period`.
            internal var cpu_period: Swift.Int?
            /// CPU quota of the cpuset, determined by --cpus
            ///
            /// - Remark: Generated from `#/components/schemas/PodResourceConfig/cpu_quota`.
            internal var cpu_quota: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PodResourceConfig/resource_limits`.
            internal var resource_limits: Components.Schemas.LinuxResources?
            /// ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            ///
            /// - Remark: Generated from `#/components/schemas/PodResourceConfig/throttleReadBpsDevice`.
            internal struct throttleReadBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            ///
            /// - Remark: Generated from `#/components/schemas/PodResourceConfig/throttleReadBpsDevice`.
            internal var throttleReadBpsDevice: Components.Schemas.PodResourceConfig.throttleReadBpsDevicePayload?
            /// Creates a new `PodResourceConfig`.
            ///
            /// - Parameters:
            ///   - cpu_period: CPU period of the cpuset, determined by --cpus
            ///   - cpu_quota: CPU quota of the cpuset, determined by --cpus
            ///   - resource_limits:
            ///   - throttleReadBpsDevice: ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            internal init(
                cpu_period: Swift.Int? = nil,
                cpu_quota: Swift.Int64? = nil,
                resource_limits: Components.Schemas.LinuxResources? = nil,
                throttleReadBpsDevice: Components.Schemas.PodResourceConfig.throttleReadBpsDevicePayload? = nil
            ) {
                self.cpu_period = cpu_period
                self.cpu_quota = cpu_quota
                self.resource_limits = resource_limits
                self.throttleReadBpsDevice = throttleReadBpsDevice
            }
            internal enum CodingKeys: String, CodingKey {
                case cpu_period
                case cpu_quota
                case resource_limits
                case throttleReadBpsDevice
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodRestartReport`.
        internal struct PodRestartReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodRestartReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodRestartReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PodRestartReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodRmReport`.
        internal struct PodRmReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodRmReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodRmReport/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodRmReport/RemovedCtrs`.
            internal struct RemovedCtrsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `RemovedCtrsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/PodRmReport/RemovedCtrs`.
            internal var RemovedCtrs: Components.Schemas.PodRmReport.RemovedCtrsPayload?
            /// Creates a new `PodRmReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - Id:
            ///   - RemovedCtrs:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil,
                RemovedCtrs: Components.Schemas.PodRmReport.RemovedCtrsPayload? = nil
            ) {
                self.Err = Err
                self.Id = Id
                self.RemovedCtrs = RemovedCtrs
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
                case RemovedCtrs
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodSecurityConfig`.
        internal struct PodSecurityConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodSecurityConfig/idmappings`.
            internal var idmappings: Components.Schemas.IDMappingOptions?
            /// - Remark: Generated from `#/components/schemas/PodSecurityConfig/security_opt`.
            internal var security_opt: [Swift.String]?
            /// Creates a new `PodSecurityConfig`.
            ///
            /// - Parameters:
            ///   - idmappings:
            ///   - security_opt:
            internal init(
                idmappings: Components.Schemas.IDMappingOptions? = nil,
                security_opt: [Swift.String]? = nil
            ) {
                self.idmappings = idmappings
                self.security_opt = security_opt
            }
            internal enum CodingKeys: String, CodingKey {
                case idmappings
                case security_opt
            }
        }
        /// PodSpecGenerator describes options to create a pod
        ///
        /// - Remark: Generated from `#/components/schemas/PodSpecGenerator`.
        internal struct PodSpecGenerator: Codable, Hashable, Sendable {
            /// Map of networks names to ids the container should join to.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PerNetworkOptions]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PerNetworkOptions] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of networks names to ids the container should join to.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/Networks`.
            internal var Networks: Components.Schemas.PodSpecGenerator.NetworksPayload?
            /// CgroupParent is the parent for the Cgroup that the pod will create.
            /// This pod cgroup will, in turn, be the default cgroup parent for all
            /// containers in the pod.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/cgroup_parent`.
            internal var cgroup_parent: Swift.String?
            /// CNINetworks is a list of CNI networks to join the container to.
            /// If this list is empty, the default CNI network will be joined
            /// instead. If at least one entry is present, we will not join the
            /// default network (unless it is part of this list).
            /// Only available if NetNS is set to bridge.
            /// Optional.
            /// Deprecated: as of podman 4.0 use "Networks" instead.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/cni_networks`.
            internal var cni_networks: [Swift.String]?
            /// CPU period of the cpuset, determined by --cpus
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/cpu_period`.
            internal var cpu_period: Swift.Int?
            /// CPU quota of the cpuset, determined by --cpus
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/cpu_quota`.
            internal var cpu_quota: Swift.Int64?
            /// DNSOption is a set of DNS options that will be used in the infra
            /// container's resolv.conf, which will, by default, be shared with all
            /// containers in the pod.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/dns_option`.
            internal var dns_option: [Swift.String]?
            /// DNSSearch is a set of DNS search domains that will be used in the
            /// infra container's resolv.conf, which will, by default, be shared with
            /// all containers in the pod.
            /// If not provided, DNS search domains from the host's resolv.conf will
            /// be used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/dns_search`.
            internal var dns_search: [Swift.String]?
            /// DNSServer is a set of DNS servers that will be used in the infra
            /// container's resolv.conf, which will, by default, be shared with all
            /// containers in the pod.
            /// If not provided, the host's DNS servers will be used, unless the only
            /// server set is a localhost address. As the container cannot connect to
            /// the host's localhost, a default server will instead be set.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/dns_server`.
            internal var dns_server: [Swift.String]?
            /// ExitPolicy determines the pod's exit and stop behaviour.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/exit_policy`.
            internal var exit_policy: Swift.String?
            /// HostAdd is a set of hosts that will be added to the infra container's
            /// etc/hosts that will, by default, be shared with all containers in
            /// the pod.
            /// Conflicts with NoInfra=true and NoManageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/hostadd`.
            internal var hostadd: [Swift.String]?
            /// Hostname is the pod's hostname. If not set, the name of the pod will
            /// be used (if a name was not provided here, the name auto-generated for
            /// the pod will be used). This will be used by the infra container and
            /// all containers in the pod as long as the UTS namespace is shared.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/hostname`.
            internal var hostname: Swift.String?
            /// HostsFile is the base file to create the `/etc/hosts` file inside the infra container.
            /// This must either be an absolute path to a file on the host system, or one of the
            /// special flags `image` or `none`.
            /// If it is empty it defaults to the base_hosts_file configuration in containers.conf.
            /// Conflicts with NoInfra=true and NoManageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/hostsFile`.
            internal var hostsFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/idmappings`.
            internal var idmappings: Components.Schemas.IDMappingOptions?
            /// Image volumes bind-mount a container-image mount into the pod's infra container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/image_volumes`.
            internal var image_volumes: [Components.Schemas.ImageVolume]?
            /// InfraCommand sets the command that will be used to start the infra
            /// container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/infra_command`.
            internal var infra_command: [Swift.String]?
            /// InfraConmonPidFile is a custom path to store the infra container's
            /// conmon PID.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/infra_conmon_pid_file`.
            internal var infra_conmon_pid_file: Swift.String?
            /// InfraImage is the image that will be used for the infra container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/infra_image`.
            internal var infra_image: Swift.String?
            /// InfraName is the name that will be used for the infra container.
            /// If not set, the default set in the Libpod configuration file will be
            /// used.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/infra_name`.
            internal var infra_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/ipcns`.
            internal var ipcns: Components.Schemas.Namespace?
            /// Labels are key-value pairs that are used to add metadata to pods.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels are key-value pairs that are used to add metadata to pods.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/labels`.
            internal var labels: Components.Schemas.PodSpecGenerator.labelsPayload?
            /// Mounts are mounts that will be added to the pod.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/mounts`.
            internal var mounts: [Components.Schemas.Mount]?
            /// Name is the name of the pod.
            /// If not provided, a name will be generated when the pod is created.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/netns`.
            internal var netns: Components.Schemas.Namespace?
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/network_options`.
            internal struct network_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `network_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/network_options`.
            internal var network_options: Components.Schemas.PodSpecGenerator.network_optionsPayload?
            /// NoInfra tells the pod not to create an infra container. If this is
            /// done, many networking-related options will become unavailable.
            /// Conflicts with setting any options in PodNetworkConfig, and the
            /// InfraCommand and InfraImages in this struct.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/no_infra`.
            internal var no_infra: Swift.Bool?
            /// NoManageHostname indicates that /etc/hostname should not be managed
            /// by the pod. Instead, each container will create a separate
            /// etc/hostname as they would if not in a pod.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/no_manage_hostname`.
            internal var no_manage_hostname: Swift.Bool?
            /// NoManageHosts indicates that /etc/hosts should not be managed by the
            /// pod. Instead, each container will create a separate /etc/hosts as
            /// they would if not in a pod.
            /// Conflicts with HostAdd.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/no_manage_hosts`.
            internal var no_manage_hosts: Swift.Bool?
            /// NoManageResolvConf indicates that /etc/resolv.conf should not be
            /// managed by the pod. Instead, each container will create and manage a
            /// separate resolv.conf as if they had not joined a pod.
            /// Conflicts with NoInfra=true and DNSServer, DNSSearch, DNSOption.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/no_manage_resolv_conf`.
            internal var no_manage_resolv_conf: Swift.Bool?
            /// Overlay volumes are named volumes that will be added to the pod.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/overlay_volumes`.
            internal var overlay_volumes: [Components.Schemas.OverlayVolume]?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/pidns`.
            internal var pidns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/pod_create_command`.
            internal var pod_create_command: [Swift.String]?
            /// Devices contains user specified Devices to be added to the Pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/pod_devices`.
            internal var pod_devices: [Swift.String]?
            /// PortMappings is a set of ports to map into the infra container.
            /// As, by default, containers share their network with the infra
            /// container, this will forward the ports to the entire pod.
            /// Only available if NetNS is set to Bridge, Slirp, or Pasta.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/portmappings`.
            internal var portmappings: [Components.Schemas.PortMapping]?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/resource_limits`.
            internal var resource_limits: Components.Schemas.LinuxResources?
            /// RestartPolicy is the pod's restart policy - an action which
            /// will be taken when one or all the containers in the pod exits.
            /// If not given, the default policy will be set to Always, which
            /// restarts the containers in the pod when they exit indefinitely.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/restart_policy`.
            internal var restart_policy: Swift.String?
            /// RestartRetries is the number of attempts that will be made to restart
            /// the container.
            /// Only available when RestartPolicy is set to "on-failure".
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/restart_tries`.
            internal var restart_tries: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/security_opt`.
            internal var security_opt: [Swift.String]?
            /// The ID of the pod's service container.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/serviceContainerID`.
            internal var serviceContainerID: Swift.String?
            /// PodCreateCommand is the command used to create this pod.
            /// This will be shown in the output of Inspect() on the pod, and may
            /// also be used by some tools that wish to recreate the pod
            /// (e.g. `podman generate systemd --new`).
            /// Optional.
            /// ShareParent determines if all containers in the pod will share the pod's cgroup as the cgroup parent
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/share_parent`.
            internal var share_parent: Swift.Bool?
            /// SharedNamespaces instructs the pod to share a set of namespaces.
            /// Shared namespaces will be joined (by default) by every container
            /// which joins the pod.
            /// If not set and NoInfra is false, the pod will set a default set of
            /// namespaces to share.
            /// Conflicts with NoInfra=true.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/shared_namespaces`.
            internal var shared_namespaces: [Swift.String]?
            /// ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            /// Conflicts with ShmSize if IpcNS is not private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/shm_size`.
            internal var shm_size: Swift.Int64?
            /// ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            /// specifically /run, /run/lock, /var/log/journal and /tmp.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/shm_size_systemd`.
            internal var shm_size_systemd: Swift.Int64?
            /// Sysctl sets kernel parameters for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/sysctl`.
            internal struct sysctlPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `sysctlPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Sysctl sets kernel parameters for the pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/sysctl`.
            internal var sysctl: Components.Schemas.PodSpecGenerator.sysctlPayload?
            /// ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/throttleReadBpsDevice`.
            internal struct throttleReadBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/throttleReadBpsDevice`.
            internal var throttleReadBpsDevice: Components.Schemas.PodSpecGenerator.throttleReadBpsDevicePayload?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/userns`.
            internal var userns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/utsns`.
            internal var utsns: Components.Schemas.Namespace?
            /// Volumes are named volumes that will be added to the pod.
            /// These will supersede Image Volumes and VolumesFrom  volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/volumes`.
            internal var volumes: [Components.Schemas.NamedVolume]?
            /// VolumesFrom is a set of containers whose volumes will be added to
            /// this pod. The name or ID of the container must be provided, and
            /// may optionally be followed by a : and then one or more
            /// comma-separated options. Valid options are 'ro', 'rw', and 'z'.
            /// Options will be used for all volumes sourced from the container.
            ///
            /// - Remark: Generated from `#/components/schemas/PodSpecGenerator/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// Creates a new `PodSpecGenerator`.
            ///
            /// - Parameters:
            ///   - Networks: Map of networks names to ids the container should join to.
            ///   - cgroup_parent: CgroupParent is the parent for the Cgroup that the pod will create.
            ///   - cni_networks: CNINetworks is a list of CNI networks to join the container to.
            ///   - cpu_period: CPU period of the cpuset, determined by --cpus
            ///   - cpu_quota: CPU quota of the cpuset, determined by --cpus
            ///   - dns_option: DNSOption is a set of DNS options that will be used in the infra
            ///   - dns_search: DNSSearch is a set of DNS search domains that will be used in the
            ///   - dns_server: DNSServer is a set of DNS servers that will be used in the infra
            ///   - exit_policy: ExitPolicy determines the pod's exit and stop behaviour.
            ///   - hostadd: HostAdd is a set of hosts that will be added to the infra container's
            ///   - hostname: Hostname is the pod's hostname. If not set, the name of the pod will
            ///   - hostsFile: HostsFile is the base file to create the `/etc/hosts` file inside the infra container.
            ///   - idmappings:
            ///   - image_volumes: Image volumes bind-mount a container-image mount into the pod's infra container.
            ///   - infra_command: InfraCommand sets the command that will be used to start the infra
            ///   - infra_conmon_pid_file: InfraConmonPidFile is a custom path to store the infra container's
            ///   - infra_image: InfraImage is the image that will be used for the infra container.
            ///   - infra_name: InfraName is the name that will be used for the infra container.
            ///   - ipcns:
            ///   - labels: Labels are key-value pairs that are used to add metadata to pods.
            ///   - mounts: Mounts are mounts that will be added to the pod.
            ///   - name: Name is the name of the pod.
            ///   - netns:
            ///   - network_options: NetworkOptions are additional options for each network
            ///   - no_infra: NoInfra tells the pod not to create an infra container. If this is
            ///   - no_manage_hostname: NoManageHostname indicates that /etc/hostname should not be managed
            ///   - no_manage_hosts: NoManageHosts indicates that /etc/hosts should not be managed by the
            ///   - no_manage_resolv_conf: NoManageResolvConf indicates that /etc/resolv.conf should not be
            ///   - overlay_volumes: Overlay volumes are named volumes that will be added to the pod.
            ///   - pidns:
            ///   - pod_create_command:
            ///   - pod_devices: Devices contains user specified Devices to be added to the Pod
            ///   - portmappings: PortMappings is a set of ports to map into the infra container.
            ///   - resource_limits:
            ///   - restart_policy: RestartPolicy is the pod's restart policy - an action which
            ///   - restart_tries: RestartRetries is the number of attempts that will be made to restart
            ///   - security_opt:
            ///   - serviceContainerID: The ID of the pod's service container.
            ///   - share_parent: PodCreateCommand is the command used to create this pod.
            ///   - shared_namespaces: SharedNamespaces instructs the pod to share a set of namespaces.
            ///   - shm_size: ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            ///   - shm_size_systemd: ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            ///   - sysctl: Sysctl sets kernel parameters for the pod
            ///   - throttleReadBpsDevice: ThrottleReadBpsDevice contains the rate at which the devices in the pod can be read from/accessed
            ///   - userns:
            ///   - utsns:
            ///   - volumes: Volumes are named volumes that will be added to the pod.
            ///   - volumes_from: VolumesFrom is a set of containers whose volumes will be added to
            internal init(
                Networks: Components.Schemas.PodSpecGenerator.NetworksPayload? = nil,
                cgroup_parent: Swift.String? = nil,
                cni_networks: [Swift.String]? = nil,
                cpu_period: Swift.Int? = nil,
                cpu_quota: Swift.Int64? = nil,
                dns_option: [Swift.String]? = nil,
                dns_search: [Swift.String]? = nil,
                dns_server: [Swift.String]? = nil,
                exit_policy: Swift.String? = nil,
                hostadd: [Swift.String]? = nil,
                hostname: Swift.String? = nil,
                hostsFile: Swift.String? = nil,
                idmappings: Components.Schemas.IDMappingOptions? = nil,
                image_volumes: [Components.Schemas.ImageVolume]? = nil,
                infra_command: [Swift.String]? = nil,
                infra_conmon_pid_file: Swift.String? = nil,
                infra_image: Swift.String? = nil,
                infra_name: Swift.String? = nil,
                ipcns: Components.Schemas.Namespace? = nil,
                labels: Components.Schemas.PodSpecGenerator.labelsPayload? = nil,
                mounts: [Components.Schemas.Mount]? = nil,
                name: Swift.String? = nil,
                netns: Components.Schemas.Namespace? = nil,
                network_options: Components.Schemas.PodSpecGenerator.network_optionsPayload? = nil,
                no_infra: Swift.Bool? = nil,
                no_manage_hostname: Swift.Bool? = nil,
                no_manage_hosts: Swift.Bool? = nil,
                no_manage_resolv_conf: Swift.Bool? = nil,
                overlay_volumes: [Components.Schemas.OverlayVolume]? = nil,
                pidns: Components.Schemas.Namespace? = nil,
                pod_create_command: [Swift.String]? = nil,
                pod_devices: [Swift.String]? = nil,
                portmappings: [Components.Schemas.PortMapping]? = nil,
                resource_limits: Components.Schemas.LinuxResources? = nil,
                restart_policy: Swift.String? = nil,
                restart_tries: Swift.Int? = nil,
                security_opt: [Swift.String]? = nil,
                serviceContainerID: Swift.String? = nil,
                share_parent: Swift.Bool? = nil,
                shared_namespaces: [Swift.String]? = nil,
                shm_size: Swift.Int64? = nil,
                shm_size_systemd: Swift.Int64? = nil,
                sysctl: Components.Schemas.PodSpecGenerator.sysctlPayload? = nil,
                throttleReadBpsDevice: Components.Schemas.PodSpecGenerator.throttleReadBpsDevicePayload? = nil,
                userns: Components.Schemas.Namespace? = nil,
                utsns: Components.Schemas.Namespace? = nil,
                volumes: [Components.Schemas.NamedVolume]? = nil,
                volumes_from: [Swift.String]? = nil
            ) {
                self.Networks = Networks
                self.cgroup_parent = cgroup_parent
                self.cni_networks = cni_networks
                self.cpu_period = cpu_period
                self.cpu_quota = cpu_quota
                self.dns_option = dns_option
                self.dns_search = dns_search
                self.dns_server = dns_server
                self.exit_policy = exit_policy
                self.hostadd = hostadd
                self.hostname = hostname
                self.hostsFile = hostsFile
                self.idmappings = idmappings
                self.image_volumes = image_volumes
                self.infra_command = infra_command
                self.infra_conmon_pid_file = infra_conmon_pid_file
                self.infra_image = infra_image
                self.infra_name = infra_name
                self.ipcns = ipcns
                self.labels = labels
                self.mounts = mounts
                self.name = name
                self.netns = netns
                self.network_options = network_options
                self.no_infra = no_infra
                self.no_manage_hostname = no_manage_hostname
                self.no_manage_hosts = no_manage_hosts
                self.no_manage_resolv_conf = no_manage_resolv_conf
                self.overlay_volumes = overlay_volumes
                self.pidns = pidns
                self.pod_create_command = pod_create_command
                self.pod_devices = pod_devices
                self.portmappings = portmappings
                self.resource_limits = resource_limits
                self.restart_policy = restart_policy
                self.restart_tries = restart_tries
                self.security_opt = security_opt
                self.serviceContainerID = serviceContainerID
                self.share_parent = share_parent
                self.shared_namespaces = shared_namespaces
                self.shm_size = shm_size
                self.shm_size_systemd = shm_size_systemd
                self.sysctl = sysctl
                self.throttleReadBpsDevice = throttleReadBpsDevice
                self.userns = userns
                self.utsns = utsns
                self.volumes = volumes
                self.volumes_from = volumes_from
            }
            internal enum CodingKeys: String, CodingKey {
                case Networks
                case cgroup_parent
                case cni_networks
                case cpu_period
                case cpu_quota
                case dns_option
                case dns_search
                case dns_server
                case exit_policy
                case hostadd
                case hostname
                case hostsFile
                case idmappings
                case image_volumes
                case infra_command
                case infra_conmon_pid_file
                case infra_image
                case infra_name
                case ipcns
                case labels
                case mounts
                case name
                case netns
                case network_options
                case no_infra
                case no_manage_hostname
                case no_manage_hosts
                case no_manage_resolv_conf
                case overlay_volumes
                case pidns
                case pod_create_command
                case pod_devices
                case portmappings
                case resource_limits
                case restart_policy
                case restart_tries
                case security_opt
                case serviceContainerID
                case share_parent
                case shared_namespaces
                case shm_size
                case shm_size_systemd
                case sysctl
                case throttleReadBpsDevice
                case userns
                case utsns
                case volumes
                case volumes_from
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodStartReport`.
        internal struct PodStartReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodStartReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodStartReport/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodStartReport/RawInput`.
            internal var RawInput: Swift.String?
            /// Creates a new `PodStartReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            ///   - RawInput:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil,
                RawInput: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
                self.RawInput = RawInput
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
                case RawInput
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodStatsReport`.
        internal struct PodStatsReport: Codable, Hashable, Sendable {
            /// Humanized disk usage read + write
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/BlockIO`.
            internal var BlockIO: Swift.String?
            /// Container ID
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/CID`.
            internal var CID: Swift.String?
            /// Percentage of CPU utilized by pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/CPU`.
            internal var CPU: Swift.String?
            /// Percentage of Memory utilized by pod
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/Mem`.
            internal var Mem: Swift.String?
            /// Humanized Memory usage and maximum
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/MemUsage`.
            internal var MemUsage: Swift.String?
            /// Memory usage and maximum in bytes
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/MemUsageBytes`.
            internal var MemUsageBytes: Swift.String?
            /// Pod Name
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/Name`.
            internal var Name: Swift.String?
            /// Network usage inbound + outbound
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/NetIO`.
            internal var NetIO: Swift.String?
            /// Container PID
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/PIDS`.
            internal var PIDS: Swift.String?
            /// Pod ID
            ///
            /// - Remark: Generated from `#/components/schemas/PodStatsReport/Pod`.
            internal var Pod: Swift.String?
            /// Creates a new `PodStatsReport`.
            ///
            /// - Parameters:
            ///   - BlockIO: Humanized disk usage read + write
            ///   - CID: Container ID
            ///   - CPU: Percentage of CPU utilized by pod
            ///   - Mem: Percentage of Memory utilized by pod
            ///   - MemUsage: Humanized Memory usage and maximum
            ///   - MemUsageBytes: Memory usage and maximum in bytes
            ///   - Name: Pod Name
            ///   - NetIO: Network usage inbound + outbound
            ///   - PIDS: Container PID
            ///   - Pod: Pod ID
            internal init(
                BlockIO: Swift.String? = nil,
                CID: Swift.String? = nil,
                CPU: Swift.String? = nil,
                Mem: Swift.String? = nil,
                MemUsage: Swift.String? = nil,
                MemUsageBytes: Swift.String? = nil,
                Name: Swift.String? = nil,
                NetIO: Swift.String? = nil,
                PIDS: Swift.String? = nil,
                Pod: Swift.String? = nil
            ) {
                self.BlockIO = BlockIO
                self.CID = CID
                self.CPU = CPU
                self.Mem = Mem
                self.MemUsage = MemUsage
                self.MemUsageBytes = MemUsageBytes
                self.Name = Name
                self.NetIO = NetIO
                self.PIDS = PIDS
                self.Pod = Pod
            }
            internal enum CodingKeys: String, CodingKey {
                case BlockIO
                case CID
                case CPU
                case Mem
                case MemUsage
                case MemUsageBytes
                case Name
                case NetIO
                case PIDS
                case Pod
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodStopReport`.
        internal struct PodStopReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodStopReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodStopReport/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PodStopReport/RawInput`.
            internal var RawInput: Swift.String?
            /// Creates a new `PodStopReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            ///   - RawInput:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil,
                RawInput: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
                self.RawInput = RawInput
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
                case RawInput
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodStorageConfig`.
        internal struct PodStorageConfig: Codable, Hashable, Sendable {
            /// Image volumes bind-mount a container-image mount into the pod's infra container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/image_volumes`.
            internal var image_volumes: [Components.Schemas.ImageVolume]?
            /// Mounts are mounts that will be added to the pod.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/mounts`.
            internal var mounts: [Components.Schemas.Mount]?
            /// Overlay volumes are named volumes that will be added to the pod.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/overlay_volumes`.
            internal var overlay_volumes: [Components.Schemas.OverlayVolume]?
            /// ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            /// Conflicts with ShmSize if IpcNS is not private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/shm_size`.
            internal var shm_size: Swift.Int64?
            /// ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            /// specifically /run, /run/lock, /var/log/journal and /tmp.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/shm_size_systemd`.
            internal var shm_size_systemd: Swift.Int64?
            /// Volumes are named volumes that will be added to the pod.
            /// These will supersede Image Volumes and VolumesFrom  volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/volumes`.
            internal var volumes: [Components.Schemas.NamedVolume]?
            /// VolumesFrom is a set of containers whose volumes will be added to
            /// this pod. The name or ID of the container must be provided, and
            /// may optionally be followed by a : and then one or more
            /// comma-separated options. Valid options are 'ro', 'rw', and 'z'.
            /// Options will be used for all volumes sourced from the container.
            ///
            /// - Remark: Generated from `#/components/schemas/PodStorageConfig/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// Creates a new `PodStorageConfig`.
            ///
            /// - Parameters:
            ///   - image_volumes: Image volumes bind-mount a container-image mount into the pod's infra container.
            ///   - mounts: Mounts are mounts that will be added to the pod.
            ///   - overlay_volumes: Overlay volumes are named volumes that will be added to the pod.
            ///   - shm_size: ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            ///   - shm_size_systemd: ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            ///   - volumes: Volumes are named volumes that will be added to the pod.
            ///   - volumes_from: VolumesFrom is a set of containers whose volumes will be added to
            internal init(
                image_volumes: [Components.Schemas.ImageVolume]? = nil,
                mounts: [Components.Schemas.Mount]? = nil,
                overlay_volumes: [Components.Schemas.OverlayVolume]? = nil,
                shm_size: Swift.Int64? = nil,
                shm_size_systemd: Swift.Int64? = nil,
                volumes: [Components.Schemas.NamedVolume]? = nil,
                volumes_from: [Swift.String]? = nil
            ) {
                self.image_volumes = image_volumes
                self.mounts = mounts
                self.overlay_volumes = overlay_volumes
                self.shm_size = shm_size
                self.shm_size_systemd = shm_size_systemd
                self.volumes = volumes
                self.volumes_from = volumes_from
            }
            internal enum CodingKeys: String, CodingKey {
                case image_volumes
                case mounts
                case overlay_volumes
                case shm_size
                case shm_size_systemd
                case volumes
                case volumes_from
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodTopOKBody`.
        internal struct PodTopOKBody: Codable, Hashable, Sendable {
            /// Each process running in the container, where each is process
            /// is an array of values corresponding to the titles.
            ///
            /// - Remark: Generated from `#/components/schemas/PodTopOKBody/Processes`.
            internal var Processes: [[Swift.String]]
            /// The ps column titles
            ///
            /// - Remark: Generated from `#/components/schemas/PodTopOKBody/Titles`.
            internal var Titles: [Swift.String]
            /// Creates a new `PodTopOKBody`.
            ///
            /// - Parameters:
            ///   - Processes: Each process running in the container, where each is process
            ///   - Titles: The ps column titles
            internal init(
                Processes: [[Swift.String]],
                Titles: [Swift.String]
            ) {
                self.Processes = Processes
                self.Titles = Titles
            }
            internal enum CodingKeys: String, CodingKey {
                case Processes
                case Titles
            }
        }
        /// - Remark: Generated from `#/components/schemas/PodUnpauseReport`.
        internal struct PodUnpauseReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PodUnpauseReport/Errs`.
            internal var Errs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/PodUnpauseReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PodUnpauseReport`.
            ///
            /// - Parameters:
            ///   - Errs:
            ///   - Id:
            internal init(
                Errs: [Swift.String]? = nil,
                Id: Swift.String? = nil
            ) {
                self.Errs = Errs
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Errs
                case Id
            }
        }
        /// Port An open port on a container
        ///
        /// - Remark: Generated from `#/components/schemas/Port`.
        internal struct Port: Codable, Hashable, Sendable {
            /// Host IP address that the container's port is mapped to
            ///
            /// - Remark: Generated from `#/components/schemas/Port/IP`.
            internal var IP: Swift.String?
            /// Port on the container
            ///
            /// - Remark: Generated from `#/components/schemas/Port/PrivatePort`.
            internal var PrivatePort: Swift.Int
            /// Port exposed on the host
            ///
            /// - Remark: Generated from `#/components/schemas/Port/PublicPort`.
            internal var PublicPort: Swift.Int?
            /// type
            ///
            /// - Remark: Generated from `#/components/schemas/Port/Type`.
            internal var _Type: Swift.String
            /// Creates a new `Port`.
            ///
            /// - Parameters:
            ///   - IP: Host IP address that the container's port is mapped to
            ///   - PrivatePort: Port on the container
            ///   - PublicPort: Port exposed on the host
            ///   - _Type: type
            internal init(
                IP: Swift.String? = nil,
                PrivatePort: Swift.Int,
                PublicPort: Swift.Int? = nil,
                _Type: Swift.String
            ) {
                self.IP = IP
                self.PrivatePort = PrivatePort
                self.PublicPort = PublicPort
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case IP
                case PrivatePort
                case PublicPort
                case _Type = "Type"
            }
        }
        /// PortBinding represents a binding between a Host IP address and a Host Port
        ///
        /// - Remark: Generated from `#/components/schemas/PortBinding`.
        internal struct PortBinding: Codable, Hashable, Sendable {
            /// HostIP is the host IP Address
            ///
            /// - Remark: Generated from `#/components/schemas/PortBinding/HostIp`.
            internal var HostIp: Swift.String?
            /// HostPort is the host port number
            ///
            /// - Remark: Generated from `#/components/schemas/PortBinding/HostPort`.
            internal var HostPort: Swift.String?
            /// Creates a new `PortBinding`.
            ///
            /// - Parameters:
            ///   - HostIp: HostIP is the host IP Address
            ///   - HostPort: HostPort is the host port number
            internal init(
                HostIp: Swift.String? = nil,
                HostPort: Swift.String? = nil
            ) {
                self.HostIp = HostIp
                self.HostPort = HostPort
            }
            internal enum CodingKeys: String, CodingKey {
                case HostIp
                case HostPort
            }
        }
        /// PortMap is a collection of PortBinding indexed by Port
        ///
        /// - Remark: Generated from `#/components/schemas/PortMap`.
        internal struct PortMap: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: [String: [Components.Schemas.PortBinding]]
            /// Creates a new `PortMap`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: [String: [Components.Schemas.PortBinding]] = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PortMapping`.
        internal struct PortMapping: Codable, Hashable, Sendable {
            /// ContainerPort is the port number that will be exposed from the
            /// container.
            /// Mandatory.
            ///
            /// - Remark: Generated from `#/components/schemas/PortMapping/container_port`.
            internal var container_port: Swift.Int?
            /// HostIP is the IP that we will bind to on the host.
            /// If unset, assumed to be 0.0.0.0 (all interfaces).
            ///
            /// - Remark: Generated from `#/components/schemas/PortMapping/host_ip`.
            internal var host_ip: Swift.String?
            /// HostPort is the port number that will be forwarded from the host into
            /// the container.
            /// If omitted, a random port on the host (guaranteed to be over 1024)
            /// will be assigned.
            ///
            /// - Remark: Generated from `#/components/schemas/PortMapping/host_port`.
            internal var host_port: Swift.Int?
            /// Protocol is the protocol forward.
            /// Must be either "tcp", "udp", and "sctp", or some combination of these
            /// separated by commas.
            /// If unset, assumed to be TCP.
            ///
            /// - Remark: Generated from `#/components/schemas/PortMapping/protocol`.
            internal var _protocol: Swift.String?
            /// Range is the number of ports that will be forwarded, starting at
            /// HostPort and ContainerPort and counting up.
            /// This is 1-indexed, so 1 is assumed to be a single port (only the
            /// Hostport:Containerport mapping will be added), 2 is two ports (both
            /// Hostport:Containerport and Hostport+1:Containerport+1), etc.
            /// If unset, assumed to be 1 (a single port).
            /// Both hostport + range and containerport + range must be less than
            /// 65536.
            ///
            /// - Remark: Generated from `#/components/schemas/PortMapping/range`.
            internal var range: Swift.Int?
            /// Creates a new `PortMapping`.
            ///
            /// - Parameters:
            ///   - container_port: ContainerPort is the port number that will be exposed from the
            ///   - host_ip: HostIP is the IP that we will bind to on the host.
            ///   - host_port: HostPort is the port number that will be forwarded from the host into
            ///   - _protocol: Protocol is the protocol forward.
            ///   - range: Range is the number of ports that will be forwarded, starting at
            internal init(
                container_port: Swift.Int? = nil,
                host_ip: Swift.String? = nil,
                host_port: Swift.Int? = nil,
                _protocol: Swift.String? = nil,
                range: Swift.Int? = nil
            ) {
                self.container_port = container_port
                self.host_ip = host_ip
                self.host_port = host_port
                self._protocol = _protocol
                self.range = range
            }
            internal enum CodingKeys: String, CodingKey {
                case container_port
                case host_ip
                case host_port
                case _protocol = "protocol"
                case range
            }
        }
        /// PortSet is a collection of structs indexed by Port
        ///
        /// - Remark: Generated from `#/components/schemas/PortSet`.
        internal struct PortSet: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
            /// Creates a new `PortSet`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/Propagation`.
        internal typealias Propagation = Swift.String
        /// POST "/volumes/prune"
        ///
        /// - Remark: Generated from `#/components/schemas/PruneReport`.
        internal struct PruneReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PruneReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PruneReport/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PruneReport/Size`.
            internal var Size: Swift.Int?
            /// Creates a new `PruneReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - Id:
            ///   - Size:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil,
                Size: Swift.Int? = nil
            ) {
                self.Err = Err
                self.Id = Id
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
                case Size
            }
        }
        /// PublishState represents the state of a Volume as it pertains to its
        /// use on a particular Node.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishState`.
        internal typealias PublishState = Swift.String
        /// PublishStatus represents the status of the volume as published to an
        /// individual node
        ///
        /// - Remark: Generated from `#/components/schemas/PublishStatus`.
        internal struct PublishStatus: Codable, Hashable, Sendable {
            /// NodeID is the ID of the swarm node this Volume is published to.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishStatus/NodeID`.
            internal var NodeID: Swift.String?
            /// PublishContext is the PublishContext returned by the CSI plugin when
            /// a volume is published.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishStatus/PublishContext`.
            internal struct PublishContextPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `PublishContextPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// PublishContext is the PublishContext returned by the CSI plugin when
            /// a volume is published.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishStatus/PublishContext`.
            internal var PublishContext: Components.Schemas.PublishStatus.PublishContextPayload?
            /// - Remark: Generated from `#/components/schemas/PublishStatus/State`.
            internal var State: Components.Schemas.PublishState?
            /// Creates a new `PublishStatus`.
            ///
            /// - Parameters:
            ///   - NodeID: NodeID is the ID of the swarm node this Volume is published to.
            ///   - PublishContext: PublishContext is the PublishContext returned by the CSI plugin when
            ///   - State:
            internal init(
                NodeID: Swift.String? = nil,
                PublishContext: Components.Schemas.PublishStatus.PublishContextPayload? = nil,
                State: Components.Schemas.PublishState? = nil
            ) {
                self.NodeID = NodeID
                self.PublishContext = PublishContext
                self.State = State
            }
            internal enum CodingKeys: String, CodingKey {
                case NodeID
                case PublishContext
                case State
            }
        }
        /// RemoteSocket describes information about the API socket
        ///
        /// - Remark: Generated from `#/components/schemas/RemoteSocket`.
        internal struct RemoteSocket: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RemoteSocket/exists`.
            internal var exists: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RemoteSocket/path`.
            internal var path: Swift.String?
            /// Creates a new `RemoteSocket`.
            ///
            /// - Parameters:
            ///   - exists:
            ///   - path:
            internal init(
                exists: Swift.Bool? = nil,
                path: Swift.String? = nil
            ) {
                self.exists = exists
                self.path = path
            }
            internal enum CodingKeys: String, CodingKey {
                case exists
                case path
            }
        }
        /// Resources contains container's resources (cgroups config, ulimits...)
        ///
        /// - Remark: Generated from `#/components/schemas/Resources`.
        internal struct Resources: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceReadBps`.
            internal var BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceReadIOps`.
            internal var BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceWriteBps`.
            internal var BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceWriteIOps`.
            internal var BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeight`.
            internal var BlkioWeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevice`.
            internal var BlkioWeightDevice: [Components.Schemas.WeightDevice]?
            /// Applicable to UNIX platforms
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// Applicable to Windows
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuCount`.
            internal var CpuCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpuPercent`.
            internal var CpuPercent: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpuPeriod`.
            internal var CpuPeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpuQuota`.
            internal var CpuQuota: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpuRealtimePeriod`.
            internal var CpuRealtimePeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpuRealtimeRuntime`.
            internal var CpuRealtimeRuntime: Swift.Int64?
            /// Applicable to all platforms
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuShares`.
            internal var CpuShares: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/CpusetCpus`.
            internal var CpusetCpus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Resources/CpusetMems`.
            internal var CpusetMems: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Resources/DeviceCgroupRules`.
            internal var DeviceCgroupRules: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Resources/DeviceRequests`.
            internal var DeviceRequests: [Components.Schemas.DeviceRequest]?
            /// - Remark: Generated from `#/components/schemas/Resources/Devices`.
            internal var Devices: [Components.Schemas.DeviceMapping]?
            /// - Remark: Generated from `#/components/schemas/Resources/IOMaximumBandwidth`.
            internal var IOMaximumBandwidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Resources/IOMaximumIOps`.
            internal var IOMaximumIOps: Swift.Int?
            /// KernelMemory specifies the kernel memory limit (in bytes) for the container.
            /// Deprecated: kernel 5.4 deprecated kmem.limit_in_bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/KernelMemory`.
            internal var KernelMemory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/KernelMemoryTCP`.
            internal var KernelMemoryTCP: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/Memory`.
            internal var Memory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/MemoryReservation`.
            internal var MemoryReservation: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/MemorySwap`.
            internal var MemorySwap: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/MemorySwappiness`.
            internal var MemorySwappiness: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/NanoCpus`.
            internal var NanoCpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/OomKillDisable`.
            internal var OomKillDisable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Resources/PidsLimit`.
            internal var PidsLimit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/Ulimits`.
            internal var Ulimits: [Components.Schemas.Ulimit]?
            /// Creates a new `Resources`.
            ///
            /// - Parameters:
            ///   - BlkioDeviceReadBps:
            ///   - BlkioDeviceReadIOps:
            ///   - BlkioDeviceWriteBps:
            ///   - BlkioDeviceWriteIOps:
            ///   - BlkioWeight:
            ///   - BlkioWeightDevice:
            ///   - CgroupParent: Applicable to UNIX platforms
            ///   - CpuCount: Applicable to Windows
            ///   - CpuPercent:
            ///   - CpuPeriod:
            ///   - CpuQuota:
            ///   - CpuRealtimePeriod:
            ///   - CpuRealtimeRuntime:
            ///   - CpuShares: Applicable to all platforms
            ///   - CpusetCpus:
            ///   - CpusetMems:
            ///   - DeviceCgroupRules:
            ///   - DeviceRequests:
            ///   - Devices:
            ///   - IOMaximumBandwidth:
            ///   - IOMaximumIOps:
            ///   - KernelMemory: KernelMemory specifies the kernel memory limit (in bytes) for the container.
            ///   - KernelMemoryTCP:
            ///   - Memory:
            ///   - MemoryReservation:
            ///   - MemorySwap:
            ///   - MemorySwappiness:
            ///   - NanoCpus:
            ///   - OomKillDisable:
            ///   - PidsLimit:
            ///   - Ulimits:
            internal init(
                BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                CgroupParent: Swift.String? = nil,
                CpuCount: Swift.Int64? = nil,
                CpuPercent: Swift.Int64? = nil,
                CpuPeriod: Swift.Int64? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int64? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpuShares: Swift.Int64? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                DeviceCgroupRules: [Swift.String]? = nil,
                DeviceRequests: [Components.Schemas.DeviceRequest]? = nil,
                Devices: [Components.Schemas.DeviceMapping]? = nil,
                IOMaximumBandwidth: Swift.Int? = nil,
                IOMaximumIOps: Swift.Int? = nil,
                KernelMemory: Swift.Int64? = nil,
                KernelMemoryTCP: Swift.Int64? = nil,
                Memory: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                NanoCpus: Swift.Int64? = nil,
                OomKillDisable: Swift.Bool? = nil,
                PidsLimit: Swift.Int64? = nil,
                Ulimits: [Components.Schemas.Ulimit]? = nil
            ) {
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.CgroupParent = CgroupParent
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpuShares = CpuShares
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.DeviceCgroupRules = DeviceCgroupRules
                self.DeviceRequests = DeviceRequests
                self.Devices = Devices
                self.IOMaximumBandwidth = IOMaximumBandwidth
                self.IOMaximumIOps = IOMaximumIOps
                self.KernelMemory = KernelMemory
                self.KernelMemoryTCP = KernelMemoryTCP
                self.Memory = Memory
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.NanoCpus = NanoCpus
                self.OomKillDisable = OomKillDisable
                self.PidsLimit = PidsLimit
                self.Ulimits = Ulimits
            }
            internal enum CodingKeys: String, CodingKey {
                case BlkioDeviceReadBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteBps
                case BlkioDeviceWriteIOps
                case BlkioWeight
                case BlkioWeightDevice
                case CgroupParent
                case CpuCount
                case CpuPercent
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpuShares
                case CpusetCpus
                case CpusetMems
                case DeviceCgroupRules
                case DeviceRequests
                case Devices
                case IOMaximumBandwidth
                case IOMaximumIOps
                case KernelMemory
                case KernelMemoryTCP
                case Memory
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case NanoCpus
                case OomKillDisable
                case PidsLimit
                case Ulimits
            }
        }
        /// - Remark: Generated from `#/components/schemas/RestartPolicy`.
        internal struct RestartPolicy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RestartPolicy/MaximumRetryCount`.
            internal var MaximumRetryCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/RestartPolicy/Name`.
            internal var Name: Components.Schemas.RestartPolicyMode?
            /// Creates a new `RestartPolicy`.
            ///
            /// - Parameters:
            ///   - MaximumRetryCount:
            ///   - Name:
            internal init(
                MaximumRetryCount: Swift.Int64? = nil,
                Name: Components.Schemas.RestartPolicyMode? = nil
            ) {
                self.MaximumRetryCount = MaximumRetryCount
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case MaximumRetryCount
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/RestartPolicyMode`.
        internal typealias RestartPolicyMode = Swift.String
        /// - Remark: Generated from `#/components/schemas/RootFS`.
        internal struct RootFS: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RootFS/Layers`.
            internal var Layers: [Components.Schemas.Digest]?
            /// - Remark: Generated from `#/components/schemas/RootFS/Type`.
            internal var _Type: Swift.String?
            /// Creates a new `RootFS`.
            ///
            /// - Parameters:
            ///   - Layers:
            ///   - _Type:
            internal init(
                Layers: [Components.Schemas.Digest]? = nil,
                _Type: Swift.String? = nil
            ) {
                self.Layers = Layers
                self._Type = _Type
            }
            internal enum CodingKeys: String, CodingKey {
                case Layers
                case _Type = "Type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Route`.
        internal struct Route: Codable, Hashable, Sendable {
            /// Destination for this route in CIDR form.
            ///
            /// - Remark: Generated from `#/components/schemas/Route/destination`.
            internal var destination: Swift.String?
            /// Gateway IP for this route.
            ///
            /// - Remark: Generated from `#/components/schemas/Route/gateway`.
            internal var gateway: Swift.String?
            /// Metric for this route. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Route/metric`.
            internal var metric: Swift.Int?
            /// Creates a new `Route`.
            ///
            /// - Parameters:
            ///   - destination: Destination for this route in CIDR form.
            ///   - gateway: Gateway IP for this route.
            ///   - metric: Metric for this route. Optional.
            internal init(
                destination: Swift.String? = nil,
                gateway: Swift.String? = nil,
                metric: Swift.Int? = nil
            ) {
                self.destination = destination
                self.gateway = gateway
                self.metric = metric
            }
            internal enum CodingKeys: String, CodingKey {
                case destination
                case gateway
                case metric
            }
        }
        /// Schema2HealthConfig is a HealthConfig, which holds configuration settings
        /// for the HEALTHCHECK feature, from docker/docker/api/types/container.
        ///
        /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig`.
        internal struct Schema2HealthConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/Interval`.
            internal var Interval: Components.Schemas.Duration?
            /// Retries is the number of consecutive failures needed to consider a container as unhealthy.
            /// Zero means inherit.
            ///
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/Retries`.
            internal var Retries: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/StartInterval`.
            internal var StartInterval: Components.Schemas.Duration?
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/StartPeriod`.
            internal var StartPeriod: Components.Schemas.Duration?
            /// Test is the test to perform to check that the container is healthy.
            /// An empty slice means to inherit the default.
            /// The options are:
            /// {} : inherit healthcheck
            /// {"NONE"} : disable healthcheck
            /// {"CMD", args...} : exec arguments directly
            /// {"CMD-SHELL", command} : run command with system's default shell
            ///
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/Test`.
            internal var Test: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Schema2HealthConfig/Timeout`.
            internal var Timeout: Components.Schemas.Duration?
            /// Creates a new `Schema2HealthConfig`.
            ///
            /// - Parameters:
            ///   - Interval:
            ///   - Retries: Retries is the number of consecutive failures needed to consider a container as unhealthy.
            ///   - StartInterval:
            ///   - StartPeriod:
            ///   - Test: Test is the test to perform to check that the container is healthy.
            ///   - Timeout:
            internal init(
                Interval: Components.Schemas.Duration? = nil,
                Retries: Swift.Int64? = nil,
                StartInterval: Components.Schemas.Duration? = nil,
                StartPeriod: Components.Schemas.Duration? = nil,
                Test: [Swift.String]? = nil,
                Timeout: Components.Schemas.Duration? = nil
            ) {
                self.Interval = Interval
                self.Retries = Retries
                self.StartInterval = StartInterval
                self.StartPeriod = StartPeriod
                self.Test = Test
                self.Timeout = Timeout
            }
            internal enum CodingKeys: String, CodingKey {
                case Interval
                case Retries
                case StartInterval
                case StartPeriod
                case Test
                case Timeout
            }
        }
        /// This is publicly visible as c/image/manifest.Schema2List.
        /// Internal users should usually use Schema2List instead.
        ///
        /// - Remark: Generated from `#/components/schemas/Schema2ListPublic`.
        internal struct Schema2ListPublic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schema2ListPublic/manifests`.
            internal var manifests: [Components.Schemas.Schema2ManifestDescriptor]?
            /// - Remark: Generated from `#/components/schemas/Schema2ListPublic/mediaType`.
            internal var mediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema2ListPublic/schemaVersion`.
            internal var schemaVersion: Swift.Int64?
            /// Creates a new `Schema2ListPublic`.
            ///
            /// - Parameters:
            ///   - manifests:
            ///   - mediaType:
            ///   - schemaVersion:
            internal init(
                manifests: [Components.Schemas.Schema2ManifestDescriptor]? = nil,
                mediaType: Swift.String? = nil,
                schemaVersion: Swift.Int64? = nil
            ) {
                self.manifests = manifests
                self.mediaType = mediaType
                self.schemaVersion = schemaVersion
            }
            internal enum CodingKeys: String, CodingKey {
                case manifests
                case mediaType
                case schemaVersion
            }
        }
        /// This is publicly visible as c/image/manifest.Schema2ManifestDescriptor.
        ///
        /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor`.
        internal struct Schema2ManifestDescriptor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor/digest`.
            internal var digest: Components.Schemas.Digest?
            /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor/mediaType`.
            internal var mediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor/platform`.
            internal var platform: Components.Schemas.Schema2PlatformSpec?
            /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor/size`.
            internal var size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Schema2ManifestDescriptor/urls`.
            internal var urls: [Swift.String]?
            /// Creates a new `Schema2ManifestDescriptor`.
            ///
            /// - Parameters:
            ///   - digest:
            ///   - mediaType:
            ///   - platform:
            ///   - size:
            ///   - urls:
            internal init(
                digest: Components.Schemas.Digest? = nil,
                mediaType: Swift.String? = nil,
                platform: Components.Schemas.Schema2PlatformSpec? = nil,
                size: Swift.Int64? = nil,
                urls: [Swift.String]? = nil
            ) {
                self.digest = digest
                self.mediaType = mediaType
                self.platform = platform
                self.size = size
                self.urls = urls
            }
            internal enum CodingKeys: String, CodingKey {
                case digest
                case mediaType
                case platform
                case size
                case urls
            }
        }
        /// Schema2PlatformSpec describes the platform which a particular manifest is
        /// specialized for.
        /// This is publicly visible as c/image/manifest.Schema2PlatformSpec.
        ///
        /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec`.
        internal struct Schema2PlatformSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/architecture`.
            internal var architecture: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/features`.
            internal var features: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/os`.
            internal var os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/os.features`.
            internal var os_period_features: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/os.version`.
            internal var os_period_version: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schema2PlatformSpec/variant`.
            internal var variant: Swift.String?
            /// Creates a new `Schema2PlatformSpec`.
            ///
            /// - Parameters:
            ///   - architecture:
            ///   - features:
            ///   - os:
            ///   - os_period_features:
            ///   - os_period_version:
            ///   - variant:
            internal init(
                architecture: Swift.String? = nil,
                features: [Swift.String]? = nil,
                os: Swift.String? = nil,
                os_period_features: [Swift.String]? = nil,
                os_period_version: Swift.String? = nil,
                variant: Swift.String? = nil
            ) {
                self.architecture = architecture
                self.features = features
                self.os = os
                self.os_period_features = os_period_features
                self.os_period_version = os_period_version
                self.variant = variant
            }
            internal enum CodingKeys: String, CodingKey {
                case architecture
                case features
                case os
                case os_period_features = "os.features"
                case os_period_version = "os.version"
                case variant
            }
        }
        /// Scope defines the Scope of a Cluster Volume. This is how many nodes a
        /// Volume can be accessed simultaneously on.
        ///
        /// - Remark: Generated from `#/components/schemas/Scope`.
        internal typealias Scope = Swift.String
        /// - Remark: Generated from `#/components/schemas/ScpReport`.
        internal struct ScpReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ScpReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `ScpReport`.
            ///
            /// - Parameters:
            ///   - Id:
            internal init(Id: Swift.String? = nil) {
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Id
            }
        }
        /// Secret represents a Swarm Secret value that must be passed to the CSI
        /// storage plugin when operating on this Volume. It represents one key-value
        /// pair of possibly many.
        ///
        /// - Remark: Generated from `#/components/schemas/Secret`.
        internal struct Secret: Codable, Hashable, Sendable {
            /// Key is the name of the key of the key-value pair passed to the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/Secret/Key`.
            internal var Key: Swift.String?
            /// Secret is the swarm Secret object from which to read data. This can be a
            /// Secret name or ID. The Secret data is retrieved by Swarm and used as the
            /// value of the key-value pair passed to the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/Secret/Secret`.
            internal var Secret: Swift.String?
            /// Creates a new `Secret`.
            ///
            /// - Parameters:
            ///   - Key: Key is the name of the key of the key-value pair passed to the plugin.
            ///   - Secret: Secret is the swarm Secret object from which to read data. This can be a
            internal init(
                Key: Swift.String? = nil,
                Secret: Swift.String? = nil
            ) {
                self.Key = Key
                self.Secret = Secret
            }
            internal enum CodingKeys: String, CodingKey {
                case Key
                case Secret
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretCreate`.
        internal struct SecretCreate: Codable, Hashable, Sendable {
            /// Base64-url-safe-encoded (RFC 4648) data to store as secret.
            ///
            /// - Remark: Generated from `#/components/schemas/SecretCreate/Data`.
            internal var Data: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretCreate/Driver`.
            internal var Driver: Components.Schemas.SecretDriverSpec?
            /// Labels are labels on the secret
            ///
            /// - Remark: Generated from `#/components/schemas/SecretCreate/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels are labels on the secret
            ///
            /// - Remark: Generated from `#/components/schemas/SecretCreate/Labels`.
            internal var Labels: Components.Schemas.SecretCreate.LabelsPayload?
            /// User-defined name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/SecretCreate/Name`.
            internal var Name: Swift.String?
            /// Creates a new `SecretCreate`.
            ///
            /// - Parameters:
            ///   - Data: Base64-url-safe-encoded (RFC 4648) data to store as secret.
            ///   - Driver:
            ///   - Labels: Labels are labels on the secret
            ///   - Name: User-defined name of the secret.
            internal init(
                Data: Swift.String? = nil,
                Driver: Components.Schemas.SecretDriverSpec? = nil,
                Labels: Components.Schemas.SecretCreate.LabelsPayload? = nil,
                Name: Swift.String? = nil
            ) {
                self.Data = Data
                self.Driver = Driver
                self.Labels = Labels
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Data
                case Driver
                case Labels
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretCreateReport`.
        internal struct SecretCreateReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretCreateReport/ID`.
            internal var ID: Swift.String?
            /// Creates a new `SecretCreateReport`.
            ///
            /// - Parameters:
            ///   - ID:
            internal init(ID: Swift.String? = nil) {
                self.ID = ID
            }
            internal enum CodingKeys: String, CodingKey {
                case ID
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretDriverSpec`.
        internal struct SecretDriverSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretDriverSpec/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretDriverSpec/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SecretDriverSpec/Options`.
            internal var Options: Components.Schemas.SecretDriverSpec.OptionsPayload?
            /// Creates a new `SecretDriverSpec`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Options:
            internal init(
                Name: Swift.String? = nil,
                Options: Components.Schemas.SecretDriverSpec.OptionsPayload? = nil
            ) {
                self.Name = Name
                self.Options = Options
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretInfoReport`.
        internal struct SecretInfoReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretInfoReport/CreatedAt`.
            internal var CreatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReport/ID`.
            internal var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReport/SecretData`.
            internal var SecretData: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReport/Spec`.
            internal var Spec: Components.Schemas.SecretSpec?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReport/UpdatedAt`.
            internal var UpdatedAt: Foundation.Date?
            /// Creates a new `SecretInfoReport`.
            ///
            /// - Parameters:
            ///   - CreatedAt:
            ///   - ID:
            ///   - SecretData:
            ///   - Spec:
            ///   - UpdatedAt:
            internal init(
                CreatedAt: Foundation.Date? = nil,
                ID: Swift.String? = nil,
                SecretData: Swift.String? = nil,
                Spec: Components.Schemas.SecretSpec? = nil,
                UpdatedAt: Foundation.Date? = nil
            ) {
                self.CreatedAt = CreatedAt
                self.ID = ID
                self.SecretData = SecretData
                self.Spec = Spec
                self.UpdatedAt = UpdatedAt
            }
            internal enum CodingKeys: String, CodingKey {
                case CreatedAt
                case ID
                case SecretData
                case Spec
                case UpdatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat`.
        internal struct SecretInfoReportCompat: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/CreatedAt`.
            internal var CreatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/ID`.
            internal var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/SecretData`.
            internal var SecretData: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/Spec`.
            internal var Spec: Components.Schemas.SecretSpec?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/UpdatedAt`.
            internal var UpdatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SecretInfoReportCompat/Version`.
            internal var Version: Components.Schemas.SecretVersion?
            /// Creates a new `SecretInfoReportCompat`.
            ///
            /// - Parameters:
            ///   - CreatedAt:
            ///   - ID:
            ///   - SecretData:
            ///   - Spec:
            ///   - UpdatedAt:
            ///   - Version:
            internal init(
                CreatedAt: Foundation.Date? = nil,
                ID: Swift.String? = nil,
                SecretData: Swift.String? = nil,
                Spec: Components.Schemas.SecretSpec? = nil,
                UpdatedAt: Foundation.Date? = nil,
                Version: Components.Schemas.SecretVersion? = nil
            ) {
                self.CreatedAt = CreatedAt
                self.ID = ID
                self.SecretData = SecretData
                self.Spec = Spec
                self.UpdatedAt = UpdatedAt
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case CreatedAt
                case ID
                case SecretData
                case Spec
                case UpdatedAt
                case Version
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretRmReport`.
        internal struct SecretRmReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretRmReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretRmReport/ID`.
            internal var ID: Swift.String?
            /// Creates a new `SecretRmReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - ID:
            internal init(
                Err: Swift.String? = nil,
                ID: Swift.String? = nil
            ) {
                self.Err = Err
                self.ID = ID
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case ID
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretSpec`.
        internal struct SecretSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Driver`.
            internal var Driver: Components.Schemas.SecretDriverSpec?
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Labels`.
            internal var Labels: Components.Schemas.SecretSpec.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Name`.
            internal var Name: Swift.String?
            /// Creates a new `SecretSpec`.
            ///
            /// - Parameters:
            ///   - Driver:
            ///   - Labels:
            ///   - Name:
            internal init(
                Driver: Components.Schemas.SecretDriverSpec? = nil,
                Labels: Components.Schemas.SecretSpec.LabelsPayload? = nil,
                Name: Swift.String? = nil
            ) {
                self.Driver = Driver
                self.Labels = Labels
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Driver
                case Labels
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretVersion`.
        internal struct SecretVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecretVersion/Index`.
            internal var Index: Swift.Int64?
            /// Creates a new `SecretVersion`.
            ///
            /// - Parameters:
            ///   - Index:
            internal init(Index: Swift.Int64? = nil) {
                self.Index = Index
            }
            internal enum CodingKeys: String, CodingKey {
                case Index
            }
        }
        /// SecurityInfo describes the libpod host
        ///
        /// - Remark: Generated from `#/components/schemas/SecurityInfo`.
        internal struct SecurityInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/apparmorEnabled`.
            internal var apparmorEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/capabilities`.
            internal var capabilities: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/rootless`.
            internal var rootless: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/seccompEnabled`.
            internal var seccompEnabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/seccompProfilePath`.
            internal var seccompProfilePath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecurityInfo/selinuxEnabled`.
            internal var selinuxEnabled: Swift.Bool?
            /// Creates a new `SecurityInfo`.
            ///
            /// - Parameters:
            ///   - apparmorEnabled:
            ///   - capabilities:
            ///   - rootless:
            ///   - seccompEnabled:
            ///   - seccompProfilePath:
            ///   - selinuxEnabled:
            internal init(
                apparmorEnabled: Swift.Bool? = nil,
                capabilities: Swift.String? = nil,
                rootless: Swift.Bool? = nil,
                seccompEnabled: Swift.Bool? = nil,
                seccompProfilePath: Swift.String? = nil,
                selinuxEnabled: Swift.Bool? = nil
            ) {
                self.apparmorEnabled = apparmorEnabled
                self.capabilities = capabilities
                self.rootless = rootless
                self.seccompEnabled = seccompEnabled
                self.seccompProfilePath = seccompProfilePath
                self.selinuxEnabled = selinuxEnabled
            }
            internal enum CodingKeys: String, CodingKey {
                case apparmorEnabled
                case capabilities
                case rootless
                case seccompEnabled
                case seccompProfilePath
                case selinuxEnabled
            }
        }
        /// ServiceCreateResponse contains the information returned to a client on the
        /// creation of a new service.
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse`.
        internal struct ServiceCreateResponse: Codable, Hashable, Sendable {
            /// The ID of the created service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse/ID`.
            internal var ID: Swift.String?
            /// Optional warning message.
            ///
            /// FIXME(thaJeztah): this should have "omitempty" in the generated type.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse/Warnings`.
            internal var Warnings: [Swift.String]?
            /// Creates a new `ServiceCreateResponse`.
            ///
            /// - Parameters:
            ///   - ID: The ID of the created service.
            ///   - Warnings: Optional warning message.
            internal init(
                ID: Swift.String? = nil,
                Warnings: [Swift.String]? = nil
            ) {
                self.ID = ID
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case ID
                case Warnings
            }
        }
        /// ServiceInfo represents service parameters with the list of service's tasks
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceInfo`.
        internal struct ServiceInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ServiceInfo/LocalLBIndex`.
            internal var LocalLBIndex: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ServiceInfo/Ports`.
            internal var Ports: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ServiceInfo/Tasks`.
            internal var Tasks: [Components.Schemas.Task]?
            /// - Remark: Generated from `#/components/schemas/ServiceInfo/VIP`.
            internal var VIP: Swift.String?
            /// Creates a new `ServiceInfo`.
            ///
            /// - Parameters:
            ///   - LocalLBIndex:
            ///   - Ports:
            ///   - Tasks:
            ///   - VIP:
            internal init(
                LocalLBIndex: Swift.Int64? = nil,
                Ports: [Swift.String]? = nil,
                Tasks: [Components.Schemas.Task]? = nil,
                VIP: Swift.String? = nil
            ) {
                self.LocalLBIndex = LocalLBIndex
                self.Ports = Ports
                self.Tasks = Tasks
                self.VIP = VIP
            }
            internal enum CodingKeys: String, CodingKey {
                case LocalLBIndex
                case Ports
                case Tasks
                case VIP
            }
        }
        /// ServiceUpdateResponse service update response
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceUpdateResponse`.
        internal struct ServiceUpdateResponse: Codable, Hashable, Sendable {
            /// Optional warning messages
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceUpdateResponse/Warnings`.
            internal var Warnings: [Swift.String]?
            /// Creates a new `ServiceUpdateResponse`.
            ///
            /// - Parameters:
            ///   - Warnings: Optional warning messages
            internal init(Warnings: [Swift.String]? = nil) {
                self.Warnings = Warnings
            }
            internal enum CodingKeys: String, CodingKey {
                case Warnings
            }
        }
        /// SharingMode defines the Sharing of a Cluster Volume. This is how Tasks using a
        /// Volume at the same time can use it.
        ///
        /// - Remark: Generated from `#/components/schemas/SharingMode`.
        internal typealias SharingMode = Swift.String
        /// It implements the [os.Signal] interface.
        ///
        /// - Remark: Generated from `#/components/schemas/Signal`.
        internal typealias Signal = Swift.Int64
        /// SlirpInfo describes the slirp executable that is being used
        ///
        /// - Remark: Generated from `#/components/schemas/SlirpInfo`.
        internal struct SlirpInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlirpInfo/executable`.
            internal var executable: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlirpInfo/package`.
            internal var package: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SlirpInfo/version`.
            internal var version: Swift.String?
            /// Creates a new `SlirpInfo`.
            ///
            /// - Parameters:
            ///   - executable:
            ///   - package:
            ///   - version:
            internal init(
                executable: Swift.String? = nil,
                package: Swift.String? = nil,
                version: Swift.String? = nil
            ) {
                self.executable = executable
                self.package = package
                self.version = version
            }
            internal enum CodingKeys: String, CodingKey {
                case executable
                case package
                case version
            }
        }
        /// SpecGenerator creates an OCI spec and Libpod configuration options to create
        /// a container based on the given configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/SpecGenerator`.
        internal struct SpecGenerator: Codable, Hashable, Sendable {
            /// Map of networks names or ids that the container should join.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PerNetworkOptions]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PerNetworkOptions] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map of networks names or ids that the container should join.
            /// You can request additional settings for each network, you can
            /// set network aliases, static ips, static mac address  and the
            /// network interface name for this container on the specific network.
            /// If the map is empty and the bridge network mode is set the container
            /// will be joined to the default network.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/Networks`.
            internal var Networks: Components.Schemas.SpecGenerator.NetworksPayload?
            /// Annotations are key-value options passed into the container runtime
            /// that can be used to trigger special behavior.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/annotations`.
            internal struct annotationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `annotationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Annotations are key-value options passed into the container runtime
            /// that can be used to trigger special behavior.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/annotations`.
            internal var annotations: Components.Schemas.SpecGenerator.annotationsPayload?
            /// ApparmorProfile is the name of the Apparmor profile the container
            /// will use.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/apparmor_profile`.
            internal var apparmor_profile: Swift.String?
            /// BaseHostsFile is the base file to create the `/etc/hosts` file inside the container.
            /// This must either be an absolute path to a file on the host system, or one of the
            /// special flags `image` or `none`.
            /// If it is empty it defaults to the base_hosts_file configuration in containers.conf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/base_hosts_file`.
            internal var base_hosts_file: Swift.String?
            /// CapAdd are capabilities which will be added to the container.
            /// Conflicts with Privileged.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cap_add`.
            internal var cap_add: [Swift.String]?
            /// CapDrop are capabilities which will be removed from the container.
            /// Conflicts with Privileged.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cap_drop`.
            internal var cap_drop: [Swift.String]?
            /// CgroupParent is the container's Cgroup parent.
            /// If not set, the default for the current cgroup driver will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cgroup_parent`.
            internal var cgroup_parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cgroupns`.
            internal var cgroupns: Components.Schemas.Namespace?
            /// CgroupsMode sets a policy for how cgroups will be created for the
            /// container, including the ability to disable creation entirely.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cgroups_mode`.
            internal var cgroups_mode: Swift.String?
            /// ChrootDirs is an additional set of directories that need to be
            /// treated as root directories. Standard bind mounts will be mounted
            /// into paths relative to these directories.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/chroot_directories`.
            internal var chroot_directories: [Swift.String]?
            /// CNINetworks is a list of CNI networks to join the container to.
            /// If this list is empty, the default CNI network will be joined
            /// instead. If at least one entry is present, we will not join the
            /// default network (unless it is part of this list).
            /// Only available if NetNS is set to bridge.
            /// Optional.
            /// Deprecated: as of podman 4.0 use "Networks" instead.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/cni_networks`.
            internal var cni_networks: [Swift.String]?
            /// Command is the container's command.
            /// If not given and Image is specified, this will be populated by the
            /// image's configuration.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/command`.
            internal var command: [Swift.String]?
            /// ConmonPidFile is a path at which a PID file for Conmon will be
            /// placed.
            /// If not given, a default location will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/conmon_pid_file`.
            internal var conmon_pid_file: Swift.String?
            /// ContainerCreateCommand is the command that was used to create this
            /// container.
            /// This will be shown in the output of Inspect() on the container, and
            /// may also be used by some tools that wish to recreate the container
            /// (e.g. `podman generate systemd --new`).
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/containerCreateCommand`.
            internal var containerCreateCommand: [Swift.String]?
            /// Create the working directory if it doesn't exist.
            /// If unset, it doesn't create it.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/create_working_dir`.
            internal var create_working_dir: Swift.Bool?
            /// DependencyContainers is an array of containers this container
            /// depends on. Dependency containers must be started before this
            /// container. Dependencies can be specified by name or full/partial ID.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/dependencyContainers`.
            internal var dependencyContainers: [Swift.String]?
            /// DeviceCgroupRule are device cgroup rules that allow containers
            /// to use additional types of devices.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/device_cgroup_rule`.
            internal var device_cgroup_rule: [Components.Schemas.LinuxDeviceCgroup]?
            /// Devices are devices that will be added to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/devices`.
            internal var devices: [Components.Schemas.LinuxDevice]?
            /// DevicesFrom specifies that this container will mount the device(s) from other container(s).
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/devices_from`.
            internal var devices_from: [Swift.String]?
            /// DNSOptions is a set of DNS options that will be used in the
            /// container's resolv.conf, replacing the host's DNS options which are
            /// used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/dns_option`.
            internal var dns_option: [Swift.String]?
            /// DNSSearch is a set of DNS search domains that will be used in the
            /// container's resolv.conf, replacing the host's DNS search domains
            /// which are used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/dns_search`.
            internal var dns_search: [Swift.String]?
            /// DNSServers is a set of DNS servers that will be used in the
            /// container's resolv.conf, replacing the host's DNS Servers which are
            /// used by default.
            /// Conflicts with UseImageResolvConf.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/dns_server`.
            internal var dns_server: [Swift.String]?
            /// Entrypoint is the container's entrypoint.
            /// If not given and Image is specified, this will be populated by the
            /// image's configuration.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/entrypoint`.
            internal var entrypoint: [Swift.String]?
            /// Env is a set of environment variables that will be set in the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/env`.
            internal struct envPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `envPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Env is a set of environment variables that will be set in the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/env`.
            internal var env: Components.Schemas.SpecGenerator.envPayload?
            /// EnvHost indicates that the host environment should be added to container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/env_host`.
            internal var env_host: Swift.Bool?
            /// EnvMerge takes the specified environment variables from image and preprocess them before injecting them into the
            /// container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/envmerge`.
            internal var envmerge: [Swift.String]?
            /// Expose is a number of ports that will be forwarded to the container
            /// if PublishExposedPorts is set.
            /// Expose is a map of uint16 (port number) to a string representing
            /// protocol i.e map[uint16]string. Allowed protocols are "tcp", "udp", and "sctp", or some
            /// combination of the three separated by commas.
            /// If protocol is set to "" we will assume TCP.
            /// Only available if NetNS is set to Bridge or Slirp, and
            /// PublishExposedPorts is set.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/expose`.
            internal var expose: OpenAPIRuntime.OpenAPIValueContainer?
            /// GroupEntry specifies an arbitrary string to append to the container's /etc/group file.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/group_entry`.
            internal var group_entry: Swift.String?
            /// Groups are a list of supplemental groups the container's user will
            /// be granted access to.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/groups`.
            internal var groups: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/health_check_on_failure_action`.
            internal var health_check_on_failure_action: Components.Schemas.HealthCheckOnFailureAction?
            /// HealthLogDestination defines the destination where the log is stored.
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/healthLogDestination`.
            internal var healthLogDestination: Swift.String?
            /// HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            /// ('0' value means an infinite number of attempts in the log file).
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/healthMaxLogCount`.
            internal var healthMaxLogCount: Swift.Int?
            /// HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            /// ("0" value means an infinite log length).
            /// TODO (6.0): In next major release convert it to pointer and use omitempty
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/healthMaxLogSize`.
            internal var healthMaxLogSize: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/healthconfig`.
            internal var healthconfig: Components.Schemas.Schema2HealthConfig?
            /// HostDeviceList is used to recreate the mounted device on inherited containers
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/host_device_list`.
            internal var host_device_list: [Components.Schemas.LinuxDevice]?
            /// HostAdd is a set of hosts which will be added to the container's
            /// etc/hosts file.
            /// Conflicts with UseImageHosts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/hostadd`.
            internal var hostadd: [Swift.String]?
            /// Hostname is the container's hostname. If not set, the hostname will
            /// not be modified (if UtsNS is not private) or will be set to the
            /// container ID (if UtsNS is private).
            /// Conflicts with UtsNS if UtsNS is not set to private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/hostname`.
            internal var hostname: Swift.String?
            /// HostUsers is a list of host usernames or UIDs to add to the container
            /// etc/passwd file
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/hostusers`.
            internal var hostusers: [Swift.String]?
            /// EnvHTTPProxy indicates that the http host proxy environment variables
            /// should be added to container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/httpproxy`.
            internal var httpproxy: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/idmappings`.
            internal var idmappings: Components.Schemas.IDMappingOptions?
            /// Image is the image the container will be based on. The image will be
            /// used as the container's root filesystem, and its environment vars,
            /// volumes, and other configuration will be applied to the container.
            /// Conflicts with Rootfs.
            /// At least one of Image or Rootfs must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image`.
            internal var image: Swift.String?
            /// ImageArch is the user-specified image architecture.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image_arch`.
            internal var image_arch: Swift.String?
            /// ImageOS is the user-specified OS of the image.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image_os`.
            internal var image_os: Swift.String?
            /// ImageVariant is the user-specified image variant.
            /// Used to select a different variant from a manifest list.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image_variant`.
            internal var image_variant: Swift.String?
            /// ImageVolumeMode indicates how image volumes will be created.
            /// Supported modes are "ignore" (do not create), "tmpfs" (create as
            /// tmpfs), and "anonymous" (create as anonymous volumes).
            /// The default if unset is anonymous.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image_volume_mode`.
            internal var image_volume_mode: Swift.String?
            /// Image volumes bind-mount a container-image mount into the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/image_volumes`.
            internal var image_volumes: [Components.Schemas.ImageVolume]?
            /// Init specifies that an init binary will be mounted into the
            /// container, and will be used as PID1.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/init`.
            internal var _init: Swift.Bool?
            /// InitContainerType describes if this container is an init container
            /// and if so, what type: always or once.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/init_container_type`.
            internal var init_container_type: Swift.String?
            /// InitPath specifies the path to the init binary that will be added if
            /// Init is specified above. If not specified, the default set in the
            /// Libpod config will be used. Ignored if Init above is not set.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/init_path`.
            internal var init_path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/intelRdt`.
            internal var intelRdt: Components.Schemas.LinuxIntelRdt?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/ipcns`.
            internal var ipcns: Components.Schemas.Namespace?
            /// LabelNested indicates whether or not the container is allowed to
            /// run fully nested containers including SELinux labelling.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/label_nested`.
            internal var label_nested: Swift.Bool?
            /// Labels are key-value pairs that are used to add metadata to
            /// containers.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels are key-value pairs that are used to add metadata to
            /// containers.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/labels`.
            internal var labels: Components.Schemas.SpecGenerator.labelsPayload?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/log_configuration`.
            internal var log_configuration: Components.Schemas.LogConfigLibpod?
            /// Passwd is a container run option that determines if we are validating users/groups before running the container
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/manage_password`.
            internal var manage_password: Swift.Bool?
            /// Mask is the path we want to mask in the container. This masks the paths
            /// given in addition to the default list.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/mask`.
            internal var mask: [Swift.String]?
            /// Mounts are mounts that will be added to the container.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/mounts`.
            internal var mounts: [Components.Schemas.Mount]?
            /// Name is the name the container will be given.
            /// If no name is provided, one will be randomly generated.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/netns`.
            internal var netns: Components.Schemas.Namespace?
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/network_options`.
            internal struct network_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `network_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// NetworkOptions are additional options for each network
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/network_options`.
            internal var network_options: Components.Schemas.SpecGenerator.network_optionsPayload?
            /// NoNewPrivileges is whether the container will set the no new
            /// privileges flag on create, which disables gaining additional
            /// privileges (e.g. via setuid) in the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/no_new_privileges`.
            internal var no_new_privileges: Swift.Bool?
            /// OCIRuntime is the name of the OCI runtime that will be used to create
            /// the container.
            /// If not specified, the default will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/oci_runtime`.
            internal var oci_runtime: Swift.String?
            /// OOMScoreAdj adjusts the score used by the OOM killer to determine
            /// processes to kill for the container's process.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/oom_score_adj`.
            internal var oom_score_adj: Swift.Int64?
            /// Overlay volumes are named volumes that will be added to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/overlay_volumes`.
            internal var overlay_volumes: [Components.Schemas.OverlayVolume]?
            /// PasswdEntry specifies an arbitrary string to append to the container's /etc/passwd file.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/passwd_entry`.
            internal var passwd_entry: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/personality`.
            internal var personality: Components.Schemas.LinuxPersonality?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/pidns`.
            internal var pidns: Components.Schemas.Namespace?
            /// Pod is the ID of the pod the container will join.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/pod`.
            internal var pod: Swift.String?
            /// PortBindings is a set of ports to map into the container.
            /// Only available if NetNS is set to bridge, slirp, or pasta.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/portmappings`.
            internal var portmappings: [Components.Schemas.PortMapping]?
            /// Privileged is whether the container is privileged.
            /// Privileged does the following:
            /// Adds all devices on the system to the container.
            /// Adds all capabilities to the container.
            /// Disables Seccomp, SELinux, and Apparmor confinement.
            /// (Though SELinux can be manually re-enabled).
            /// TODO: this conflicts with things.
            /// TODO: this does more.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/privileged`.
            internal var privileged: Swift.Bool?
            /// ProcOpts are the options used for the proc mount.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/procfs_opts`.
            internal var procfs_opts: [Swift.String]?
            /// PublishExposedPorts will publish ports specified in the image to
            /// random unused ports (guaranteed to be above 1024) on the host.
            /// This is based on ports set in Expose below, and any ports specified
            /// by the Image (if one is given).
            /// Only available if NetNS is set to Bridge or Slirp.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/publish_image_ports`.
            internal var publish_image_ports: Swift.Bool?
            /// Rlimits are POSIX rlimits to apply to the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/r_limits`.
            internal var r_limits: [Components.Schemas.POSIXRlimit]?
            /// RawImageName is the user-specified and unprocessed input referring
            /// to a local or a remote image.
            /// Optional, but strongly encouraged to be set if Image is set.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/raw_image_name`.
            internal var raw_image_name: Swift.String?
            /// ReadOnlyFilesystem indicates that everything will be mounted
            /// as read-only.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/read_only_filesystem`.
            internal var read_only_filesystem: Swift.Bool?
            /// ReadWriteTmpfs indicates that when running with a ReadOnlyFilesystem
            /// mount temporary file systems.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/read_write_tmpfs`.
            internal var read_write_tmpfs: Swift.Bool?
            /// Remove indicates if the container should be removed once it has been started
            /// and exits.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/remove`.
            internal var remove: Swift.Bool?
            /// RemoveImage indicates that the container should remove the image it
            /// was created from after it exits.
            /// Only allowed if Remove is set to true and Image, not Rootfs, is in
            /// use.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/removeImage`.
            internal var removeImage: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/resource_limits`.
            internal var resource_limits: Components.Schemas.LinuxResources?
            /// RestartPolicy is the container's restart policy - an action which
            /// will be taken when the container exits.
            /// If not given, the default policy, which does nothing, will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/restart_policy`.
            internal var restart_policy: Swift.String?
            /// RestartRetries is the number of attempts that will be made to restart
            /// the container.
            /// Only available when RestartPolicy is set to "on-failure".
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/restart_tries`.
            internal var restart_tries: Swift.Int?
            /// Rootfs is the path to a directory that will be used as the
            /// container's root filesystem. No modification will be made to the
            /// directory, it will be directly mounted into the container as root.
            /// Conflicts with Image.
            /// At least one of Image or Rootfs must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/rootfs`.
            internal var rootfs: Swift.String?
            /// RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/rootfs_mapping`.
            internal var rootfs_mapping: Swift.String?
            /// RootfsOverlay tells if rootfs is actually an overlay on top of base path.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/rootfs_overlay`.
            internal var rootfs_overlay: Swift.Bool?
            /// RootfsPropagation is the rootfs propagation mode for the container.
            /// If not set, the default of rslave will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/rootfs_propagation`.
            internal var rootfs_propagation: Swift.String?
            /// Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through
            /// "container" - let the OCI runtime deal with it, advertise conmon's MAINPID
            /// "conmon-only" - advertise conmon's MAINPID, send READY when started, don't pass to OCI
            /// "ignore" - unset NOTIFY_SOCKET
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/sdnotifyMode`.
            internal var sdnotifyMode: Swift.String?
            /// SeccompPolicy determines which seccomp profile gets applied
            /// the container. valid values: empty,default,image
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/seccomp_policy`.
            internal var seccomp_policy: Swift.String?
            /// SeccompProfilePath is the path to a JSON file containing the
            /// container's Seccomp profile.
            /// If not specified, no Seccomp profile will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/seccomp_profile_path`.
            internal var seccomp_profile_path: Swift.String?
            /// EnvSecrets are secrets that will be set as environment variables
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/secret_env`.
            internal struct secret_envPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `secret_envPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// EnvSecrets are secrets that will be set as environment variables
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/secret_env`.
            internal var secret_env: Components.Schemas.SpecGenerator.secret_envPayload?
            /// Secrets are the secrets that will be added to the container
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/secrets`.
            internal var secrets: [Components.Schemas.Secret]?
            /// SelinuxProcessLabel is the process label the container will use.
            /// If SELinux is enabled and this is not specified, a label will be
            /// automatically generated if not specified.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/selinux_opts`.
            internal var selinux_opts: [Swift.String]?
            /// ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            /// Conflicts with ShmSize if IpcNS is not private.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/shm_size`.
            internal var shm_size: Swift.Int64?
            /// ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            /// specifically /run, /run/lock, /var/log/journal and /tmp.
            /// Optional
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/shm_size_systemd`.
            internal var shm_size_systemd: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/startupHealthConfig`.
            internal var startupHealthConfig: Components.Schemas.StartupHealthCheck?
            /// Stdin is whether the container will keep its STDIN open.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/stdin`.
            internal var stdin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/stop_signal`.
            internal var stop_signal: Components.Schemas.Signal?
            /// StopTimeout is a timeout between the container's stop signal being
            /// sent and SIGKILL being sent.
            /// If not provided, the default will be used.
            /// If 0 is used, stop signal will not be sent, and SIGKILL will be sent
            /// instead.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/stop_timeout`.
            internal var stop_timeout: Swift.Int?
            /// StorageOpts is the container's storage options
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/storage_opts`.
            internal struct storage_optsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `storage_optsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// StorageOpts is the container's storage options
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/storage_opts`.
            internal var storage_opts: Components.Schemas.SpecGenerator.storage_optsPayload?
            /// Sysctl sets kernel parameters for the container
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/sysctl`.
            internal struct sysctlPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `sysctlPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Sysctl sets kernel parameters for the container
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/sysctl`.
            internal var sysctl: Components.Schemas.SpecGenerator.sysctlPayload?
            /// Systemd is whether the container will be started in systemd mode.
            /// Valid options are "true", "false", and "always".
            /// "true" enables this mode only if the binary run in the container is
            /// sbin/init or systemd. "always" unconditionally enables systemd mode.
            /// "false" unconditionally disables systemd mode.
            /// If enabled, mounts and stop signal will be modified.
            /// If set to "always" or set to "true" and conditionally triggered,
            /// conflicts with StopSignal.
            /// If not specified, "false" will be assumed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/systemd`.
            internal var systemd: Swift.String?
            /// Terminal is whether the container will create a PTY.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/terminal`.
            internal var terminal: Swift.Bool?
            /// IO read rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleReadBpsDevice`.
            internal struct throttleReadBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO read rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleReadBpsDevice`.
            internal var throttleReadBpsDevice: Components.Schemas.SpecGenerator.throttleReadBpsDevicePayload?
            /// IO read rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleReadIOPSDevice`.
            internal struct throttleReadIOPSDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleReadIOPSDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO read rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleReadIOPSDevice`.
            internal var throttleReadIOPSDevice: Components.Schemas.SpecGenerator.throttleReadIOPSDevicePayload?
            /// IO write rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleWriteBpsDevice`.
            internal struct throttleWriteBpsDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleWriteBpsDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO write rate limit per cgroup per device, bytes per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleWriteBpsDevice`.
            internal var throttleWriteBpsDevice: Components.Schemas.SpecGenerator.throttleWriteBpsDevicePayload?
            /// IO write rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleWriteIOPSDevice`.
            internal struct throttleWriteIOPSDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxThrottleDevice]
                /// Creates a new `throttleWriteIOPSDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxThrottleDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IO write rate limit per cgroup per device, IO per second
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/throttleWriteIOPSDevice`.
            internal var throttleWriteIOPSDevice: Components.Schemas.SpecGenerator.throttleWriteIOPSDevicePayload?
            /// Timeout is a maximum time in seconds the container will run before
            /// main process is sent SIGKILL.
            /// If 0 is used, signal will not be sent. Container can run indefinitely
            /// if they do not stop after the default termination signal.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/timeout`.
            internal var timeout: Swift.Int?
            /// Timezone is the timezone inside the container.
            /// Local means it has the same timezone as the host machine
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/timezone`.
            internal var timezone: Swift.String?
            /// Umask is the umask the init process of the container will be run with.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/umask`.
            internal var umask: Swift.String?
            /// CgroupConf are key-value options passed into the container runtime
            /// that are used to configure cgroup v2.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/unified`.
            internal struct unifiedPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `unifiedPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// CgroupConf are key-value options passed into the container runtime
            /// that are used to configure cgroup v2.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/unified`.
            internal var unified: Components.Schemas.SpecGenerator.unifiedPayload?
            /// Unmask a path in the container. Some paths are masked by default,
            /// preventing them from being accessed within the container; this undoes
            /// that masking. If ALL is passed, all paths will be unmasked.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/unmask`.
            internal var unmask: [Swift.String]?
            /// UnsetEnv unsets the specified default environment variables from the image or from built-in or containers.conf
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/unsetenv`.
            internal var unsetenv: [Swift.String]?
            /// UnsetEnvAll unsetall default environment variables from the image or from built-in or containers.conf
            /// UnsetEnvAll unsets all default environment variables from the image or from built-in
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/unsetenvall`.
            internal var unsetenvall: Swift.Bool?
            /// UseImageHostname indicates that /etc/hostname should not be managed by
            /// Podman, and instead sourced from the image.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/use_image_hostname`.
            internal var use_image_hostname: Swift.Bool?
            /// UseImageHosts indicates that /etc/hosts should not be managed by
            /// Podman, and instead sourced from the image.
            /// Conflicts with HostAdd.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/use_image_hosts`.
            internal var use_image_hosts: Swift.Bool?
            /// UseImageResolvConf indicates that resolv.conf should not be managed
            /// by Podman, but instead sourced from the image.
            /// Conflicts with DNSServer, DNSSearch, DNSOption.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/use_image_resolve_conf`.
            internal var use_image_resolve_conf: Swift.Bool?
            /// User is the user the container will be run as.
            /// Can be given as a UID or a username; if a username, it will be
            /// resolved within the container, using the container's /etc/passwd.
            /// If unset, the container will be run as root.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/user`.
            internal var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/userns`.
            internal var userns: Components.Schemas.Namespace?
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/utsns`.
            internal var utsns: Components.Schemas.Namespace?
            /// Volatile specifies whether the container storage can be optimized
            /// at the cost of not syncing all the dirty files in memory.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/volatile`.
            internal var volatile: Swift.Bool?
            /// Volumes are named volumes that will be added to the container.
            /// These will supersede Image Volumes and VolumesFrom volumes where
            /// there are conflicts.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/volumes`.
            internal var volumes: [Components.Schemas.NamedVolume]?
            /// VolumesFrom is a set of containers whose volumes will be added to
            /// this container. The name or ID of the container must be provided, and
            /// may optionally be followed by a : and then one or more
            /// comma-separated options. Valid options are 'ro', 'rw', and 'z'.
            /// Options will be used for all volumes sourced from the container.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/volumes_from`.
            internal var volumes_from: [Swift.String]?
            /// Weight per cgroup per device, can override BlkioWeight
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/weightDevice`.
            internal struct weightDevicePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxWeightDevice]
                /// Creates a new `weightDevicePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxWeightDevice] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Weight per cgroup per device, can override BlkioWeight
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/weightDevice`.
            internal var weightDevice: Components.Schemas.SpecGenerator.weightDevicePayload?
            /// WorkDir is the container's working directory.
            /// If unset, the default, /, will be used.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/SpecGenerator/work_dir`.
            internal var work_dir: Swift.String?
            /// Creates a new `SpecGenerator`.
            ///
            /// - Parameters:
            ///   - Networks: Map of networks names or ids that the container should join.
            ///   - annotations: Annotations are key-value options passed into the container runtime
            ///   - apparmor_profile: ApparmorProfile is the name of the Apparmor profile the container
            ///   - base_hosts_file: BaseHostsFile is the base file to create the `/etc/hosts` file inside the container.
            ///   - cap_add: CapAdd are capabilities which will be added to the container.
            ///   - cap_drop: CapDrop are capabilities which will be removed from the container.
            ///   - cgroup_parent: CgroupParent is the container's Cgroup parent.
            ///   - cgroupns:
            ///   - cgroups_mode: CgroupsMode sets a policy for how cgroups will be created for the
            ///   - chroot_directories: ChrootDirs is an additional set of directories that need to be
            ///   - cni_networks: CNINetworks is a list of CNI networks to join the container to.
            ///   - command: Command is the container's command.
            ///   - conmon_pid_file: ConmonPidFile is a path at which a PID file for Conmon will be
            ///   - containerCreateCommand: ContainerCreateCommand is the command that was used to create this
            ///   - create_working_dir: Create the working directory if it doesn't exist.
            ///   - dependencyContainers: DependencyContainers is an array of containers this container
            ///   - device_cgroup_rule: DeviceCgroupRule are device cgroup rules that allow containers
            ///   - devices: Devices are devices that will be added to the container.
            ///   - devices_from: DevicesFrom specifies that this container will mount the device(s) from other container(s).
            ///   - dns_option: DNSOptions is a set of DNS options that will be used in the
            ///   - dns_search: DNSSearch is a set of DNS search domains that will be used in the
            ///   - dns_server: DNSServers is a set of DNS servers that will be used in the
            ///   - entrypoint: Entrypoint is the container's entrypoint.
            ///   - env: Env is a set of environment variables that will be set in the
            ///   - env_host: EnvHost indicates that the host environment should be added to container
            ///   - envmerge: EnvMerge takes the specified environment variables from image and preprocess them before injecting them into the
            ///   - expose: Expose is a number of ports that will be forwarded to the container
            ///   - group_entry: GroupEntry specifies an arbitrary string to append to the container's /etc/group file.
            ///   - groups: Groups are a list of supplemental groups the container's user will
            ///   - health_check_on_failure_action:
            ///   - healthLogDestination: HealthLogDestination defines the destination where the log is stored.
            ///   - healthMaxLogCount: HealthMaxLogCount is maximum number of attempts in the HealthCheck log file.
            ///   - healthMaxLogSize: HealthMaxLogSize is the maximum length in characters of stored HealthCheck log
            ///   - healthconfig:
            ///   - host_device_list: HostDeviceList is used to recreate the mounted device on inherited containers
            ///   - hostadd: HostAdd is a set of hosts which will be added to the container's
            ///   - hostname: Hostname is the container's hostname. If not set, the hostname will
            ///   - hostusers: HostUsers is a list of host usernames or UIDs to add to the container
            ///   - httpproxy: EnvHTTPProxy indicates that the http host proxy environment variables
            ///   - idmappings:
            ///   - image: Image is the image the container will be based on. The image will be
            ///   - image_arch: ImageArch is the user-specified image architecture.
            ///   - image_os: ImageOS is the user-specified OS of the image.
            ///   - image_variant: ImageVariant is the user-specified image variant.
            ///   - image_volume_mode: ImageVolumeMode indicates how image volumes will be created.
            ///   - image_volumes: Image volumes bind-mount a container-image mount into the container.
            ///   - _init: Init specifies that an init binary will be mounted into the
            ///   - init_container_type: InitContainerType describes if this container is an init container
            ///   - init_path: InitPath specifies the path to the init binary that will be added if
            ///   - intelRdt:
            ///   - ipcns:
            ///   - label_nested: LabelNested indicates whether or not the container is allowed to
            ///   - labels: Labels are key-value pairs that are used to add metadata to
            ///   - log_configuration:
            ///   - manage_password: Passwd is a container run option that determines if we are validating users/groups before running the container
            ///   - mask: Mask is the path we want to mask in the container. This masks the paths
            ///   - mounts: Mounts are mounts that will be added to the container.
            ///   - name: Name is the name the container will be given.
            ///   - netns:
            ///   - network_options: NetworkOptions are additional options for each network
            ///   - no_new_privileges: NoNewPrivileges is whether the container will set the no new
            ///   - oci_runtime: OCIRuntime is the name of the OCI runtime that will be used to create
            ///   - oom_score_adj: OOMScoreAdj adjusts the score used by the OOM killer to determine
            ///   - overlay_volumes: Overlay volumes are named volumes that will be added to the container.
            ///   - passwd_entry: PasswdEntry specifies an arbitrary string to append to the container's /etc/passwd file.
            ///   - personality:
            ///   - pidns:
            ///   - pod: Pod is the ID of the pod the container will join.
            ///   - portmappings: PortBindings is a set of ports to map into the container.
            ///   - privileged: Privileged is whether the container is privileged.
            ///   - procfs_opts: ProcOpts are the options used for the proc mount.
            ///   - publish_image_ports: PublishExposedPorts will publish ports specified in the image to
            ///   - r_limits: Rlimits are POSIX rlimits to apply to the container.
            ///   - raw_image_name: RawImageName is the user-specified and unprocessed input referring
            ///   - read_only_filesystem: ReadOnlyFilesystem indicates that everything will be mounted
            ///   - read_write_tmpfs: ReadWriteTmpfs indicates that when running with a ReadOnlyFilesystem
            ///   - remove: Remove indicates if the container should be removed once it has been started
            ///   - removeImage: RemoveImage indicates that the container should remove the image it
            ///   - resource_limits:
            ///   - restart_policy: RestartPolicy is the container's restart policy - an action which
            ///   - restart_tries: RestartRetries is the number of attempts that will be made to restart
            ///   - rootfs: Rootfs is the path to a directory that will be used as the
            ///   - rootfs_mapping: RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs.
            ///   - rootfs_overlay: RootfsOverlay tells if rootfs is actually an overlay on top of base path.
            ///   - rootfs_propagation: RootfsPropagation is the rootfs propagation mode for the container.
            ///   - sdnotifyMode: Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through
            ///   - seccomp_policy: SeccompPolicy determines which seccomp profile gets applied
            ///   - seccomp_profile_path: SeccompProfilePath is the path to a JSON file containing the
            ///   - secret_env: EnvSecrets are secrets that will be set as environment variables
            ///   - secrets: Secrets are the secrets that will be added to the container
            ///   - selinux_opts: SelinuxProcessLabel is the process label the container will use.
            ///   - shm_size: ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
            ///   - shm_size_systemd: ShmSizeSystemd is the size of systemd-specific tmpfs mounts
            ///   - startupHealthConfig:
            ///   - stdin: Stdin is whether the container will keep its STDIN open.
            ///   - stop_signal:
            ///   - stop_timeout: StopTimeout is a timeout between the container's stop signal being
            ///   - storage_opts: StorageOpts is the container's storage options
            ///   - sysctl: Sysctl sets kernel parameters for the container
            ///   - systemd: Systemd is whether the container will be started in systemd mode.
            ///   - terminal: Terminal is whether the container will create a PTY.
            ///   - throttleReadBpsDevice: IO read rate limit per cgroup per device, bytes per second
            ///   - throttleReadIOPSDevice: IO read rate limit per cgroup per device, IO per second
            ///   - throttleWriteBpsDevice: IO write rate limit per cgroup per device, bytes per second
            ///   - throttleWriteIOPSDevice: IO write rate limit per cgroup per device, IO per second
            ///   - timeout: Timeout is a maximum time in seconds the container will run before
            ///   - timezone: Timezone is the timezone inside the container.
            ///   - umask: Umask is the umask the init process of the container will be run with.
            ///   - unified: CgroupConf are key-value options passed into the container runtime
            ///   - unmask: Unmask a path in the container. Some paths are masked by default,
            ///   - unsetenv: UnsetEnv unsets the specified default environment variables from the image or from built-in or containers.conf
            ///   - unsetenvall: UnsetEnvAll unsetall default environment variables from the image or from built-in or containers.conf
            ///   - use_image_hostname: UseImageHostname indicates that /etc/hostname should not be managed by
            ///   - use_image_hosts: UseImageHosts indicates that /etc/hosts should not be managed by
            ///   - use_image_resolve_conf: UseImageResolvConf indicates that resolv.conf should not be managed
            ///   - user: User is the user the container will be run as.
            ///   - userns:
            ///   - utsns:
            ///   - volatile: Volatile specifies whether the container storage can be optimized
            ///   - volumes: Volumes are named volumes that will be added to the container.
            ///   - volumes_from: VolumesFrom is a set of containers whose volumes will be added to
            ///   - weightDevice: Weight per cgroup per device, can override BlkioWeight
            ///   - work_dir: WorkDir is the container's working directory.
            internal init(
                Networks: Components.Schemas.SpecGenerator.NetworksPayload? = nil,
                annotations: Components.Schemas.SpecGenerator.annotationsPayload? = nil,
                apparmor_profile: Swift.String? = nil,
                base_hosts_file: Swift.String? = nil,
                cap_add: [Swift.String]? = nil,
                cap_drop: [Swift.String]? = nil,
                cgroup_parent: Swift.String? = nil,
                cgroupns: Components.Schemas.Namespace? = nil,
                cgroups_mode: Swift.String? = nil,
                chroot_directories: [Swift.String]? = nil,
                cni_networks: [Swift.String]? = nil,
                command: [Swift.String]? = nil,
                conmon_pid_file: Swift.String? = nil,
                containerCreateCommand: [Swift.String]? = nil,
                create_working_dir: Swift.Bool? = nil,
                dependencyContainers: [Swift.String]? = nil,
                device_cgroup_rule: [Components.Schemas.LinuxDeviceCgroup]? = nil,
                devices: [Components.Schemas.LinuxDevice]? = nil,
                devices_from: [Swift.String]? = nil,
                dns_option: [Swift.String]? = nil,
                dns_search: [Swift.String]? = nil,
                dns_server: [Swift.String]? = nil,
                entrypoint: [Swift.String]? = nil,
                env: Components.Schemas.SpecGenerator.envPayload? = nil,
                env_host: Swift.Bool? = nil,
                envmerge: [Swift.String]? = nil,
                expose: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                group_entry: Swift.String? = nil,
                groups: [Swift.String]? = nil,
                health_check_on_failure_action: Components.Schemas.HealthCheckOnFailureAction? = nil,
                healthLogDestination: Swift.String? = nil,
                healthMaxLogCount: Swift.Int? = nil,
                healthMaxLogSize: Swift.Int? = nil,
                healthconfig: Components.Schemas.Schema2HealthConfig? = nil,
                host_device_list: [Components.Schemas.LinuxDevice]? = nil,
                hostadd: [Swift.String]? = nil,
                hostname: Swift.String? = nil,
                hostusers: [Swift.String]? = nil,
                httpproxy: Swift.Bool? = nil,
                idmappings: Components.Schemas.IDMappingOptions? = nil,
                image: Swift.String? = nil,
                image_arch: Swift.String? = nil,
                image_os: Swift.String? = nil,
                image_variant: Swift.String? = nil,
                image_volume_mode: Swift.String? = nil,
                image_volumes: [Components.Schemas.ImageVolume]? = nil,
                _init: Swift.Bool? = nil,
                init_container_type: Swift.String? = nil,
                init_path: Swift.String? = nil,
                intelRdt: Components.Schemas.LinuxIntelRdt? = nil,
                ipcns: Components.Schemas.Namespace? = nil,
                label_nested: Swift.Bool? = nil,
                labels: Components.Schemas.SpecGenerator.labelsPayload? = nil,
                log_configuration: Components.Schemas.LogConfigLibpod? = nil,
                manage_password: Swift.Bool? = nil,
                mask: [Swift.String]? = nil,
                mounts: [Components.Schemas.Mount]? = nil,
                name: Swift.String? = nil,
                netns: Components.Schemas.Namespace? = nil,
                network_options: Components.Schemas.SpecGenerator.network_optionsPayload? = nil,
                no_new_privileges: Swift.Bool? = nil,
                oci_runtime: Swift.String? = nil,
                oom_score_adj: Swift.Int64? = nil,
                overlay_volumes: [Components.Schemas.OverlayVolume]? = nil,
                passwd_entry: Swift.String? = nil,
                personality: Components.Schemas.LinuxPersonality? = nil,
                pidns: Components.Schemas.Namespace? = nil,
                pod: Swift.String? = nil,
                portmappings: [Components.Schemas.PortMapping]? = nil,
                privileged: Swift.Bool? = nil,
                procfs_opts: [Swift.String]? = nil,
                publish_image_ports: Swift.Bool? = nil,
                r_limits: [Components.Schemas.POSIXRlimit]? = nil,
                raw_image_name: Swift.String? = nil,
                read_only_filesystem: Swift.Bool? = nil,
                read_write_tmpfs: Swift.Bool? = nil,
                remove: Swift.Bool? = nil,
                removeImage: Swift.Bool? = nil,
                resource_limits: Components.Schemas.LinuxResources? = nil,
                restart_policy: Swift.String? = nil,
                restart_tries: Swift.Int? = nil,
                rootfs: Swift.String? = nil,
                rootfs_mapping: Swift.String? = nil,
                rootfs_overlay: Swift.Bool? = nil,
                rootfs_propagation: Swift.String? = nil,
                sdnotifyMode: Swift.String? = nil,
                seccomp_policy: Swift.String? = nil,
                seccomp_profile_path: Swift.String? = nil,
                secret_env: Components.Schemas.SpecGenerator.secret_envPayload? = nil,
                secrets: [Components.Schemas.Secret]? = nil,
                selinux_opts: [Swift.String]? = nil,
                shm_size: Swift.Int64? = nil,
                shm_size_systemd: Swift.Int64? = nil,
                startupHealthConfig: Components.Schemas.StartupHealthCheck? = nil,
                stdin: Swift.Bool? = nil,
                stop_signal: Components.Schemas.Signal? = nil,
                stop_timeout: Swift.Int? = nil,
                storage_opts: Components.Schemas.SpecGenerator.storage_optsPayload? = nil,
                sysctl: Components.Schemas.SpecGenerator.sysctlPayload? = nil,
                systemd: Swift.String? = nil,
                terminal: Swift.Bool? = nil,
                throttleReadBpsDevice: Components.Schemas.SpecGenerator.throttleReadBpsDevicePayload? = nil,
                throttleReadIOPSDevice: Components.Schemas.SpecGenerator.throttleReadIOPSDevicePayload? = nil,
                throttleWriteBpsDevice: Components.Schemas.SpecGenerator.throttleWriteBpsDevicePayload? = nil,
                throttleWriteIOPSDevice: Components.Schemas.SpecGenerator.throttleWriteIOPSDevicePayload? = nil,
                timeout: Swift.Int? = nil,
                timezone: Swift.String? = nil,
                umask: Swift.String? = nil,
                unified: Components.Schemas.SpecGenerator.unifiedPayload? = nil,
                unmask: [Swift.String]? = nil,
                unsetenv: [Swift.String]? = nil,
                unsetenvall: Swift.Bool? = nil,
                use_image_hostname: Swift.Bool? = nil,
                use_image_hosts: Swift.Bool? = nil,
                use_image_resolve_conf: Swift.Bool? = nil,
                user: Swift.String? = nil,
                userns: Components.Schemas.Namespace? = nil,
                utsns: Components.Schemas.Namespace? = nil,
                volatile: Swift.Bool? = nil,
                volumes: [Components.Schemas.NamedVolume]? = nil,
                volumes_from: [Swift.String]? = nil,
                weightDevice: Components.Schemas.SpecGenerator.weightDevicePayload? = nil,
                work_dir: Swift.String? = nil
            ) {
                self.Networks = Networks
                self.annotations = annotations
                self.apparmor_profile = apparmor_profile
                self.base_hosts_file = base_hosts_file
                self.cap_add = cap_add
                self.cap_drop = cap_drop
                self.cgroup_parent = cgroup_parent
                self.cgroupns = cgroupns
                self.cgroups_mode = cgroups_mode
                self.chroot_directories = chroot_directories
                self.cni_networks = cni_networks
                self.command = command
                self.conmon_pid_file = conmon_pid_file
                self.containerCreateCommand = containerCreateCommand
                self.create_working_dir = create_working_dir
                self.dependencyContainers = dependencyContainers
                self.device_cgroup_rule = device_cgroup_rule
                self.devices = devices
                self.devices_from = devices_from
                self.dns_option = dns_option
                self.dns_search = dns_search
                self.dns_server = dns_server
                self.entrypoint = entrypoint
                self.env = env
                self.env_host = env_host
                self.envmerge = envmerge
                self.expose = expose
                self.group_entry = group_entry
                self.groups = groups
                self.health_check_on_failure_action = health_check_on_failure_action
                self.healthLogDestination = healthLogDestination
                self.healthMaxLogCount = healthMaxLogCount
                self.healthMaxLogSize = healthMaxLogSize
                self.healthconfig = healthconfig
                self.host_device_list = host_device_list
                self.hostadd = hostadd
                self.hostname = hostname
                self.hostusers = hostusers
                self.httpproxy = httpproxy
                self.idmappings = idmappings
                self.image = image
                self.image_arch = image_arch
                self.image_os = image_os
                self.image_variant = image_variant
                self.image_volume_mode = image_volume_mode
                self.image_volumes = image_volumes
                self._init = _init
                self.init_container_type = init_container_type
                self.init_path = init_path
                self.intelRdt = intelRdt
                self.ipcns = ipcns
                self.label_nested = label_nested
                self.labels = labels
                self.log_configuration = log_configuration
                self.manage_password = manage_password
                self.mask = mask
                self.mounts = mounts
                self.name = name
                self.netns = netns
                self.network_options = network_options
                self.no_new_privileges = no_new_privileges
                self.oci_runtime = oci_runtime
                self.oom_score_adj = oom_score_adj
                self.overlay_volumes = overlay_volumes
                self.passwd_entry = passwd_entry
                self.personality = personality
                self.pidns = pidns
                self.pod = pod
                self.portmappings = portmappings
                self.privileged = privileged
                self.procfs_opts = procfs_opts
                self.publish_image_ports = publish_image_ports
                self.r_limits = r_limits
                self.raw_image_name = raw_image_name
                self.read_only_filesystem = read_only_filesystem
                self.read_write_tmpfs = read_write_tmpfs
                self.remove = remove
                self.removeImage = removeImage
                self.resource_limits = resource_limits
                self.restart_policy = restart_policy
                self.restart_tries = restart_tries
                self.rootfs = rootfs
                self.rootfs_mapping = rootfs_mapping
                self.rootfs_overlay = rootfs_overlay
                self.rootfs_propagation = rootfs_propagation
                self.sdnotifyMode = sdnotifyMode
                self.seccomp_policy = seccomp_policy
                self.seccomp_profile_path = seccomp_profile_path
                self.secret_env = secret_env
                self.secrets = secrets
                self.selinux_opts = selinux_opts
                self.shm_size = shm_size
                self.shm_size_systemd = shm_size_systemd
                self.startupHealthConfig = startupHealthConfig
                self.stdin = stdin
                self.stop_signal = stop_signal
                self.stop_timeout = stop_timeout
                self.storage_opts = storage_opts
                self.sysctl = sysctl
                self.systemd = systemd
                self.terminal = terminal
                self.throttleReadBpsDevice = throttleReadBpsDevice
                self.throttleReadIOPSDevice = throttleReadIOPSDevice
                self.throttleWriteBpsDevice = throttleWriteBpsDevice
                self.throttleWriteIOPSDevice = throttleWriteIOPSDevice
                self.timeout = timeout
                self.timezone = timezone
                self.umask = umask
                self.unified = unified
                self.unmask = unmask
                self.unsetenv = unsetenv
                self.unsetenvall = unsetenvall
                self.use_image_hostname = use_image_hostname
                self.use_image_hosts = use_image_hosts
                self.use_image_resolve_conf = use_image_resolve_conf
                self.user = user
                self.userns = userns
                self.utsns = utsns
                self.volatile = volatile
                self.volumes = volumes
                self.volumes_from = volumes_from
                self.weightDevice = weightDevice
                self.work_dir = work_dir
            }
            internal enum CodingKeys: String, CodingKey {
                case Networks
                case annotations
                case apparmor_profile
                case base_hosts_file
                case cap_add
                case cap_drop
                case cgroup_parent
                case cgroupns
                case cgroups_mode
                case chroot_directories
                case cni_networks
                case command
                case conmon_pid_file
                case containerCreateCommand
                case create_working_dir
                case dependencyContainers
                case device_cgroup_rule
                case devices
                case devices_from
                case dns_option
                case dns_search
                case dns_server
                case entrypoint
                case env
                case env_host
                case envmerge
                case expose
                case group_entry
                case groups
                case health_check_on_failure_action
                case healthLogDestination
                case healthMaxLogCount
                case healthMaxLogSize
                case healthconfig
                case host_device_list
                case hostadd
                case hostname
                case hostusers
                case httpproxy
                case idmappings
                case image
                case image_arch
                case image_os
                case image_variant
                case image_volume_mode
                case image_volumes
                case _init = "init"
                case init_container_type
                case init_path
                case intelRdt
                case ipcns
                case label_nested
                case labels
                case log_configuration
                case manage_password
                case mask
                case mounts
                case name
                case netns
                case network_options
                case no_new_privileges
                case oci_runtime
                case oom_score_adj
                case overlay_volumes
                case passwd_entry
                case personality
                case pidns
                case pod
                case portmappings
                case privileged
                case procfs_opts
                case publish_image_ports
                case r_limits
                case raw_image_name
                case read_only_filesystem
                case read_write_tmpfs
                case remove
                case removeImage
                case resource_limits
                case restart_policy
                case restart_tries
                case rootfs
                case rootfs_mapping
                case rootfs_overlay
                case rootfs_propagation
                case sdnotifyMode
                case seccomp_policy
                case seccomp_profile_path
                case secret_env
                case secrets
                case selinux_opts
                case shm_size
                case shm_size_systemd
                case startupHealthConfig
                case stdin
                case stop_signal
                case stop_timeout
                case storage_opts
                case sysctl
                case systemd
                case terminal
                case throttleReadBpsDevice
                case throttleReadIOPSDevice
                case throttleWriteBpsDevice
                case throttleWriteIOPSDevice
                case timeout
                case timezone
                case umask
                case unified
                case unmask
                case unsetenv
                case unsetenvall
                case use_image_hostname
                case use_image_hosts
                case use_image_resolve_conf
                case user
                case userns
                case utsns
                case volatile
                case volumes
                case volumes_from
                case weightDevice
                case work_dir
            }
        }
        /// - Remark: Generated from `#/components/schemas/StartupHealthCheck`.
        internal struct StartupHealthCheck: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/Interval`.
            internal var Interval: Components.Schemas.Duration?
            /// Retries is the number of consecutive failures needed to consider a container as unhealthy.
            /// Zero means inherit.
            ///
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/Retries`.
            internal var Retries: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/StartInterval`.
            internal var StartInterval: Components.Schemas.Duration?
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/StartPeriod`.
            internal var StartPeriod: Components.Schemas.Duration?
            /// Successes are the number of successes required to mark the startup HC
            /// as passed.
            /// If set to 0, a single success will mark the HC as passed.
            ///
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/Successes`.
            internal var Successes: Swift.Int64?
            /// Test is the test to perform to check that the container is healthy.
            /// An empty slice means to inherit the default.
            /// The options are:
            /// {} : inherit healthcheck
            /// {"NONE"} : disable healthcheck
            /// {"CMD", args...} : exec arguments directly
            /// {"CMD-SHELL", command} : run command with system's default shell
            ///
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/Test`.
            internal var Test: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/StartupHealthCheck/Timeout`.
            internal var Timeout: Components.Schemas.Duration?
            /// Creates a new `StartupHealthCheck`.
            ///
            /// - Parameters:
            ///   - Interval:
            ///   - Retries: Retries is the number of consecutive failures needed to consider a container as unhealthy.
            ///   - StartInterval:
            ///   - StartPeriod:
            ///   - Successes: Successes are the number of successes required to mark the startup HC
            ///   - Test: Test is the test to perform to check that the container is healthy.
            ///   - Timeout:
            internal init(
                Interval: Components.Schemas.Duration? = nil,
                Retries: Swift.Int64? = nil,
                StartInterval: Components.Schemas.Duration? = nil,
                StartPeriod: Components.Schemas.Duration? = nil,
                Successes: Swift.Int64? = nil,
                Test: [Swift.String]? = nil,
                Timeout: Components.Schemas.Duration? = nil
            ) {
                self.Interval = Interval
                self.Retries = Retries
                self.StartInterval = StartInterval
                self.StartPeriod = StartPeriod
                self.Successes = Successes
                self.Test = Test
                self.Timeout = Timeout
            }
            internal enum CodingKeys: String, CodingKey {
                case Interval
                case Retries
                case StartInterval
                case StartPeriod
                case Successes
                case Test
                case Timeout
            }
        }
        /// StoreInfo describes the container storage and its
        /// attributes
        ///
        /// - Remark: Generated from `#/components/schemas/StoreInfo`.
        internal struct StoreInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StoreInfo/configFile`.
            internal var configFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/containerStore`.
            internal var containerStore: Components.Schemas.ContainerStore?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphDriverName`.
            internal var graphDriverName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphOptions`.
            internal struct graphOptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `graphOptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphOptions`.
            internal var graphOptions: Components.Schemas.StoreInfo.graphOptionsPayload?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphRoot`.
            internal var graphRoot: Swift.String?
            /// GraphRootAllocated is how much space the graphroot has in bytes
            ///
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphRootAllocated`.
            internal var graphRootAllocated: Swift.Int?
            /// GraphRootUsed is how much of graphroot is used in bytes
            ///
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphRootUsed`.
            internal var graphRootUsed: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphStatus`.
            internal struct graphStatusPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `graphStatusPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/StoreInfo/graphStatus`.
            internal var graphStatus: Components.Schemas.StoreInfo.graphStatusPayload?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/imageCopyTmpDir`.
            internal var imageCopyTmpDir: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/imageStore`.
            internal var imageStore: Components.Schemas.ImageStore?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/runRoot`.
            internal var runRoot: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/transientStore`.
            internal var transientStore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/StoreInfo/volumePath`.
            internal var volumePath: Swift.String?
            /// Creates a new `StoreInfo`.
            ///
            /// - Parameters:
            ///   - configFile:
            ///   - containerStore:
            ///   - graphDriverName:
            ///   - graphOptions:
            ///   - graphRoot:
            ///   - graphRootAllocated: GraphRootAllocated is how much space the graphroot has in bytes
            ///   - graphRootUsed: GraphRootUsed is how much of graphroot is used in bytes
            ///   - graphStatus:
            ///   - imageCopyTmpDir:
            ///   - imageStore:
            ///   - runRoot:
            ///   - transientStore:
            ///   - volumePath:
            internal init(
                configFile: Swift.String? = nil,
                containerStore: Components.Schemas.ContainerStore? = nil,
                graphDriverName: Swift.String? = nil,
                graphOptions: Components.Schemas.StoreInfo.graphOptionsPayload? = nil,
                graphRoot: Swift.String? = nil,
                graphRootAllocated: Swift.Int? = nil,
                graphRootUsed: Swift.Int? = nil,
                graphStatus: Components.Schemas.StoreInfo.graphStatusPayload? = nil,
                imageCopyTmpDir: Swift.String? = nil,
                imageStore: Components.Schemas.ImageStore? = nil,
                runRoot: Swift.String? = nil,
                transientStore: Swift.Bool? = nil,
                volumePath: Swift.String? = nil
            ) {
                self.configFile = configFile
                self.containerStore = containerStore
                self.graphDriverName = graphDriverName
                self.graphOptions = graphOptions
                self.graphRoot = graphRoot
                self.graphRootAllocated = graphRootAllocated
                self.graphRootUsed = graphRootUsed
                self.graphStatus = graphStatus
                self.imageCopyTmpDir = imageCopyTmpDir
                self.imageStore = imageStore
                self.runRoot = runRoot
                self.transientStore = transientStore
                self.volumePath = volumePath
            }
            internal enum CodingKeys: String, CodingKey {
                case configFile
                case containerStore
                case graphDriverName
                case graphOptions
                case graphRoot
                case graphRootAllocated
                case graphRootUsed
                case graphStatus
                case imageCopyTmpDir
                case imageStore
                case runRoot
                case transientStore
                case volumePath
            }
        }
        /// We need to override the json decoder to accept both options.
        ///
        /// - Remark: Generated from `#/components/schemas/StrSlice`.
        internal typealias StrSlice = [Swift.String]
        /// - Remark: Generated from `#/components/schemas/Subnet`.
        internal struct Subnet: Codable, Hashable, Sendable {
            /// Gateway IP for this Network.
            ///
            /// - Remark: Generated from `#/components/schemas/Subnet/gateway`.
            internal var gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Subnet/lease_range`.
            internal var lease_range: Components.Schemas.LeaseRange?
            /// Subnet for this Network in CIDR form.
            ///
            /// - Remark: Generated from `#/components/schemas/Subnet/subnet`.
            internal var subnet: Swift.String?
            /// Creates a new `Subnet`.
            ///
            /// - Parameters:
            ///   - gateway: Gateway IP for this Network.
            ///   - lease_range:
            ///   - subnet: Subnet for this Network in CIDR form.
            internal init(
                gateway: Swift.String? = nil,
                lease_range: Components.Schemas.LeaseRange? = nil,
                subnet: Swift.String? = nil
            ) {
                self.gateway = gateway
                self.lease_range = lease_range
                self.subnet = subnet
            }
            internal enum CodingKeys: String, CodingKey {
                case gateway
                case lease_range
                case subnet
            }
        }
        /// - Remark: Generated from `#/components/schemas/Summary`.
        internal struct Summary: Codable, Hashable, Sendable {
            /// Number of containers using this image. Includes both stopped and running
            /// containers.
            ///
            /// This size is not calculated by default, and depends on which API endpoint
            /// is used. `-1` indicates that the value has not been set / calculated.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Containers`.
            internal var Containers: Swift.Int64
            /// Date and time at which the image was created as a Unix timestamp
            /// (number of seconds since EPOCH).
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Created`.
            internal var Created: Swift.Int64
            /// ID is the content-addressable ID of an image.
            ///
            /// This identifier is a content-addressable digest calculated from the
            /// image's configuration (which includes the digests of layers used by
            /// the image).
            ///
            /// Note that this digest differs from the `RepoDigests` below, which
            /// holds digests of image manifests that reference the image.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Id`.
            internal var Id: Swift.String
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Labels`.
            internal var Labels: Components.Schemas.Summary.LabelsPayload
            /// Manifests is a list of image manifests available in this image.  It
            /// provides a more detailed view of the platform-specific image manifests or
            /// other image-attached data like build attestations.
            ///
            /// WARNING: This is experimental and may change at any time without any backward
            /// compatibility.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Manifests`.
            internal var Manifests: [Components.Schemas.ManifestSummary]?
            /// ID of the parent image.
            ///
            /// Depending on how the image was created, this field may be empty and
            /// is only set for images that were built/created locally. This field
            /// is empty if the image was pulled from an image registry.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/ParentId`.
            internal var ParentId: Swift.String
            /// List of content-addressable digests of locally available image manifests
            /// that the image is referenced from. Multiple manifests can refer to the
            /// same image.
            ///
            /// These digests are usually only available if the image was either pulled
            /// from a registry, or if the image was pushed to a registry, which is when
            /// the manifest is generated and its digest calculated.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/RepoDigests`.
            internal var RepoDigests: [Swift.String]
            /// List of image names/tags in the local image cache that reference this
            /// image.
            ///
            /// Multiple image tags can refer to the same image, and this list may be
            /// empty if no tags reference the image, in which case the image is
            /// "untagged", in which case it can still be referenced by its ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/RepoTags`.
            internal var RepoTags: [Swift.String]
            /// Total size of image layers that are shared between this image and other
            /// images.
            ///
            /// This size is not calculated by default. `-1` indicates that the value
            /// has not been set / calculated.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/SharedSize`.
            internal var SharedSize: Swift.Int64
            /// Total size of the image including all layers it is composed of.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/Size`.
            internal var Size: Swift.Int64
            /// Total size of the image including all layers it is composed of.
            ///
            /// Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
            ///
            /// - Remark: Generated from `#/components/schemas/Summary/VirtualSize`.
            internal var VirtualSize: Swift.Int64?
            /// Creates a new `Summary`.
            ///
            /// - Parameters:
            ///   - Containers: Number of containers using this image. Includes both stopped and running
            ///   - Created: Date and time at which the image was created as a Unix timestamp
            ///   - Id: ID is the content-addressable ID of an image.
            ///   - Labels: User-defined key/value metadata.
            ///   - Manifests: Manifests is a list of image manifests available in this image.  It
            ///   - ParentId: ID of the parent image.
            ///   - RepoDigests: List of content-addressable digests of locally available image manifests
            ///   - RepoTags: List of image names/tags in the local image cache that reference this
            ///   - SharedSize: Total size of image layers that are shared between this image and other
            ///   - Size: Total size of the image including all layers it is composed of.
            ///   - VirtualSize: Total size of the image including all layers it is composed of.
            internal init(
                Containers: Swift.Int64,
                Created: Swift.Int64,
                Id: Swift.String,
                Labels: Components.Schemas.Summary.LabelsPayload,
                Manifests: [Components.Schemas.ManifestSummary]? = nil,
                ParentId: Swift.String,
                RepoDigests: [Swift.String],
                RepoTags: [Swift.String],
                SharedSize: Swift.Int64,
                Size: Swift.Int64,
                VirtualSize: Swift.Int64? = nil
            ) {
                self.Containers = Containers
                self.Created = Created
                self.Id = Id
                self.Labels = Labels
                self.Manifests = Manifests
                self.ParentId = ParentId
                self.RepoDigests = RepoDigests
                self.RepoTags = RepoTags
                self.SharedSize = SharedSize
                self.Size = Size
                self.VirtualSize = VirtualSize
            }
            internal enum CodingKeys: String, CodingKey {
                case Containers
                case Created
                case Id
                case Labels
                case Manifests
                case ParentId
                case RepoDigests
                case RepoTags
                case SharedSize
                case Size
                case VirtualSize
            }
        }
        /// SummaryNetworkSettings provides a summary of container's networks
        /// in /containers/json
        ///
        /// - Remark: Generated from `#/components/schemas/SummaryNetworkSettings`.
        internal struct SummaryNetworkSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SummaryNetworkSettings/Networks`.
            internal struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.EndpointSettings]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SummaryNetworkSettings/Networks`.
            internal var Networks: Components.Schemas.SummaryNetworkSettings.NetworksPayload?
            /// Creates a new `SummaryNetworkSettings`.
            ///
            /// - Parameters:
            ///   - Networks:
            internal init(Networks: Components.Schemas.SummaryNetworkSettings.NetworksPayload? = nil) {
                self.Networks = Networks
            }
            internal enum CodingKeys: String, CodingKey {
                case Networks
            }
        }
        /// SystemCheckReport provides a report of what a storage consistency check
        /// found, and if we removed anything that was damaged, what we removed.
        ///
        /// - Remark: Generated from `#/components/schemas/SystemCheckReport`.
        internal struct SystemCheckReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Containers`.
            internal struct ContainersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `ContainersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Containers`.
            internal var Containers: Components.Schemas.SystemCheckReport.ContainersPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Errors`.
            internal var Errors: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Images`.
            internal struct ImagesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `ImagesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Images`.
            internal var Images: Components.Schemas.SystemCheckReport.ImagesPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Layers`.
            internal struct LayersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `LayersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/Layers`.
            internal var Layers: Components.Schemas.SystemCheckReport.LayersPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/ROImages`.
            internal struct ROImagesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `ROImagesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/ROImages`.
            internal var ROImages: Components.Schemas.SystemCheckReport.ROImagesPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/ROLayers`.
            internal struct ROLayersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `ROLayersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/ROLayers`.
            internal var ROLayers: Components.Schemas.SystemCheckReport.ROLayersPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/RemovedContainers`.
            internal struct RemovedContainersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `RemovedContainersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/RemovedContainers`.
            internal var RemovedContainers: Components.Schemas.SystemCheckReport.RemovedContainersPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/RemovedImages`.
            internal struct RemovedImagesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: [Swift.String]]
                /// Creates a new `RemovedImagesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: [Swift.String]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/RemovedImages`.
            internal var RemovedImages: Components.Schemas.SystemCheckReport.RemovedImagesPayload?
            /// - Remark: Generated from `#/components/schemas/SystemCheckReport/RemovedLayers`.
            internal var RemovedLayers: [Swift.String]?
            /// Creates a new `SystemCheckReport`.
            ///
            /// - Parameters:
            ///   - Containers:
            ///   - Errors:
            ///   - Images:
            ///   - Layers:
            ///   - ROImages:
            ///   - ROLayers:
            ///   - RemovedContainers:
            ///   - RemovedImages:
            ///   - RemovedLayers:
            internal init(
                Containers: Components.Schemas.SystemCheckReport.ContainersPayload? = nil,
                Errors: Swift.Bool? = nil,
                Images: Components.Schemas.SystemCheckReport.ImagesPayload? = nil,
                Layers: Components.Schemas.SystemCheckReport.LayersPayload? = nil,
                ROImages: Components.Schemas.SystemCheckReport.ROImagesPayload? = nil,
                ROLayers: Components.Schemas.SystemCheckReport.ROLayersPayload? = nil,
                RemovedContainers: Components.Schemas.SystemCheckReport.RemovedContainersPayload? = nil,
                RemovedImages: Components.Schemas.SystemCheckReport.RemovedImagesPayload? = nil,
                RemovedLayers: [Swift.String]? = nil
            ) {
                self.Containers = Containers
                self.Errors = Errors
                self.Images = Images
                self.Layers = Layers
                self.ROImages = ROImages
                self.ROLayers = ROLayers
                self.RemovedContainers = RemovedContainers
                self.RemovedImages = RemovedImages
                self.RemovedLayers = RemovedLayers
            }
            internal enum CodingKeys: String, CodingKey {
                case Containers
                case Errors
                case Images
                case Layers
                case ROImages
                case ROLayers
                case RemovedContainers
                case RemovedImages
                case RemovedLayers
            }
        }
        /// SystemComponentVersion is the type used by pkg/domain/entities
        ///
        /// - Remark: Generated from `#/components/schemas/SystemComponentVersion`.
        internal struct SystemComponentVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/ApiVersion`.
            internal var ApiVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Arch`.
            internal var Arch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/BuildTime`.
            internal var BuildTime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Components`.
            internal var Components: [Components.Schemas.ComponentVersion]?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Experimental`.
            internal var Experimental: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/GitCommit`.
            internal var GitCommit: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/GoVersion`.
            internal var GoVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/KernelVersion`.
            internal var KernelVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/MinAPIVersion`.
            internal var MinAPIVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Os`.
            internal var Os: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Platform`.
            internal struct PlatformPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Platform/Name`.
                internal var Name: Swift.String?
                /// Creates a new `PlatformPayload`.
                ///
                /// - Parameters:
                ///   - Name:
                internal init(Name: Swift.String? = nil) {
                    self.Name = Name
                }
                internal enum CodingKeys: String, CodingKey {
                    case Name
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Platform`.
            internal var Platform: Components.Schemas.SystemComponentVersion.PlatformPayload?
            /// - Remark: Generated from `#/components/schemas/SystemComponentVersion/Version`.
            internal var Version: Swift.String?
            /// Creates a new `SystemComponentVersion`.
            ///
            /// - Parameters:
            ///   - ApiVersion:
            ///   - Arch:
            ///   - BuildTime:
            ///   - Components:
            ///   - Experimental:
            ///   - GitCommit:
            ///   - GoVersion:
            ///   - KernelVersion:
            ///   - MinAPIVersion:
            ///   - Os:
            ///   - Platform:
            ///   - Version:
            internal init(
                ApiVersion: Swift.String? = nil,
                Arch: Swift.String? = nil,
                BuildTime: Swift.String? = nil,
                Components: [Components.Schemas.ComponentVersion]? = nil,
                Experimental: Swift.Bool? = nil,
                GitCommit: Swift.String? = nil,
                GoVersion: Swift.String? = nil,
                KernelVersion: Swift.String? = nil,
                MinAPIVersion: Swift.String? = nil,
                Os: Swift.String? = nil,
                Platform: Components.Schemas.SystemComponentVersion.PlatformPayload? = nil,
                Version: Swift.String? = nil
            ) {
                self.ApiVersion = ApiVersion
                self.Arch = Arch
                self.BuildTime = BuildTime
                self.Components = Components
                self.Experimental = Experimental
                self.GitCommit = GitCommit
                self.GoVersion = GoVersion
                self.KernelVersion = KernelVersion
                self.MinAPIVersion = MinAPIVersion
                self.Os = Os
                self.Platform = Platform
                self.Version = Version
            }
            internal enum CodingKeys: String, CodingKey {
                case ApiVersion
                case Arch
                case BuildTime
                case Components
                case Experimental
                case GitCommit
                case GoVersion
                case KernelVersion
                case MinAPIVersion
                case Os
                case Platform
                case Version
            }
        }
        /// SystemDfContainerReport describes a container for use with df
        ///
        /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport`.
        internal struct SystemDfContainerReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Command`.
            internal var Command: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/ContainerID`.
            internal var ContainerID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Image`.
            internal var Image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/LocalVolumes`.
            internal var LocalVolumes: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Names`.
            internal var Names: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/RWSize`.
            internal var RWSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfContainerReport/Status`.
            internal var Status: Swift.String?
            /// Creates a new `SystemDfContainerReport`.
            ///
            /// - Parameters:
            ///   - Command:
            ///   - ContainerID:
            ///   - Created:
            ///   - Image:
            ///   - LocalVolumes:
            ///   - Names:
            ///   - RWSize:
            ///   - Size:
            ///   - Status:
            internal init(
                Command: [Swift.String]? = nil,
                ContainerID: Swift.String? = nil,
                Created: Foundation.Date? = nil,
                Image: Swift.String? = nil,
                LocalVolumes: Swift.Int64? = nil,
                Names: Swift.String? = nil,
                RWSize: Swift.Int64? = nil,
                Size: Swift.Int64? = nil,
                Status: Swift.String? = nil
            ) {
                self.Command = Command
                self.ContainerID = ContainerID
                self.Created = Created
                self.Image = Image
                self.LocalVolumes = LocalVolumes
                self.Names = Names
                self.RWSize = RWSize
                self.Size = Size
                self.Status = Status
            }
            internal enum CodingKeys: String, CodingKey {
                case Command
                case ContainerID
                case Created
                case Image
                case LocalVolumes
                case Names
                case RWSize
                case Size
                case Status
            }
        }
        /// SystemDfImageReport describes an image for use with df
        ///
        /// - Remark: Generated from `#/components/schemas/SystemDfImageReport`.
        internal struct SystemDfImageReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/Containers`.
            internal var Containers: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/Created`.
            internal var Created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/ImageID`.
            internal var ImageID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/Repository`.
            internal var Repository: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/SharedSize`.
            internal var SharedSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/Tag`.
            internal var Tag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemDfImageReport/UniqueSize`.
            internal var UniqueSize: Swift.Int64?
            /// Creates a new `SystemDfImageReport`.
            ///
            /// - Parameters:
            ///   - Containers:
            ///   - Created:
            ///   - ImageID:
            ///   - Repository:
            ///   - SharedSize:
            ///   - Size:
            ///   - Tag:
            ///   - UniqueSize:
            internal init(
                Containers: Swift.Int64? = nil,
                Created: Foundation.Date? = nil,
                ImageID: Swift.String? = nil,
                Repository: Swift.String? = nil,
                SharedSize: Swift.Int64? = nil,
                Size: Swift.Int64? = nil,
                Tag: Swift.String? = nil,
                UniqueSize: Swift.Int64? = nil
            ) {
                self.Containers = Containers
                self.Created = Created
                self.ImageID = ImageID
                self.Repository = Repository
                self.SharedSize = SharedSize
                self.Size = Size
                self.Tag = Tag
                self.UniqueSize = UniqueSize
            }
            internal enum CodingKeys: String, CodingKey {
                case Containers
                case Created
                case ImageID
                case Repository
                case SharedSize
                case Size
                case Tag
                case UniqueSize
            }
        }
        /// SystemDfReport describes the response for df information
        ///
        /// - Remark: Generated from `#/components/schemas/SystemDfReport`.
        internal struct SystemDfReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemDfReport/Containers`.
            internal var Containers: [Components.Schemas.SystemDfContainerReport]?
            /// - Remark: Generated from `#/components/schemas/SystemDfReport/Images`.
            internal var Images: [Components.Schemas.SystemDfImageReport]?
            /// - Remark: Generated from `#/components/schemas/SystemDfReport/ImagesSize`.
            internal var ImagesSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfReport/Volumes`.
            internal var Volumes: [Components.Schemas.SystemDfVolumeReport]?
            /// Creates a new `SystemDfReport`.
            ///
            /// - Parameters:
            ///   - Containers:
            ///   - Images:
            ///   - ImagesSize:
            ///   - Volumes:
            internal init(
                Containers: [Components.Schemas.SystemDfContainerReport]? = nil,
                Images: [Components.Schemas.SystemDfImageReport]? = nil,
                ImagesSize: Swift.Int64? = nil,
                Volumes: [Components.Schemas.SystemDfVolumeReport]? = nil
            ) {
                self.Containers = Containers
                self.Images = Images
                self.ImagesSize = ImagesSize
                self.Volumes = Volumes
            }
            internal enum CodingKeys: String, CodingKey {
                case Containers
                case Images
                case ImagesSize
                case Volumes
            }
        }
        /// SystemDfVolumeReport describes a volume and its size
        ///
        /// - Remark: Generated from `#/components/schemas/SystemDfVolumeReport`.
        internal struct SystemDfVolumeReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemDfVolumeReport/Links`.
            internal var Links: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfVolumeReport/ReclaimableSize`.
            internal var ReclaimableSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfVolumeReport/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SystemDfVolumeReport/VolumeName`.
            internal var VolumeName: Swift.String?
            /// Creates a new `SystemDfVolumeReport`.
            ///
            /// - Parameters:
            ///   - Links:
            ///   - ReclaimableSize:
            ///   - Size:
            ///   - VolumeName:
            internal init(
                Links: Swift.Int64? = nil,
                ReclaimableSize: Swift.Int64? = nil,
                Size: Swift.Int64? = nil,
                VolumeName: Swift.String? = nil
            ) {
                self.Links = Links
                self.ReclaimableSize = ReclaimableSize
                self.Size = Size
                self.VolumeName = VolumeName
            }
            internal enum CodingKeys: String, CodingKey {
                case Links
                case ReclaimableSize
                case Size
                case VolumeName
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPruneReport`.
        internal struct SystemPruneReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/ContainerPruneReports`.
            internal var ContainerPruneReports: [Components.Schemas.PruneReport]?
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/ImagePruneReports`.
            internal var ImagePruneReports: [Components.Schemas.PruneReport]?
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/NetworkPruneReports`.
            internal var NetworkPruneReports: [Components.Schemas.NetworkPruneReport]?
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/PodPruneReport`.
            internal var PodPruneReport: [Components.Schemas.PodPruneReport]?
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/ReclaimedSpace`.
            internal var ReclaimedSpace: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SystemPruneReport/VolumePruneReports`.
            internal var VolumePruneReports: [Components.Schemas.PruneReport]?
            /// Creates a new `SystemPruneReport`.
            ///
            /// - Parameters:
            ///   - ContainerPruneReports:
            ///   - ImagePruneReports:
            ///   - NetworkPruneReports:
            ///   - PodPruneReport:
            ///   - ReclaimedSpace:
            ///   - VolumePruneReports:
            internal init(
                ContainerPruneReports: [Components.Schemas.PruneReport]? = nil,
                ImagePruneReports: [Components.Schemas.PruneReport]? = nil,
                NetworkPruneReports: [Components.Schemas.NetworkPruneReport]? = nil,
                PodPruneReport: [Components.Schemas.PodPruneReport]? = nil,
                ReclaimedSpace: Swift.Int? = nil,
                VolumePruneReports: [Components.Schemas.PruneReport]? = nil
            ) {
                self.ContainerPruneReports = ContainerPruneReports
                self.ImagePruneReports = ImagePruneReports
                self.NetworkPruneReports = NetworkPruneReports
                self.PodPruneReport = PodPruneReport
                self.ReclaimedSpace = ReclaimedSpace
                self.VolumePruneReports = VolumePruneReports
            }
            internal enum CodingKeys: String, CodingKey {
                case ContainerPruneReports
                case ImagePruneReports
                case NetworkPruneReports
                case PodPruneReport
                case ReclaimedSpace
                case VolumePruneReports
            }
        }
        /// Task carries the information about one backend task
        ///
        /// - Remark: Generated from `#/components/schemas/Task`.
        internal struct Task: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Task/EndpointID`.
            internal var EndpointID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/EndpointIP`.
            internal var EndpointIP: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/Info`.
            internal struct InfoPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `InfoPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Task/Info`.
            internal var Info: Components.Schemas.Task.InfoPayload?
            /// - Remark: Generated from `#/components/schemas/Task/Name`.
            internal var Name: Swift.String?
            /// Creates a new `Task`.
            ///
            /// - Parameters:
            ///   - EndpointID:
            ///   - EndpointIP:
            ///   - Info:
            ///   - Name:
            internal init(
                EndpointID: Swift.String? = nil,
                EndpointIP: Swift.String? = nil,
                Info: Components.Schemas.Task.InfoPayload? = nil,
                Name: Swift.String? = nil
            ) {
                self.EndpointID = EndpointID
                self.EndpointIP = EndpointIP
                self.Info = Info
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case EndpointID
                case EndpointIP
                case Info
                case Name
            }
        }
        /// ThrottleDevice is a structure that holds device:rate_per_second pair
        ///
        /// - Remark: Generated from `#/components/schemas/ThrottleDevice`.
        internal struct ThrottleDevice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThrottleDevice/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThrottleDevice/Rate`.
            internal var Rate: Swift.Int?
            /// Creates a new `ThrottleDevice`.
            ///
            /// - Parameters:
            ///   - Path:
            ///   - Rate:
            internal init(
                Path: Swift.String? = nil,
                Rate: Swift.Int? = nil
            ) {
                self.Path = Path
                self.Rate = Rate
            }
            internal enum CodingKeys: String, CodingKey {
                case Path
                case Rate
            }
        }
        /// - Remark: Generated from `#/components/schemas/TmpfsOptions`.
        internal struct TmpfsOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TmpfsOptions/Mode`.
            internal var Mode: Components.Schemas.FileMode?
            /// Options to be passed to the tmpfs mount. An array of arrays. Flag
            /// options should be provided as 1-length arrays. Other types should be
            /// provided as 2-length arrays, where the first item is the key and the
            /// second the value.
            ///
            /// - Remark: Generated from `#/components/schemas/TmpfsOptions/Options`.
            internal var Options: [[Swift.String]]?
            /// Size sets the size of the tmpfs, in bytes.
            ///
            /// This will be converted to an operating system specific value
            /// depending on the host. For example, on linux, it will be converted to
            /// use a 'k', 'm' or 'g' syntax. BSD, though not widely supported with
            /// docker, uses a straight byte value.
            ///
            /// Percentages are not supported.
            ///
            /// - Remark: Generated from `#/components/schemas/TmpfsOptions/SizeBytes`.
            internal var SizeBytes: Swift.Int64?
            /// Creates a new `TmpfsOptions`.
            ///
            /// - Parameters:
            ///   - Mode:
            ///   - Options: Options to be passed to the tmpfs mount. An array of arrays. Flag
            ///   - SizeBytes: Size sets the size of the tmpfs, in bytes.
            internal init(
                Mode: Components.Schemas.FileMode? = nil,
                Options: [[Swift.String]]? = nil,
                SizeBytes: Swift.Int64? = nil
            ) {
                self.Mode = Mode
                self.Options = Options
                self.SizeBytes = SizeBytes
            }
            internal enum CodingKeys: String, CodingKey {
                case Mode
                case Options
                case SizeBytes
            }
        }
        /// This description is taken verbatim from the CSI Spec:
        ///
        /// A topological domain is a sub-division of a cluster, like "region",
        /// "zone", "rack", etc.
        /// A topological segment is a specific instance of a topological domain,
        /// like "zone3", "rack3", etc.
        /// For example {"com.company/zone": "Z1", "com.company/rack": "R3"}
        /// Valid keys have two segments: an OPTIONAL prefix and name, separated
        /// by a slash (/), for example: "com.company.example/zone".
        /// The key name segment is REQUIRED. The prefix is OPTIONAL.
        /// The key name MUST be 63 characters or less, begin and end with an
        /// alphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),
        /// underscores (_), dots (.), or alphanumerics in between, for example
        /// "zone".
        /// The key prefix MUST be 63 characters or less, begin and end with a
        /// lower-case alphanumeric character ([a-z0-9]), contain only
        /// dashes (-), dots (.), or lower-case alphanumerics in between, and
        /// follow domain name notation format
        /// (https://tools.ietf.org/html/rfc1035#section-2.3.1).
        /// The key prefix SHOULD include the plugin's host company name and/or
        /// the plugin name, to minimize the possibility of collisions with keys
        /// from other plugins.
        /// If a key prefix is specified, it MUST be identical across all
        /// topology keys returned by the SP (across all RPCs).
        /// Keys MUST be case-insensitive. Meaning the keys "Zone" and "zone"
        /// MUST not both exist.
        /// Each value (topological segment) MUST contain 1 or more strings.
        /// Each string MUST be 63 characters or less and begin and end with an
        /// alphanumeric character with '-', '_', '.', or alphanumerics in
        /// between.
        ///
        /// - Remark: Generated from `#/components/schemas/Topology`.
        internal struct Topology: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Topology/Segments`.
            internal struct SegmentsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `SegmentsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Topology/Segments`.
            internal var Segments: Components.Schemas.Topology.SegmentsPayload?
            /// Creates a new `Topology`.
            ///
            /// - Parameters:
            ///   - Segments:
            internal init(Segments: Components.Schemas.Topology.SegmentsPayload? = nil) {
                self.Segments = Segments
            }
            internal enum CodingKeys: String, CodingKey {
                case Segments
            }
        }
        /// TopologyRequirement expresses the user's requirements for a volume's
        /// accessible topology.
        ///
        /// - Remark: Generated from `#/components/schemas/TopologyRequirement`.
        internal struct TopologyRequirement: Codable, Hashable, Sendable {
            /// Preferred is a list of Topologies that the volume should attempt to be
            /// provisioned in.
            ///
            /// Taken from the CSI spec:
            ///
            /// Specifies the list of topologies the CO would prefer the volume to
            /// be provisioned in.
            ///
            /// This field is OPTIONAL. If TopologyRequirement is specified either
            /// requisite or preferred or both MUST be specified.
            ///
            /// An SP MUST attempt to make the provisioned volume available using
            /// the preferred topologies in order from first to last.
            ///
            /// If requisite is specified, all topologies in preferred list MUST
            /// also be present in the list of requisite topologies.
            ///
            /// If the SP is unable to make the provisioned volume available
            /// from any of the preferred topologies, the SP MAY choose a topology
            /// from the list of requisite topologies.
            /// If the list of requisite topologies is not specified, then the SP
            /// MAY choose from the list of all possible topologies.
            /// If the list of requisite topologies is specified and the SP is
            /// unable to make the provisioned volume available from any of the
            /// requisite topologies it MUST fail the CreateVolume call.
            ///
            /// Example 1:
            /// Given a volume should be accessible from a single zone, and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"}
            /// preferred =
            /// {"region": "R1", "zone": "Z3"}
            /// then the SP SHOULD first attempt to make the provisioned volume
            /// available from "zone" "Z3" in the "region" "R1" and fall back to
            /// "zone" "Z2" in the "region" "R1" if that is not possible.
            ///
            /// Example 2:
            /// Given a volume should be accessible from a single zone, and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"},
            /// {"region": "R1", "zone": "Z4"},
            /// {"region": "R1", "zone": "Z5"}
            /// preferred =
            /// {"region": "R1", "zone": "Z4"},
            /// {"region": "R1", "zone": "Z2"}
            /// then the SP SHOULD first attempt to make the provisioned volume
            /// accessible from "zone" "Z4" in the "region" "R1" and fall back to
            /// "zone" "Z2" in the "region" "R1" if that is not possible. If that
            /// is not possible, the SP may choose between either the "zone"
            /// "Z3" or "Z5" in the "region" "R1".
            ///
            /// Example 3:
            /// Given a volume should be accessible from TWO zones (because an
            /// opaque parameter in CreateVolumeRequest, for example, specifies
            /// the volume is accessible from two zones, aka synchronously
            /// replicated), and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"},
            /// {"region": "R1", "zone": "Z4"},
            /// {"region": "R1", "zone": "Z5"}
            /// preferred =
            /// {"region": "R1", "zone": "Z5"},
            /// {"region": "R1", "zone": "Z3"}
            /// then the SP SHOULD first attempt to make the provisioned volume
            /// accessible from the combination of the two "zones" "Z5" and "Z3" in
            /// the "region" "R1". If that's not possible, it should fall back to
            /// a combination of "Z5" and other possibilities from the list of
            /// requisite. If that's not possible, it should fall back  to a
            /// combination of "Z3" and other possibilities from the list of
            /// requisite. If that's not possible, it should fall back  to a
            /// combination of other possibilities from the list of requisite.
            ///
            /// - Remark: Generated from `#/components/schemas/TopologyRequirement/Preferred`.
            internal var Preferred: [Components.Schemas.Topology]?
            /// Requisite specifies a list of Topologies, at least one of which the
            /// volume must be accessible from.
            ///
            /// Taken verbatim from the CSI Spec:
            ///
            /// Specifies the list of topologies the provisioned volume MUST be
            /// accessible from.
            /// This field is OPTIONAL. If TopologyRequirement is specified either
            /// requisite or preferred or both MUST be specified.
            ///
            /// If requisite is specified, the provisioned volume MUST be
            /// accessible from at least one of the requisite topologies.
            ///
            /// Given
            /// x = number of topologies provisioned volume is accessible from
            /// n = number of requisite topologies
            /// The CO MUST ensure n >= 1. The SP MUST ensure x >= 1
            /// If x==n, then the SP MUST make the provisioned volume available to
            /// all topologies from the list of requisite topologies. If it is
            /// unable to do so, the SP MUST fail the CreateVolume call.
            /// For example, if a volume should be accessible from a single zone,
            /// and requisite =
            /// {"region": "R1", "zone": "Z2"}
            /// then the provisioned volume MUST be accessible from the "region"
            /// "R1" and the "zone" "Z2".
            /// Similarly, if a volume should be accessible from two zones, and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"}
            /// then the provisioned volume MUST be accessible from the "region"
            /// "R1" and both "zone" "Z2" and "zone" "Z3".
            ///
            /// If x<n, then the SP SHALL choose x unique topologies from the list
            /// of requisite topologies. If it is unable to do so, the SP MUST fail
            /// the CreateVolume call.
            /// For example, if a volume should be accessible from a single zone,
            /// and requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"}
            /// then the SP may choose to make the provisioned volume available in
            /// either the "zone" "Z2" or the "zone" "Z3" in the "region" "R1".
            /// Similarly, if a volume should be accessible from two zones, and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"},
            /// {"region": "R1", "zone": "Z3"},
            /// {"region": "R1", "zone": "Z4"}
            /// then the provisioned volume MUST be accessible from any combination
            /// of two unique topologies: e.g. "R1/Z2" and "R1/Z3", or "R1/Z2" and
            /// "R1/Z4", or "R1/Z3" and "R1/Z4".
            ///
            /// If x>n, then the SP MUST make the provisioned volume available from
            /// all topologies from the list of requisite topologies and MAY choose
            /// the remaining x-n unique topologies from the list of all possible
            /// topologies. If it is unable to do so, the SP MUST fail the
            /// CreateVolume call.
            /// For example, if a volume should be accessible from two zones, and
            /// requisite =
            /// {"region": "R1", "zone": "Z2"}
            /// then the provisioned volume MUST be accessible from the "region"
            /// "R1" and the "zone" "Z2" and the SP may select the second zone
            /// independently, e.g. "R1/Z4".
            ///
            /// - Remark: Generated from `#/components/schemas/TopologyRequirement/Requisite`.
            internal var Requisite: [Components.Schemas.Topology]?
            /// Creates a new `TopologyRequirement`.
            ///
            /// - Parameters:
            ///   - Preferred: Preferred is a list of Topologies that the volume should attempt to be
            ///   - Requisite: Requisite specifies a list of Topologies, at least one of which the
            internal init(
                Preferred: [Components.Schemas.Topology]? = nil,
                Requisite: [Components.Schemas.Topology]? = nil
            ) {
                self.Preferred = Preferred
                self.Requisite = Requisite
            }
            internal enum CodingKeys: String, CodingKey {
                case Preferred
                case Requisite
            }
        }
        /// - Remark: Generated from `#/components/schemas/Type`.
        internal typealias _Type = Swift.String
        /// Intentionally empty.
        ///
        /// - Remark: Generated from `#/components/schemas/TypeBlock`.
        internal typealias TypeBlock = OpenAPIRuntime.OpenAPIObjectContainer
        /// TypeMount contains options for using a volume as a Mount-type
        /// volume.
        ///
        /// - Remark: Generated from `#/components/schemas/TypeMount`.
        internal struct TypeMount: Codable, Hashable, Sendable {
            /// FsType specifies the filesystem type for the mount volume. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeMount/FsType`.
            internal var FsType: Swift.String?
            /// MountFlags defines flags to pass when mounting the volume. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeMount/MountFlags`.
            internal var MountFlags: [Swift.String]?
            /// Creates a new `TypeMount`.
            ///
            /// - Parameters:
            ///   - FsType: FsType specifies the filesystem type for the mount volume. Optional.
            ///   - MountFlags: MountFlags defines flags to pass when mounting the volume. Optional.
            internal init(
                FsType: Swift.String? = nil,
                MountFlags: [Swift.String]? = nil
            ) {
                self.FsType = FsType
                self.MountFlags = MountFlags
            }
            internal enum CodingKeys: String, CodingKey {
                case FsType
                case MountFlags
            }
        }
        /// - Remark: Generated from `#/components/schemas/UTSMode`.
        internal typealias UTSMode = Swift.String
        /// - Remark: Generated from `#/components/schemas/Ulimit`.
        internal struct Ulimit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ulimit/Hard`.
            internal var Hard: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Ulimit/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Ulimit/Soft`.
            internal var Soft: Swift.Int64?
            /// Creates a new `Ulimit`.
            ///
            /// - Parameters:
            ///   - Hard:
            ///   - Name:
            ///   - Soft:
            internal init(
                Hard: Swift.Int64? = nil,
                Name: Swift.String? = nil,
                Soft: Swift.Int64? = nil
            ) {
                self.Hard = Hard
                self.Name = Name
                self.Soft = Soft
            }
            internal enum CodingKeys: String, CodingKey {
                case Hard
                case Name
                case Soft
            }
        }
        /// Those attributes can be updated at runtime.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateConfig`.
        internal struct UpdateConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioDeviceReadBps`.
            internal var BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioDeviceReadIOps`.
            internal var BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioDeviceWriteBps`.
            internal var BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioDeviceWriteIOps`.
            internal var BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioWeight`.
            internal var BlkioWeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/BlkioWeightDevice`.
            internal var BlkioWeightDevice: [Components.Schemas.WeightDevice]?
            /// Applicable to UNIX platforms
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// Applicable to Windows
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuCount`.
            internal var CpuCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuPercent`.
            internal var CpuPercent: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuPeriod`.
            internal var CpuPeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuQuota`.
            internal var CpuQuota: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuRealtimePeriod`.
            internal var CpuRealtimePeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuRealtimeRuntime`.
            internal var CpuRealtimeRuntime: Swift.Int64?
            /// Applicable to all platforms
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpuShares`.
            internal var CpuShares: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpusetCpus`.
            internal var CpusetCpus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/CpusetMems`.
            internal var CpusetMems: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/DeviceCgroupRules`.
            internal var DeviceCgroupRules: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/DeviceRequests`.
            internal var DeviceRequests: [Components.Schemas.DeviceRequest]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/Devices`.
            internal var Devices: [Components.Schemas.DeviceMapping]?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/IOMaximumBandwidth`.
            internal var IOMaximumBandwidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/IOMaximumIOps`.
            internal var IOMaximumIOps: Swift.Int?
            /// KernelMemory specifies the kernel memory limit (in bytes) for the container.
            /// Deprecated: kernel 5.4 deprecated kmem.limit_in_bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/KernelMemory`.
            internal var KernelMemory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/KernelMemoryTCP`.
            internal var KernelMemoryTCP: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/Memory`.
            internal var Memory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/MemoryReservation`.
            internal var MemoryReservation: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/MemorySwap`.
            internal var MemorySwap: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/MemorySwappiness`.
            internal var MemorySwappiness: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/NanoCpus`.
            internal var NanoCpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/OomKillDisable`.
            internal var OomKillDisable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/PidsLimit`.
            internal var PidsLimit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/RestartPolicy`.
            internal var RestartPolicy: Components.Schemas.RestartPolicy?
            /// - Remark: Generated from `#/components/schemas/UpdateConfig/Ulimits`.
            internal var Ulimits: [Components.Schemas.Ulimit]?
            /// Creates a new `UpdateConfig`.
            ///
            /// - Parameters:
            ///   - BlkioDeviceReadBps:
            ///   - BlkioDeviceReadIOps:
            ///   - BlkioDeviceWriteBps:
            ///   - BlkioDeviceWriteIOps:
            ///   - BlkioWeight:
            ///   - BlkioWeightDevice:
            ///   - CgroupParent: Applicable to UNIX platforms
            ///   - CpuCount: Applicable to Windows
            ///   - CpuPercent:
            ///   - CpuPeriod:
            ///   - CpuQuota:
            ///   - CpuRealtimePeriod:
            ///   - CpuRealtimeRuntime:
            ///   - CpuShares: Applicable to all platforms
            ///   - CpusetCpus:
            ///   - CpusetMems:
            ///   - DeviceCgroupRules:
            ///   - DeviceRequests:
            ///   - Devices:
            ///   - IOMaximumBandwidth:
            ///   - IOMaximumIOps:
            ///   - KernelMemory: KernelMemory specifies the kernel memory limit (in bytes) for the container.
            ///   - KernelMemoryTCP:
            ///   - Memory:
            ///   - MemoryReservation:
            ///   - MemorySwap:
            ///   - MemorySwappiness:
            ///   - NanoCpus:
            ///   - OomKillDisable:
            ///   - PidsLimit:
            ///   - RestartPolicy:
            ///   - Ulimits:
            internal init(
                BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                CgroupParent: Swift.String? = nil,
                CpuCount: Swift.Int64? = nil,
                CpuPercent: Swift.Int64? = nil,
                CpuPeriod: Swift.Int64? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int64? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpuShares: Swift.Int64? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                DeviceCgroupRules: [Swift.String]? = nil,
                DeviceRequests: [Components.Schemas.DeviceRequest]? = nil,
                Devices: [Components.Schemas.DeviceMapping]? = nil,
                IOMaximumBandwidth: Swift.Int? = nil,
                IOMaximumIOps: Swift.Int? = nil,
                KernelMemory: Swift.Int64? = nil,
                KernelMemoryTCP: Swift.Int64? = nil,
                Memory: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                NanoCpus: Swift.Int64? = nil,
                OomKillDisable: Swift.Bool? = nil,
                PidsLimit: Swift.Int64? = nil,
                RestartPolicy: Components.Schemas.RestartPolicy? = nil,
                Ulimits: [Components.Schemas.Ulimit]? = nil
            ) {
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.CgroupParent = CgroupParent
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpuShares = CpuShares
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.DeviceCgroupRules = DeviceCgroupRules
                self.DeviceRequests = DeviceRequests
                self.Devices = Devices
                self.IOMaximumBandwidth = IOMaximumBandwidth
                self.IOMaximumIOps = IOMaximumIOps
                self.KernelMemory = KernelMemory
                self.KernelMemoryTCP = KernelMemoryTCP
                self.Memory = Memory
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.NanoCpus = NanoCpus
                self.OomKillDisable = OomKillDisable
                self.PidsLimit = PidsLimit
                self.RestartPolicy = RestartPolicy
                self.Ulimits = Ulimits
            }
            internal enum CodingKeys: String, CodingKey {
                case BlkioDeviceReadBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteBps
                case BlkioDeviceWriteIOps
                case BlkioWeight
                case BlkioWeightDevice
                case CgroupParent
                case CpuCount
                case CpuPercent
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpuShares
                case CpusetCpus
                case CpusetMems
                case DeviceCgroupRules
                case DeviceRequests
                case Devices
                case IOMaximumBandwidth
                case IOMaximumIOps
                case KernelMemory
                case KernelMemoryTCP
                case Memory
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case NanoCpus
                case OomKillDisable
                case PidsLimit
                case RestartPolicy
                case Ulimits
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits`.
        internal struct UpdateContainerDevicesLimits: Codable, Hashable, Sendable {
            /// Block IO weight (relative device weight) in the form:
            /// ```[{"Path": "device_path", "Weight": weight}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits/BlkIOWeightDevice`.
            internal var BlkIOWeightDevice: [Components.Schemas.WeightDevice]?
            /// Limit read rate (bytes per second) from a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits/DeviceReadBPs`.
            internal var DeviceReadBPs: [Components.Schemas.ThrottleDevice]?
            /// Limit read rate (IO per second) from a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits/DeviceReadIOPs`.
            internal var DeviceReadIOPs: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (bytes per second) to a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits/DeviceWriteBPs`.
            internal var DeviceWriteBPs: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (IO per second) to a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateContainerDevicesLimits/DeviceWriteIOPs`.
            internal var DeviceWriteIOPs: [Components.Schemas.ThrottleDevice]?
            /// Creates a new `UpdateContainerDevicesLimits`.
            ///
            /// - Parameters:
            ///   - BlkIOWeightDevice: Block IO weight (relative device weight) in the form:
            ///   - DeviceReadBPs: Limit read rate (bytes per second) from a device, in the form:
            ///   - DeviceReadIOPs: Limit read rate (IO per second) from a device, in the form:
            ///   - DeviceWriteBPs: Limit write rate (bytes per second) to a device, in the form:
            ///   - DeviceWriteIOPs: Limit write rate (IO per second) to a device, in the form:
            internal init(
                BlkIOWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                DeviceReadBPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceReadIOPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceWriteBPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceWriteIOPs: [Components.Schemas.ThrottleDevice]? = nil
            ) {
                self.BlkIOWeightDevice = BlkIOWeightDevice
                self.DeviceReadBPs = DeviceReadBPs
                self.DeviceReadIOPs = DeviceReadIOPs
                self.DeviceWriteBPs = DeviceWriteBPs
                self.DeviceWriteIOPs = DeviceWriteIOPs
            }
            internal enum CodingKeys: String, CodingKey {
                case BlkIOWeightDevice
                case DeviceReadBPs
                case DeviceReadIOPs
                case DeviceWriteBPs
                case DeviceWriteIOPs
            }
        }
        /// UpdateEntities used to wrap the oci resource spec in a swagger model
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateEntities`.
        internal struct UpdateEntities: Codable, Hashable, Sendable {
            /// Block IO weight (relative device weight) in the form:
            /// ```[{"Path": "device_path", "Weight": weight}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/BlkIOWeightDevice`.
            internal var BlkIOWeightDevice: [Components.Schemas.WeightDevice]?
            /// Limit read rate (bytes per second) from a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/DeviceReadBPs`.
            internal var DeviceReadBPs: [Components.Schemas.ThrottleDevice]?
            /// Limit read rate (IO per second) from a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/DeviceReadIOPs`.
            internal var DeviceReadIOPs: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (bytes per second) to a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/DeviceWriteBPs`.
            internal var DeviceWriteBPs: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (IO per second) to a device, in the form:
            /// ```[{"Path": "device_path", "Rate": rate}]```
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/DeviceWriteIOPs`.
            internal var DeviceWriteIOPs: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/blockIO`.
            internal var blockIO: Components.Schemas.LinuxBlockIO?
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/cpu`.
            internal var cpu: Components.Schemas.LinuxCPU?
            /// Devices configures the device allowlist.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/devices`.
            internal var devices: [Components.Schemas.LinuxDeviceCgroup]?
            /// HealthCmd set a healthcheck command for the container. ('none' disables the existing healthcheck)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_cmd`.
            internal var health_cmd: Swift.String?
            /// HealthInterval set an interval for the healthcheck.
            /// (a value of disable results in no automatic timer setup) Changing this setting resets timer.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_interval`.
            internal var health_interval: Swift.String?
            /// HealthLogDestination set the destination of the HealthCheck log.
            /// Directory path, local or events_logger (local use container state file)
            /// Warning: Changing this setting may cause the loss of previous logs!
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_log_destination`.
            internal var health_log_destination: Swift.String?
            /// HealthMaxLogCount set maximum number of attempts in the HealthCheck log file.
            /// ('0' value means an infinite number of attempts in the log file)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_max_log_count`.
            internal var health_max_log_count: Swift.Int?
            /// HealthMaxLogSize set maximum length in characters of stored HealthCheck log.
            /// ('0' value means an infinite log length)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_max_log_size`.
            internal var health_max_log_size: Swift.Int?
            /// HealthOnFailure set the action to take once the container turns unhealthy.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_on_failure`.
            internal var health_on_failure: Swift.String?
            /// HealthRetries set the number of retries allowed before a healthcheck is considered to be unhealthy.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_retries`.
            internal var health_retries: Swift.Int?
            /// HealthStartPeriod set the initialization time needed for a container to bootstrap.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_start_period`.
            internal var health_start_period: Swift.String?
            /// HealthStartupCmd set a startup healthcheck command for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_startup_cmd`.
            internal var health_startup_cmd: Swift.String?
            /// HealthStartupInterval set an interval for the startup healthcheck.
            /// Changing this setting resets the timer, depending on the state of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_startup_interval`.
            internal var health_startup_interval: Swift.String?
            /// HealthStartupRetries set the maximum number of retries before the startup healthcheck will restart the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_startup_retries`.
            internal var health_startup_retries: Swift.Int?
            /// HealthStartupSuccess set the number of consecutive successes before the startup healthcheck is marked as successful
            /// and the normal healthcheck begins (0 indicates any success will start the regular healthcheck)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_startup_success`.
            internal var health_startup_success: Swift.Int?
            /// HealthStartupTimeout set the maximum amount of time that the startup healthcheck may take before it is considered failed.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_startup_timeout`.
            internal var health_startup_timeout: Swift.String?
            /// HealthTimeout set the maximum time allowed to complete the healthcheck before an interval is considered failed.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/health_timeout`.
            internal var health_timeout: Swift.String?
            /// Hugetlb limits (in bytes). Default to reservation limits if supported.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/hugepageLimits`.
            internal var hugepageLimits: [Components.Schemas.LinuxHugepageLimit]?
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/memory`.
            internal var memory: Components.Schemas.LinuxMemory?
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/network`.
            internal var network: Components.Schemas.LinuxNetwork?
            /// Disable healthchecks on container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/no_healthcheck`.
            internal var no_healthcheck: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/pids`.
            internal var pids: Components.Schemas.LinuxPids?
            /// Rdma resource restriction configuration.
            /// Limits are a set of key value pairs that define RDMA resource limits,
            /// where the key is device name and value is resource limits.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/rdma`.
            internal struct rdmaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.LinuxRdma]
                /// Creates a new `rdmaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.LinuxRdma] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Rdma resource restriction configuration.
            /// Limits are a set of key value pairs that define RDMA resource limits,
            /// where the key is device name and value is resource limits.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/rdma`.
            internal var rdma: Components.Schemas.UpdateEntities.rdmaPayload?
            /// Unified resources.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/unified`.
            internal struct unifiedPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `unifiedPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Unified resources.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEntities/unified`.
            internal var unified: Components.Schemas.UpdateEntities.unifiedPayload?
            /// Creates a new `UpdateEntities`.
            ///
            /// - Parameters:
            ///   - BlkIOWeightDevice: Block IO weight (relative device weight) in the form:
            ///   - DeviceReadBPs: Limit read rate (bytes per second) from a device, in the form:
            ///   - DeviceReadIOPs: Limit read rate (IO per second) from a device, in the form:
            ///   - DeviceWriteBPs: Limit write rate (bytes per second) to a device, in the form:
            ///   - DeviceWriteIOPs: Limit write rate (IO per second) to a device, in the form:
            ///   - blockIO:
            ///   - cpu:
            ///   - devices: Devices configures the device allowlist.
            ///   - health_cmd: HealthCmd set a healthcheck command for the container. ('none' disables the existing healthcheck)
            ///   - health_interval: HealthInterval set an interval for the healthcheck.
            ///   - health_log_destination: HealthLogDestination set the destination of the HealthCheck log.
            ///   - health_max_log_count: HealthMaxLogCount set maximum number of attempts in the HealthCheck log file.
            ///   - health_max_log_size: HealthMaxLogSize set maximum length in characters of stored HealthCheck log.
            ///   - health_on_failure: HealthOnFailure set the action to take once the container turns unhealthy.
            ///   - health_retries: HealthRetries set the number of retries allowed before a healthcheck is considered to be unhealthy.
            ///   - health_start_period: HealthStartPeriod set the initialization time needed for a container to bootstrap.
            ///   - health_startup_cmd: HealthStartupCmd set a startup healthcheck command for the container.
            ///   - health_startup_interval: HealthStartupInterval set an interval for the startup healthcheck.
            ///   - health_startup_retries: HealthStartupRetries set the maximum number of retries before the startup healthcheck will restart the container.
            ///   - health_startup_success: HealthStartupSuccess set the number of consecutive successes before the startup healthcheck is marked as successful
            ///   - health_startup_timeout: HealthStartupTimeout set the maximum amount of time that the startup healthcheck may take before it is considered failed.
            ///   - health_timeout: HealthTimeout set the maximum time allowed to complete the healthcheck before an interval is considered failed.
            ///   - hugepageLimits: Hugetlb limits (in bytes). Default to reservation limits if supported.
            ///   - memory:
            ///   - network:
            ///   - no_healthcheck: Disable healthchecks on container.
            ///   - pids:
            ///   - rdma: Rdma resource restriction configuration.
            ///   - unified: Unified resources.
            internal init(
                BlkIOWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                DeviceReadBPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceReadIOPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceWriteBPs: [Components.Schemas.ThrottleDevice]? = nil,
                DeviceWriteIOPs: [Components.Schemas.ThrottleDevice]? = nil,
                blockIO: Components.Schemas.LinuxBlockIO? = nil,
                cpu: Components.Schemas.LinuxCPU? = nil,
                devices: [Components.Schemas.LinuxDeviceCgroup]? = nil,
                health_cmd: Swift.String? = nil,
                health_interval: Swift.String? = nil,
                health_log_destination: Swift.String? = nil,
                health_max_log_count: Swift.Int? = nil,
                health_max_log_size: Swift.Int? = nil,
                health_on_failure: Swift.String? = nil,
                health_retries: Swift.Int? = nil,
                health_start_period: Swift.String? = nil,
                health_startup_cmd: Swift.String? = nil,
                health_startup_interval: Swift.String? = nil,
                health_startup_retries: Swift.Int? = nil,
                health_startup_success: Swift.Int? = nil,
                health_startup_timeout: Swift.String? = nil,
                health_timeout: Swift.String? = nil,
                hugepageLimits: [Components.Schemas.LinuxHugepageLimit]? = nil,
                memory: Components.Schemas.LinuxMemory? = nil,
                network: Components.Schemas.LinuxNetwork? = nil,
                no_healthcheck: Swift.Bool? = nil,
                pids: Components.Schemas.LinuxPids? = nil,
                rdma: Components.Schemas.UpdateEntities.rdmaPayload? = nil,
                unified: Components.Schemas.UpdateEntities.unifiedPayload? = nil
            ) {
                self.BlkIOWeightDevice = BlkIOWeightDevice
                self.DeviceReadBPs = DeviceReadBPs
                self.DeviceReadIOPs = DeviceReadIOPs
                self.DeviceWriteBPs = DeviceWriteBPs
                self.DeviceWriteIOPs = DeviceWriteIOPs
                self.blockIO = blockIO
                self.cpu = cpu
                self.devices = devices
                self.health_cmd = health_cmd
                self.health_interval = health_interval
                self.health_log_destination = health_log_destination
                self.health_max_log_count = health_max_log_count
                self.health_max_log_size = health_max_log_size
                self.health_on_failure = health_on_failure
                self.health_retries = health_retries
                self.health_start_period = health_start_period
                self.health_startup_cmd = health_startup_cmd
                self.health_startup_interval = health_startup_interval
                self.health_startup_retries = health_startup_retries
                self.health_startup_success = health_startup_success
                self.health_startup_timeout = health_startup_timeout
                self.health_timeout = health_timeout
                self.hugepageLimits = hugepageLimits
                self.memory = memory
                self.network = network
                self.no_healthcheck = no_healthcheck
                self.pids = pids
                self.rdma = rdma
                self.unified = unified
            }
            internal enum CodingKeys: String, CodingKey {
                case BlkIOWeightDevice
                case DeviceReadBPs
                case DeviceReadIOPs
                case DeviceWriteBPs
                case DeviceWriteIOPs
                case blockIO
                case cpu
                case devices
                case health_cmd
                case health_interval
                case health_log_destination
                case health_max_log_count
                case health_max_log_size
                case health_on_failure
                case health_retries
                case health_start_period
                case health_startup_cmd
                case health_startup_interval
                case health_startup_retries
                case health_startup_success
                case health_startup_timeout
                case health_timeout
                case hugepageLimits
                case memory
                case network
                case no_healthcheck
                case pids
                case rdma
                case unified
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig`.
        internal struct UpdateHealthCheckConfig: Codable, Hashable, Sendable {
            /// HealthCmd set a healthcheck command for the container. ('none' disables the existing healthcheck)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_cmd`.
            internal var health_cmd: Swift.String?
            /// HealthInterval set an interval for the healthcheck.
            /// (a value of disable results in no automatic timer setup) Changing this setting resets timer.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_interval`.
            internal var health_interval: Swift.String?
            /// HealthLogDestination set the destination of the HealthCheck log.
            /// Directory path, local or events_logger (local use container state file)
            /// Warning: Changing this setting may cause the loss of previous logs!
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_log_destination`.
            internal var health_log_destination: Swift.String?
            /// HealthMaxLogCount set maximum number of attempts in the HealthCheck log file.
            /// ('0' value means an infinite number of attempts in the log file)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_max_log_count`.
            internal var health_max_log_count: Swift.Int?
            /// HealthMaxLogSize set maximum length in characters of stored HealthCheck log.
            /// ('0' value means an infinite log length)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_max_log_size`.
            internal var health_max_log_size: Swift.Int?
            /// HealthOnFailure set the action to take once the container turns unhealthy.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_on_failure`.
            internal var health_on_failure: Swift.String?
            /// HealthRetries set the number of retries allowed before a healthcheck is considered to be unhealthy.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_retries`.
            internal var health_retries: Swift.Int?
            /// HealthStartPeriod set the initialization time needed for a container to bootstrap.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_start_period`.
            internal var health_start_period: Swift.String?
            /// HealthStartupCmd set a startup healthcheck command for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_startup_cmd`.
            internal var health_startup_cmd: Swift.String?
            /// HealthStartupInterval set an interval for the startup healthcheck.
            /// Changing this setting resets the timer, depending on the state of the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_startup_interval`.
            internal var health_startup_interval: Swift.String?
            /// HealthStartupRetries set the maximum number of retries before the startup healthcheck will restart the container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_startup_retries`.
            internal var health_startup_retries: Swift.Int?
            /// HealthStartupSuccess set the number of consecutive successes before the startup healthcheck is marked as successful
            /// and the normal healthcheck begins (0 indicates any success will start the regular healthcheck)
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_startup_success`.
            internal var health_startup_success: Swift.Int?
            /// HealthStartupTimeout set the maximum amount of time that the startup healthcheck may take before it is considered failed.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_startup_timeout`.
            internal var health_startup_timeout: Swift.String?
            /// HealthTimeout set the maximum time allowed to complete the healthcheck before an interval is considered failed.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/health_timeout`.
            internal var health_timeout: Swift.String?
            /// Disable healthchecks on container.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateHealthCheckConfig/no_healthcheck`.
            internal var no_healthcheck: Swift.Bool?
            /// Creates a new `UpdateHealthCheckConfig`.
            ///
            /// - Parameters:
            ///   - health_cmd: HealthCmd set a healthcheck command for the container. ('none' disables the existing healthcheck)
            ///   - health_interval: HealthInterval set an interval for the healthcheck.
            ///   - health_log_destination: HealthLogDestination set the destination of the HealthCheck log.
            ///   - health_max_log_count: HealthMaxLogCount set maximum number of attempts in the HealthCheck log file.
            ///   - health_max_log_size: HealthMaxLogSize set maximum length in characters of stored HealthCheck log.
            ///   - health_on_failure: HealthOnFailure set the action to take once the container turns unhealthy.
            ///   - health_retries: HealthRetries set the number of retries allowed before a healthcheck is considered to be unhealthy.
            ///   - health_start_period: HealthStartPeriod set the initialization time needed for a container to bootstrap.
            ///   - health_startup_cmd: HealthStartupCmd set a startup healthcheck command for the container.
            ///   - health_startup_interval: HealthStartupInterval set an interval for the startup healthcheck.
            ///   - health_startup_retries: HealthStartupRetries set the maximum number of retries before the startup healthcheck will restart the container.
            ///   - health_startup_success: HealthStartupSuccess set the number of consecutive successes before the startup healthcheck is marked as successful
            ///   - health_startup_timeout: HealthStartupTimeout set the maximum amount of time that the startup healthcheck may take before it is considered failed.
            ///   - health_timeout: HealthTimeout set the maximum time allowed to complete the healthcheck before an interval is considered failed.
            ///   - no_healthcheck: Disable healthchecks on container.
            internal init(
                health_cmd: Swift.String? = nil,
                health_interval: Swift.String? = nil,
                health_log_destination: Swift.String? = nil,
                health_max_log_count: Swift.Int? = nil,
                health_max_log_size: Swift.Int? = nil,
                health_on_failure: Swift.String? = nil,
                health_retries: Swift.Int? = nil,
                health_start_period: Swift.String? = nil,
                health_startup_cmd: Swift.String? = nil,
                health_startup_interval: Swift.String? = nil,
                health_startup_retries: Swift.Int? = nil,
                health_startup_success: Swift.Int? = nil,
                health_startup_timeout: Swift.String? = nil,
                health_timeout: Swift.String? = nil,
                no_healthcheck: Swift.Bool? = nil
            ) {
                self.health_cmd = health_cmd
                self.health_interval = health_interval
                self.health_log_destination = health_log_destination
                self.health_max_log_count = health_max_log_count
                self.health_max_log_size = health_max_log_size
                self.health_on_failure = health_on_failure
                self.health_retries = health_retries
                self.health_start_period = health_start_period
                self.health_startup_cmd = health_startup_cmd
                self.health_startup_interval = health_startup_interval
                self.health_startup_retries = health_startup_retries
                self.health_startup_success = health_startup_success
                self.health_startup_timeout = health_startup_timeout
                self.health_timeout = health_timeout
                self.no_healthcheck = no_healthcheck
            }
            internal enum CodingKeys: String, CodingKey {
                case health_cmd
                case health_interval
                case health_log_destination
                case health_max_log_count
                case health_max_log_size
                case health_on_failure
                case health_retries
                case health_start_period
                case health_startup_cmd
                case health_startup_interval
                case health_startup_retries
                case health_startup_success
                case health_startup_timeout
                case health_timeout
                case no_healthcheck
            }
        }
        /// UsageData Usage details about the volume. This information is used by the
        /// `GET /system/df` endpoint, and omitted in other endpoints.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageData`.
        internal struct UsageData: Codable, Hashable, Sendable {
            /// The number of containers referencing this volume. This field
            /// is set to `-1` if the reference-count is not available.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageData/RefCount`.
            internal var RefCount: Swift.Int64
            /// Amount of disk space used by the volume (in bytes). This information
            /// is only available for volumes created with the `"local"` volume
            /// driver. For volumes created with other volume drivers, this field
            /// is set to `-1` ("not available")
            ///
            /// - Remark: Generated from `#/components/schemas/UsageData/Size`.
            internal var Size: Swift.Int64
            /// Creates a new `UsageData`.
            ///
            /// - Parameters:
            ///   - RefCount: The number of containers referencing this volume. This field
            ///   - Size: Amount of disk space used by the volume (in bytes). This information
            internal init(
                RefCount: Swift.Int64,
                Size: Swift.Int64
            ) {
                self.RefCount = RefCount
                self.Size = Size
            }
            internal enum CodingKeys: String, CodingKey {
                case RefCount
                case Size
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsernsMode`.
        internal typealias UsernsMode = Swift.String
        /// - Remark: Generated from `#/components/schemas/Version`.
        internal struct Version: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Version/Index`.
            internal var Index: Swift.Int?
            /// Creates a new `Version`.
            ///
            /// - Parameters:
            ///   - Index:
            internal init(Index: Swift.Int? = nil) {
                self.Index = Index
            }
            internal enum CodingKeys: String, CodingKey {
                case Index
            }
        }
        /// Volume volume
        ///
        /// - Remark: Generated from `#/components/schemas/Volume`.
        internal struct Volume: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Volume/ClusterVolume`.
            internal var ClusterVolume: Components.Schemas.ClusterVolume?
            /// Date/Time the volume was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/CreatedAt`.
            internal var CreatedAt: Swift.String?
            /// Name of the volume driver used by the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Driver`.
            internal var Driver: Swift.String
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Labels`.
            internal var Labels: Components.Schemas.Volume.LabelsPayload
            /// Mount path of the volume on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Mountpoint`.
            internal var Mountpoint: Swift.String
            /// Name of the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Name`.
            internal var Name: Swift.String
            /// The driver specific options used when creating the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The driver specific options used when creating the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Options`.
            internal var Options: Components.Schemas.Volume.OptionsPayload
            /// The level at which the volume exists. Either `global` for cluster-wide,
            /// or `local` for machine level.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Scope`.
            internal var Scope: Swift.String
            /// Low-level details about the volume, provided by the volume driver.
            /// Details are returned as a map with key/value pairs:
            /// `{"key":"value","key2":"value2"}`.
            ///
            /// The `Status` field is optional, and is omitted if the volume driver
            /// does not support this feature.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Status`.
            internal struct StatusPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `StatusPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Low-level details about the volume, provided by the volume driver.
            /// Details are returned as a map with key/value pairs:
            /// `{"key":"value","key2":"value2"}`.
            ///
            /// The `Status` field is optional, and is omitted if the volume driver
            /// does not support this feature.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Status`.
            internal var Status: Components.Schemas.Volume.StatusPayload?
            /// - Remark: Generated from `#/components/schemas/Volume/UsageData`.
            internal var UsageData: Components.Schemas.UsageData?
            /// Creates a new `Volume`.
            ///
            /// - Parameters:
            ///   - ClusterVolume:
            ///   - CreatedAt: Date/Time the volume was created.
            ///   - Driver: Name of the volume driver used by the volume.
            ///   - Labels: User-defined key/value metadata.
            ///   - Mountpoint: Mount path of the volume on the host.
            ///   - Name: Name of the volume.
            ///   - Options: The driver specific options used when creating the volume.
            ///   - Scope: The level at which the volume exists. Either `global` for cluster-wide,
            ///   - Status: Low-level details about the volume, provided by the volume driver.
            ///   - UsageData:
            internal init(
                ClusterVolume: Components.Schemas.ClusterVolume? = nil,
                CreatedAt: Swift.String? = nil,
                Driver: Swift.String,
                Labels: Components.Schemas.Volume.LabelsPayload,
                Mountpoint: Swift.String,
                Name: Swift.String,
                Options: Components.Schemas.Volume.OptionsPayload,
                Scope: Swift.String,
                Status: Components.Schemas.Volume.StatusPayload? = nil,
                UsageData: Components.Schemas.UsageData? = nil
            ) {
                self.ClusterVolume = ClusterVolume
                self.CreatedAt = CreatedAt
                self.Driver = Driver
                self.Labels = Labels
                self.Mountpoint = Mountpoint
                self.Name = Name
                self.Options = Options
                self.Scope = Scope
                self.Status = Status
                self.UsageData = UsageData
            }
            internal enum CodingKeys: String, CodingKey {
                case ClusterVolume
                case CreatedAt
                case Driver
                case Labels
                case Mountpoint
                case Name
                case Options
                case Scope
                case Status
                case UsageData
            }
        }
        /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse`.
        internal struct VolumeConfigResponse: Codable, Hashable, Sendable {
            /// Anonymous indicates that the volume was created as an anonymous
            /// volume for a specific container, and will be removed when any
            /// container using it is removed.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Anonymous`.
            internal var Anonymous: Swift.Bool?
            /// CreatedAt is the date and time the volume was created at. This is not
            /// stored for older Libpod volumes; if so, it will be omitted.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/CreatedAt`.
            internal var CreatedAt: Foundation.Date?
            /// Driver is the driver used to create the volume.
            /// If set to "local" or "", the Local driver (Podman built-in code) is
            /// used to service the volume; otherwise, a volume plugin with the given
            /// name is used to mount and manage the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Driver`.
            internal var Driver: Swift.String?
            /// GID is the GID that the volume was created with.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/GID`.
            internal var GID: Swift.Int64?
            /// Labels includes the volume's configured labels, key:value pairs that
            /// can be passed during volume creation to provide information for third
            /// party tools.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels includes the volume's configured labels, key:value pairs that
            /// can be passed during volume creation to provide information for third
            /// party tools.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Labels`.
            internal var Labels: Components.Schemas.VolumeConfigResponse.LabelsPayload?
            /// LockNumber is the number of the volume's Libpod lock.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/LockNumber`.
            internal var LockNumber: Swift.Int?
            /// MountCount is the number of times this volume has been mounted.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/MountCount`.
            internal var MountCount: Swift.Int?
            /// Mountpoint is the path on the host where the volume is mounted.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Mountpoint`.
            internal var Mountpoint: Swift.String?
            /// Name is the name of the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Name`.
            internal var Name: Swift.String?
            /// NeedsChown indicates that the next time the volume is mounted into
            /// a container, the container will chown the volume to the container process
            /// UID/GID.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/NeedsChown`.
            internal var NeedsChown: Swift.Bool?
            /// NeedsCopyUp indicates that the next time the volume is mounted into
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/NeedsCopyUp`.
            internal var NeedsCopyUp: Swift.Bool?
            /// Options is a set of options that were used when creating the volume.
            /// For the Local driver, these are mount options that will be used to
            /// determine how a local filesystem is mounted; they are handled as
            /// parameters to Mount in a manner described in the volume create
            /// manpage.
            /// For non-local drivers, these are passed as-is to the volume plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Options is a set of options that were used when creating the volume.
            /// For the Local driver, these are mount options that will be used to
            /// determine how a local filesystem is mounted; they are handled as
            /// parameters to Mount in a manner described in the volume create
            /// manpage.
            /// For non-local drivers, these are passed as-is to the volume plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Options`.
            internal var Options: Components.Schemas.VolumeConfigResponse.OptionsPayload?
            /// Scope is unused and provided solely for Docker compatibility. It is
            /// unconditionally set to "local".
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Scope`.
            internal var Scope: Swift.String?
            /// Status is used to return information on the volume's current state,
            /// if the volume was created using a volume plugin (uses a Driver that
            /// is not the local driver).
            /// Status is provided to us by an external program, so no guarantees are
            /// made about its format or contents. Further, it is an optional field,
            /// so it may not be set even in cases where a volume plugin is in use.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Status`.
            internal struct StatusPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer]
                /// Creates a new `StatusPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: OpenAPIRuntime.OpenAPIValueContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Status is used to return information on the volume's current state,
            /// if the volume was created using a volume plugin (uses a Driver that
            /// is not the local driver).
            /// Status is provided to us by an external program, so no guarantees are
            /// made about its format or contents. Further, it is an optional field,
            /// so it may not be set even in cases where a volume plugin is in use.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Status`.
            internal var Status: Components.Schemas.VolumeConfigResponse.StatusPayload?
            /// StorageID is the ID of the container backing the volume in c/storage.
            /// Only used with Image Volumes.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/StorageID`.
            internal var StorageID: Swift.String?
            /// Timeout is the specified driver timeout if given
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/Timeout`.
            internal var Timeout: Swift.Int?
            /// UID is the UID that the volume was created with.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeConfigResponse/UID`.
            internal var UID: Swift.Int64?
            /// Creates a new `VolumeConfigResponse`.
            ///
            /// - Parameters:
            ///   - Anonymous: Anonymous indicates that the volume was created as an anonymous
            ///   - CreatedAt: CreatedAt is the date and time the volume was created at. This is not
            ///   - Driver: Driver is the driver used to create the volume.
            ///   - GID: GID is the GID that the volume was created with.
            ///   - Labels: Labels includes the volume's configured labels, key:value pairs that
            ///   - LockNumber: LockNumber is the number of the volume's Libpod lock.
            ///   - MountCount: MountCount is the number of times this volume has been mounted.
            ///   - Mountpoint: Mountpoint is the path on the host where the volume is mounted.
            ///   - Name: Name is the name of the volume.
            ///   - NeedsChown: NeedsChown indicates that the next time the volume is mounted into
            ///   - NeedsCopyUp: NeedsCopyUp indicates that the next time the volume is mounted into
            ///   - Options: Options is a set of options that were used when creating the volume.
            ///   - Scope: Scope is unused and provided solely for Docker compatibility. It is
            ///   - Status: Status is used to return information on the volume's current state,
            ///   - StorageID: StorageID is the ID of the container backing the volume in c/storage.
            ///   - Timeout: Timeout is the specified driver timeout if given
            ///   - UID: UID is the UID that the volume was created with.
            internal init(
                Anonymous: Swift.Bool? = nil,
                CreatedAt: Foundation.Date? = nil,
                Driver: Swift.String? = nil,
                GID: Swift.Int64? = nil,
                Labels: Components.Schemas.VolumeConfigResponse.LabelsPayload? = nil,
                LockNumber: Swift.Int? = nil,
                MountCount: Swift.Int? = nil,
                Mountpoint: Swift.String? = nil,
                Name: Swift.String? = nil,
                NeedsChown: Swift.Bool? = nil,
                NeedsCopyUp: Swift.Bool? = nil,
                Options: Components.Schemas.VolumeConfigResponse.OptionsPayload? = nil,
                Scope: Swift.String? = nil,
                Status: Components.Schemas.VolumeConfigResponse.StatusPayload? = nil,
                StorageID: Swift.String? = nil,
                Timeout: Swift.Int? = nil,
                UID: Swift.Int64? = nil
            ) {
                self.Anonymous = Anonymous
                self.CreatedAt = CreatedAt
                self.Driver = Driver
                self.GID = GID
                self.Labels = Labels
                self.LockNumber = LockNumber
                self.MountCount = MountCount
                self.Mountpoint = Mountpoint
                self.Name = Name
                self.NeedsChown = NeedsChown
                self.NeedsCopyUp = NeedsCopyUp
                self.Options = Options
                self.Scope = Scope
                self.Status = Status
                self.StorageID = StorageID
                self.Timeout = Timeout
                self.UID = UID
            }
            internal enum CodingKeys: String, CodingKey {
                case Anonymous
                case CreatedAt
                case Driver
                case GID
                case Labels
                case LockNumber
                case MountCount
                case Mountpoint
                case Name
                case NeedsChown
                case NeedsCopyUp
                case Options
                case Scope
                case Status
                case StorageID
                case Timeout
                case UID
            }
        }
        /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions`.
        internal struct VolumeCreateOptions: Codable, Hashable, Sendable {
            /// Volume driver to use
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Driver`.
            internal var Driver: Swift.String?
            /// Ignore existing volumes
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/IgnoreIfExists`.
            internal var IgnoreIfExists: Swift.Bool?
            /// User-defined key/value metadata. Provided for compatibility
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Label`.
            internal struct LabelPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata. Provided for compatibility
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Label`.
            internal var Label: Components.Schemas.VolumeCreateOptions.LabelPayload?
            /// User-defined key/value metadata. Preferred field, will override Label
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata. Preferred field, will override Label
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Labels`.
            internal var Labels: Components.Schemas.VolumeCreateOptions.LabelsPayload?
            /// New volume's name. Can be left blank
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Name`.
            internal var Name: Swift.String?
            /// Mapping of driver options and values.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Options`.
            internal struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Mapping of driver options and values.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Options`.
            internal var Options: Components.Schemas.VolumeCreateOptions.OptionsPayload?
            /// Creates a new `VolumeCreateOptions`.
            ///
            /// - Parameters:
            ///   - Driver: Volume driver to use
            ///   - IgnoreIfExists: Ignore existing volumes
            ///   - Label: User-defined key/value metadata. Provided for compatibility
            ///   - Labels: User-defined key/value metadata. Preferred field, will override Label
            ///   - Name: New volume's name. Can be left blank
            ///   - Options: Mapping of driver options and values.
            internal init(
                Driver: Swift.String? = nil,
                IgnoreIfExists: Swift.Bool? = nil,
                Label: Components.Schemas.VolumeCreateOptions.LabelPayload? = nil,
                Labels: Components.Schemas.VolumeCreateOptions.LabelsPayload? = nil,
                Name: Swift.String? = nil,
                Options: Components.Schemas.VolumeCreateOptions.OptionsPayload? = nil
            ) {
                self.Driver = Driver
                self.IgnoreIfExists = IgnoreIfExists
                self.Label = Label
                self.Labels = Labels
                self.Name = Name
                self.Options = Options
            }
            internal enum CodingKeys: String, CodingKey {
                case Driver
                case IgnoreIfExists
                case Label
                case Labels
                case Name
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/VolumeOptions`.
        internal struct VolumeOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VolumeOptions/DriverConfig`.
            internal var DriverConfig: Components.Schemas.Driver?
            /// - Remark: Generated from `#/components/schemas/VolumeOptions/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/VolumeOptions/Labels`.
            internal var Labels: Components.Schemas.VolumeOptions.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/VolumeOptions/NoCopy`.
            internal var NoCopy: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/VolumeOptions/Subpath`.
            internal var Subpath: Swift.String?
            /// Creates a new `VolumeOptions`.
            ///
            /// - Parameters:
            ///   - DriverConfig:
            ///   - Labels:
            ///   - NoCopy:
            ///   - Subpath:
            internal init(
                DriverConfig: Components.Schemas.Driver? = nil,
                Labels: Components.Schemas.VolumeOptions.LabelsPayload? = nil,
                NoCopy: Swift.Bool? = nil,
                Subpath: Swift.String? = nil
            ) {
                self.DriverConfig = DriverConfig
                self.Labels = Labels
                self.NoCopy = NoCopy
                self.Subpath = Subpath
            }
            internal enum CodingKeys: String, CodingKey {
                case DriverConfig
                case Labels
                case NoCopy
                case Subpath
            }
        }
        /// - Remark: Generated from `#/components/schemas/VolumeRmReport`.
        internal struct VolumeRmReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VolumeRmReport/Err`.
            internal var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VolumeRmReport/Id`.
            internal var Id: Swift.String?
            /// Creates a new `VolumeRmReport`.
            ///
            /// - Parameters:
            ///   - Err:
            ///   - Id:
            internal init(
                Err: Swift.String? = nil,
                Id: Swift.String? = nil
            ) {
                self.Err = Err
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Err
                case Id
            }
        }
        /// WaitExitError container waiting error, if any
        ///
        /// - Remark: Generated from `#/components/schemas/WaitExitError`.
        internal struct WaitExitError: Codable, Hashable, Sendable {
            /// Details of an error
            ///
            /// - Remark: Generated from `#/components/schemas/WaitExitError/Message`.
            internal var Message: Swift.String?
            /// Creates a new `WaitExitError`.
            ///
            /// - Parameters:
            ///   - Message: Details of an error
            internal init(Message: Swift.String? = nil) {
                self.Message = Message
            }
            internal enum CodingKeys: String, CodingKey {
                case Message
            }
        }
        /// OK response to ContainerWait operation
        ///
        /// - Remark: Generated from `#/components/schemas/WaitResponse`.
        internal struct WaitResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WaitResponse/Error`.
            internal var _Error: Components.Schemas.WaitExitError?
            /// Exit code of the container
            ///
            /// - Remark: Generated from `#/components/schemas/WaitResponse/StatusCode`.
            internal var StatusCode: Swift.Int64
            /// Creates a new `WaitResponse`.
            ///
            /// - Parameters:
            ///   - _Error:
            ///   - StatusCode: Exit code of the container
            internal init(
                _Error: Components.Schemas.WaitExitError? = nil,
                StatusCode: Swift.Int64
            ) {
                self._Error = _Error
                self.StatusCode = StatusCode
            }
            internal enum CodingKeys: String, CodingKey {
                case _Error = "Error"
                case StatusCode
            }
        }
        /// WeightDevice is a structure that holds device:weight pair
        ///
        /// - Remark: Generated from `#/components/schemas/WeightDevice`.
        internal struct WeightDevice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WeightDevice/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/WeightDevice/Weight`.
            internal var Weight: Swift.Int?
            /// Creates a new `WeightDevice`.
            ///
            /// - Parameters:
            ///   - Path:
            ///   - Weight:
            internal init(
                Path: Swift.String? = nil,
                Weight: Swift.Int? = nil
            ) {
                self.Path = Path
                self.Weight = Weight
            }
            internal enum CodingKeys: String, CodingKey {
                case Path
                case Weight
            }
        }
        /// - Remark: Generated from `#/components/schemas/cacheLibImage`.
        internal typealias cacheLibImage = OpenAPIRuntime.OpenAPIObjectContainer
        /// Container update
        ///
        /// - Remark: Generated from `#/components/schemas/containerUpdateRequest`.
        internal struct containerUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioDeviceReadBps`.
            internal var BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioDeviceReadIOps`.
            internal var BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioDeviceWriteBps`.
            internal var BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioDeviceWriteIOps`.
            internal var BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioWeight`.
            internal var BlkioWeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/BlkioWeightDevice`.
            internal var BlkioWeightDevice: [Components.Schemas.WeightDevice]?
            /// Applicable to UNIX platforms
            ///
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CgroupParent`.
            internal var CgroupParent: Swift.String?
            /// Applicable to Windows
            ///
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuCount`.
            internal var CpuCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuPercent`.
            internal var CpuPercent: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuPeriod`.
            internal var CpuPeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuQuota`.
            internal var CpuQuota: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuRealtimePeriod`.
            internal var CpuRealtimePeriod: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuRealtimeRuntime`.
            internal var CpuRealtimeRuntime: Swift.Int64?
            /// Applicable to all platforms
            ///
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpuShares`.
            internal var CpuShares: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpusetCpus`.
            internal var CpusetCpus: Swift.String?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/CpusetMems`.
            internal var CpusetMems: Swift.String?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/DeviceCgroupRules`.
            internal var DeviceCgroupRules: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/DeviceRequests`.
            internal var DeviceRequests: [Components.Schemas.DeviceRequest]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/Devices`.
            internal var Devices: [Components.Schemas.DeviceMapping]?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/IOMaximumBandwidth`.
            internal var IOMaximumBandwidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/IOMaximumIOps`.
            internal var IOMaximumIOps: Swift.Int?
            /// KernelMemory specifies the kernel memory limit (in bytes) for the container.
            /// Deprecated: kernel 5.4 deprecated kmem.limit_in_bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/KernelMemory`.
            internal var KernelMemory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/KernelMemoryTCP`.
            internal var KernelMemoryTCP: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/Memory`.
            internal var Memory: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/MemoryReservation`.
            internal var MemoryReservation: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/MemorySwap`.
            internal var MemorySwap: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/MemorySwappiness`.
            internal var MemorySwappiness: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/NanoCpus`.
            internal var NanoCpus: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/OomKillDisable`.
            internal var OomKillDisable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/PidsLimit`.
            internal var PidsLimit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/RestartPolicy`.
            internal var RestartPolicy: Components.Schemas.RestartPolicy?
            /// - Remark: Generated from `#/components/schemas/containerUpdateRequest/Ulimits`.
            internal var Ulimits: [Components.Schemas.Ulimit]?
            /// Creates a new `containerUpdateRequest`.
            ///
            /// - Parameters:
            ///   - BlkioDeviceReadBps:
            ///   - BlkioDeviceReadIOps:
            ///   - BlkioDeviceWriteBps:
            ///   - BlkioDeviceWriteIOps:
            ///   - BlkioWeight:
            ///   - BlkioWeightDevice:
            ///   - CgroupParent: Applicable to UNIX platforms
            ///   - CpuCount: Applicable to Windows
            ///   - CpuPercent:
            ///   - CpuPeriod:
            ///   - CpuQuota:
            ///   - CpuRealtimePeriod:
            ///   - CpuRealtimeRuntime:
            ///   - CpuShares: Applicable to all platforms
            ///   - CpusetCpus:
            ///   - CpusetMems:
            ///   - DeviceCgroupRules:
            ///   - DeviceRequests:
            ///   - Devices:
            ///   - IOMaximumBandwidth:
            ///   - IOMaximumIOps:
            ///   - KernelMemory: KernelMemory specifies the kernel memory limit (in bytes) for the container.
            ///   - KernelMemoryTCP:
            ///   - Memory:
            ///   - MemoryReservation:
            ///   - MemorySwap:
            ///   - MemorySwappiness:
            ///   - NanoCpus:
            ///   - OomKillDisable:
            ///   - PidsLimit:
            ///   - RestartPolicy:
            ///   - Ulimits:
            internal init(
                BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: [Components.Schemas.WeightDevice]? = nil,
                CgroupParent: Swift.String? = nil,
                CpuCount: Swift.Int64? = nil,
                CpuPercent: Swift.Int64? = nil,
                CpuPeriod: Swift.Int64? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int64? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpuShares: Swift.Int64? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                DeviceCgroupRules: [Swift.String]? = nil,
                DeviceRequests: [Components.Schemas.DeviceRequest]? = nil,
                Devices: [Components.Schemas.DeviceMapping]? = nil,
                IOMaximumBandwidth: Swift.Int? = nil,
                IOMaximumIOps: Swift.Int? = nil,
                KernelMemory: Swift.Int64? = nil,
                KernelMemoryTCP: Swift.Int64? = nil,
                Memory: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                NanoCpus: Swift.Int64? = nil,
                OomKillDisable: Swift.Bool? = nil,
                PidsLimit: Swift.Int64? = nil,
                RestartPolicy: Components.Schemas.RestartPolicy? = nil,
                Ulimits: [Components.Schemas.Ulimit]? = nil
            ) {
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.CgroupParent = CgroupParent
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpuShares = CpuShares
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.DeviceCgroupRules = DeviceCgroupRules
                self.DeviceRequests = DeviceRequests
                self.Devices = Devices
                self.IOMaximumBandwidth = IOMaximumBandwidth
                self.IOMaximumIOps = IOMaximumIOps
                self.KernelMemory = KernelMemory
                self.KernelMemoryTCP = KernelMemoryTCP
                self.Memory = Memory
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.NanoCpus = NanoCpus
                self.OomKillDisable = OomKillDisable
                self.PidsLimit = PidsLimit
                self.RestartPolicy = RestartPolicy
                self.Ulimits = Ulimits
            }
            internal enum CodingKeys: String, CodingKey {
                case BlkioDeviceReadBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteBps
                case BlkioDeviceWriteIOps
                case BlkioWeight
                case BlkioWeightDevice
                case CgroupParent
                case CpuCount
                case CpuPercent
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpuShares
                case CpusetCpus
                case CpusetMems
                case DeviceCgroupRules
                case DeviceRequests
                case Devices
                case IOMaximumBandwidth
                case IOMaximumIOps
                case KernelMemory
                case KernelMemoryTCP
                case Memory
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case NanoCpus
                case OomKillDisable
                case PidsLimit
                case RestartPolicy
                case Ulimits
            }
        }
        /// - Remark: Generated from `#/components/schemas/networkConnectRequest`.
        internal typealias networkConnectRequest = Components.Schemas.ConnectOptions
        /// - Remark: Generated from `#/components/schemas/networkConnectRequestLibpod`.
        internal typealias networkConnectRequestLibpod = Components.Schemas.NetworkConnectOptions
        /// - Remark: Generated from `#/components/schemas/networkCreate`.
        internal typealias networkCreate = Components.Schemas.CreateRequest
        /// Network create
        ///
        /// - Remark: Generated from `#/components/schemas/networkCreateLibpod`.
        internal struct networkCreateLibpod: Codable, Hashable, Sendable {
            /// Created contains the timestamp when this network was created.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/created`.
            internal var created: Foundation.Date?
            /// DNSEnabled is whether name resolution is active for container on
            /// this Network. Only supported with the bridge driver.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/dns_enabled`.
            internal var dns_enabled: Swift.Bool?
            /// Driver for this Network, e.g. bridge, macvlan...
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/driver`.
            internal var driver: Swift.String?
            /// ID of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/id`.
            internal var id: Swift.String?
            /// Internal is whether the Network should not have external routes
            /// to public or other Networks.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/internal`.
            internal var _internal: Swift.Bool?
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/ipam_options`.
            internal struct ipam_optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ipam_optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// IPAMOptions contains options used for the ip assignment.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/ipam_options`.
            internal var ipam_options: Components.Schemas.networkCreateLibpod.ipam_optionsPayload?
            /// IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/ipv6_enabled`.
            internal var ipv6_enabled: Swift.Bool?
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/labels`.
            internal struct labelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `labelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Labels is a set of key-value labels that have been applied to the
            /// Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/labels`.
            internal var labels: Components.Schemas.networkCreateLibpod.labelsPayload?
            /// Name of the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/name`.
            internal var name: Swift.String?
            /// List of custom DNS server for podman's DNS resolver at network level,
            /// all the containers attached to this network will consider resolvers
            /// configured at network level.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/network_dns_servers`.
            internal var network_dns_servers: [Swift.String]?
            /// NetworkInterface is the network interface name on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/network_interface`.
            internal var network_interface: Swift.String?
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/options`.
            internal struct optionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `optionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Options is a set of key-value options that have been applied to
            /// the Network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/options`.
            internal var options: Components.Schemas.networkCreateLibpod.optionsPayload?
            /// Routes to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/routes`.
            internal var routes: [Components.Schemas.Route]?
            /// Subnets to use for this network.
            ///
            /// - Remark: Generated from `#/components/schemas/networkCreateLibpod/subnets`.
            internal var subnets: [Components.Schemas.Subnet]?
            /// Creates a new `networkCreateLibpod`.
            ///
            /// - Parameters:
            ///   - created: Created contains the timestamp when this network was created.
            ///   - dns_enabled: DNSEnabled is whether name resolution is active for container on
            ///   - driver: Driver for this Network, e.g. bridge, macvlan...
            ///   - id: ID of the Network.
            ///   - _internal: Internal is whether the Network should not have external routes
            ///   - ipam_options: IPAMOptions contains options used for the ip assignment.
            ///   - ipv6_enabled: IPv6Enabled if set to true an ipv6 subnet should be created for this net.
            ///   - labels: Labels is a set of key-value labels that have been applied to the
            ///   - name: Name of the Network.
            ///   - network_dns_servers: List of custom DNS server for podman's DNS resolver at network level,
            ///   - network_interface: NetworkInterface is the network interface name on the host.
            ///   - options: Options is a set of key-value options that have been applied to
            ///   - routes: Routes to use for this network.
            ///   - subnets: Subnets to use for this network.
            internal init(
                created: Foundation.Date? = nil,
                dns_enabled: Swift.Bool? = nil,
                driver: Swift.String? = nil,
                id: Swift.String? = nil,
                _internal: Swift.Bool? = nil,
                ipam_options: Components.Schemas.networkCreateLibpod.ipam_optionsPayload? = nil,
                ipv6_enabled: Swift.Bool? = nil,
                labels: Components.Schemas.networkCreateLibpod.labelsPayload? = nil,
                name: Swift.String? = nil,
                network_dns_servers: [Swift.String]? = nil,
                network_interface: Swift.String? = nil,
                options: Components.Schemas.networkCreateLibpod.optionsPayload? = nil,
                routes: [Components.Schemas.Route]? = nil,
                subnets: [Components.Schemas.Subnet]? = nil
            ) {
                self.created = created
                self.dns_enabled = dns_enabled
                self.driver = driver
                self.id = id
                self._internal = _internal
                self.ipam_options = ipam_options
                self.ipv6_enabled = ipv6_enabled
                self.labels = labels
                self.name = name
                self.network_dns_servers = network_dns_servers
                self.network_interface = network_interface
                self.options = options
                self.routes = routes
                self.subnets = subnets
            }
            internal enum CodingKeys: String, CodingKey {
                case created
                case dns_enabled
                case driver
                case id
                case _internal = "internal"
                case ipam_options
                case ipv6_enabled
                case labels
                case name
                case network_dns_servers
                case network_interface
                case options
                case routes
                case subnets
            }
        }
        /// - Remark: Generated from `#/components/schemas/networkDisconnectRequest`.
        internal typealias networkDisconnectRequest = Components.Schemas.DisconnectOptions
        /// - Remark: Generated from `#/components/schemas/networkUpdateRequestLibpod`.
        internal typealias networkUpdateRequestLibpod = Components.Schemas.NetworkUpdateOptions
        /// Details for creating a volume
        ///
        /// - Remark: Generated from `#/components/schemas/volumeCreate`.
        internal struct volumeCreate: Codable, Hashable, Sendable {
            /// Name of the volume driver to use.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/Driver`.
            internal var Driver: Swift.String
            /// A mapping of driver options and values. These options are
            /// passed directly to the driver and are driver specific.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/DriverOpts`.
            internal struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of driver options and values. These options are
            /// passed directly to the driver and are driver specific.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/DriverOpts`.
            internal var DriverOpts: Components.Schemas.volumeCreate.DriverOptsPayload
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/Labels`.
            internal struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/Labels`.
            internal var Labels: Components.Schemas.volumeCreate.LabelsPayload
            /// The new volume's name. If not specified, Docker generates a name.
            ///
            /// - Remark: Generated from `#/components/schemas/volumeCreate/Name`.
            internal var Name: Swift.String
            /// Creates a new `volumeCreate`.
            ///
            /// - Parameters:
            ///   - Driver: Name of the volume driver to use.
            ///   - DriverOpts: A mapping of driver options and values. These options are
            ///   - Labels: User-defined key/value metadata.
            ///   - Name: The new volume's name. If not specified, Docker generates a name.
            internal init(
                Driver: Swift.String,
                DriverOpts: Components.Schemas.volumeCreate.DriverOptsPayload,
                Labels: Components.Schemas.volumeCreate.LabelsPayload,
                Name: Swift.String
            ) {
                self.Driver = Driver
                self.DriverOpts = DriverOpts
                self.Labels = Labels
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Driver
                case DriverOpts
                case Labels
                case Name
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/networkDisconnectRequest`.
        internal enum networkDisconnectRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/networkDisconnectRequest/content/application\/json`.
            case json(Components.Schemas.networkDisconnectRequest)
            /// - Remark: Generated from `#/components/requestBodies/networkDisconnectRequest/content/application\/x-tar`.
            case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
        }
        /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl`.
        internal enum ContainerExecControl: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json`.
            internal struct jsonPayload: Codable, Hashable, Sendable {
                /// Attach to stderr of the exec command
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/AttachStderr`.
                internal var AttachStderr: Swift.Bool?
                /// Attach to stdin of the exec command
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/AttachStdin`.
                internal var AttachStdin: Swift.Bool?
                /// Attach to stdout of the exec command
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/AttachStdout`.
                internal var AttachStdout: Swift.Bool?
                /// Command to run, as a string or array of strings.
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/Cmd`.
                internal var Cmd: [Swift.String]?
                /// "Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _."
                ///
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/DetachKeys`.
                internal var DetachKeys: Swift.String?
                /// A list of environment variables in the form ["VAR=value", ...]
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/Env`.
                internal var Env: [Swift.String]?
                /// Runs the exec process with extended privileges
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/Privileged`.
                internal var Privileged: Swift.Bool?
                /// Allocate a pseudo-TTY
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/Tty`.
                internal var Tty: Swift.Bool?
                /// "The user, and optionally, group to run the exec process inside the container. Format is one of: user, user:group, uid, or uid:gid."
                ///
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/User`.
                internal var User: Swift.String?
                /// The working directory for the exec process inside the container.
                ///
                /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/json/WorkingDir`.
                internal var WorkingDir: Swift.String?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - AttachStderr: Attach to stderr of the exec command
                ///   - AttachStdin: Attach to stdin of the exec command
                ///   - AttachStdout: Attach to stdout of the exec command
                ///   - Cmd: Command to run, as a string or array of strings.
                ///   - DetachKeys: "Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _."
                ///   - Env: A list of environment variables in the form ["VAR=value", ...]
                ///   - Privileged: Runs the exec process with extended privileges
                ///   - Tty: Allocate a pseudo-TTY
                ///   - User: "The user, and optionally, group to run the exec process inside the container. Format is one of: user, user:group, uid, or uid:gid."
                ///   - WorkingDir: The working directory for the exec process inside the container.
                internal init(
                    AttachStderr: Swift.Bool? = nil,
                    AttachStdin: Swift.Bool? = nil,
                    AttachStdout: Swift.Bool? = nil,
                    Cmd: [Swift.String]? = nil,
                    DetachKeys: Swift.String? = nil,
                    Env: [Swift.String]? = nil,
                    Privileged: Swift.Bool? = nil,
                    Tty: Swift.Bool? = nil,
                    User: Swift.String? = nil,
                    WorkingDir: Swift.String? = nil
                ) {
                    self.AttachStderr = AttachStderr
                    self.AttachStdin = AttachStdin
                    self.AttachStdout = AttachStdout
                    self.Cmd = Cmd
                    self.DetachKeys = DetachKeys
                    self.Env = Env
                    self.Privileged = Privileged
                    self.Tty = Tty
                    self.User = User
                    self.WorkingDir = WorkingDir
                }
                internal enum CodingKeys: String, CodingKey {
                    case AttachStderr
                    case AttachStdin
                    case AttachStdout
                    case Cmd
                    case DetachKeys
                    case Env
                    case Privileged
                    case Tty
                    case User
                    case WorkingDir
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/content/application\/json`.
            case json(Components.RequestBodies.ContainerExecControl.jsonPayload)
            /// - Remark: Generated from `#/components/requestBodies/ContainerExecControl/content/application\/x-tar`.
            case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
        }
        /// - Remark: Generated from `#/components/requestBodies/PutContainerArchiveRequest`.
        internal enum PutContainerArchiveRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/PutContainerArchiveRequest/content/application\/json`.
            case json(Swift.String)
            /// - Remark: Generated from `#/components/requestBodies/PutContainerArchiveRequest/content/application\/x-tar`.
            case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
        }
        /// - Remark: Generated from `#/components/requestBodies/KubeApplyLibpodRequest`.
        internal enum KubeApplyLibpodRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/KubeApplyLibpodRequest/content/application\/json`.
            case json(Swift.String)
            /// - Remark: Generated from `#/components/requestBodies/KubeApplyLibpodRequest/content/application\/x-tar`.
            case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {
        internal struct NoSuchSecret: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NoSuchSecret/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// API root cause formatted for automated parsing
                    ///
                    /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/json/cause`.
                    internal var cause: Swift.String?
                    /// human error message, formatted for a human to read
                    ///
                    /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/json/message`.
                    internal var message: Swift.String?
                    /// HTTP response code
                    ///
                    /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/json/response`.
                    internal var response: Swift.Int64?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cause: API root cause formatted for automated parsing
                    ///   - message: human error message, formatted for a human to read
                    ///   - response: HTTP response code
                    internal init(
                        cause: Swift.String? = nil,
                        message: Swift.String? = nil,
                        response: Swift.Int64? = nil
                    ) {
                        self.cause = cause
                        self.message = message
                        self.response = response
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cause
                        case message
                        case response
                    }
                }
                /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/application\/json`.
                case json(Components.Responses.NoSuchSecret.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.NoSuchSecret.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/NoSuchSecret/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.NoSuchSecret.Body
            /// Creates a new `NoSuchSecret`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.NoSuchSecret.Body) {
                self.body = body
            }
        }
        internal struct SecretCreateResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content/json/ID`.
                    internal var ID: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ID:
                    internal init(ID: Swift.String? = nil) {
                        self.ID = ID
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case ID
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content/application\/json`.
                case json(Components.Responses.SecretCreateResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.SecretCreateResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretCreateResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretCreateResponse.Body
            /// Creates a new `SecretCreateResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretCreateResponse.Body) {
                self.body = body
            }
        }
        internal struct SecretInUse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretInUse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretInUse/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// API root cause formatted for automated parsing
                    ///
                    /// - Remark: Generated from `#/components/responses/SecretInUse/content/json/cause`.
                    internal var cause: Swift.String?
                    /// human error message, formatted for a human to read
                    ///
                    /// - Remark: Generated from `#/components/responses/SecretInUse/content/json/message`.
                    internal var message: Swift.String?
                    /// HTTP response code
                    ///
                    /// - Remark: Generated from `#/components/responses/SecretInUse/content/json/response`.
                    internal var response: Swift.Int64?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - cause: API root cause formatted for automated parsing
                    ///   - message: human error message, formatted for a human to read
                    ///   - response: HTTP response code
                    internal init(
                        cause: Swift.String? = nil,
                        message: Swift.String? = nil,
                        response: Swift.Int64? = nil
                    ) {
                        self.cause = cause
                        self.message = message
                        self.response = response
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cause
                        case message
                        case response
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInUse/content/application\/json`.
                case json(Components.Responses.SecretInUse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.SecretInUse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInUse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInUse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretInUse.Body
            /// Creates a new `SecretInUse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretInUse.Body) {
                self.body = body
            }
        }
        internal struct SecretInspectCompatResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretInspectCompatResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretInspectCompatResponse/content/application\/json`.
                case json(Components.Schemas.SecretInfoReportCompat)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SecretInfoReportCompat {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInspectCompatResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInspectCompatResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretInspectCompatResponse.Body
            /// Creates a new `SecretInspectCompatResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretInspectCompatResponse.Body) {
                self.body = body
            }
        }
        internal struct SecretInspectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretInspectResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretInspectResponse/content/application\/json`.
                case json(Components.Schemas.SecretInfoReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SecretInfoReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInspectResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretInspectResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretInspectResponse.Body
            /// Creates a new `SecretInspectResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretInspectResponse.Body) {
                self.body = body
            }
        }
        internal struct SecretListCompatResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretListCompatResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretListCompatResponse/content/application\/json`.
                case json([Components.Schemas.SecretInfoReportCompat])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.SecretInfoReportCompat] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretListCompatResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretListCompatResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretListCompatResponse.Body
            /// Creates a new `SecretListCompatResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretListCompatResponse.Body) {
                self.body = body
            }
        }
        internal struct SecretListResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SecretListResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SecretListResponse/content/application\/json`.
                case json([Components.Schemas.SecretInfoReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.SecretInfoReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretListResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/SecretListResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.SecretListResponse.Body
            /// Creates a new `SecretListResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.SecretListResponse.Body) {
                self.body = body
            }
        }
        internal struct badParamError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/badParamError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/badParamError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/badParamError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/badParamError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.badParamError.Body
            /// Creates a new `badParamError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.badParamError.Body) {
                self.body = body
            }
        }
        internal struct conflictError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflictError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflictError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/conflictError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/conflictError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.conflictError.Body
            /// Creates a new `conflictError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.conflictError.Body) {
                self.body = body
            }
        }
        internal struct containerAlreadyStartedError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerAlreadyStartedError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerAlreadyStartedError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerAlreadyStartedError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerAlreadyStartedError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerAlreadyStartedError.Body
            /// Creates a new `containerAlreadyStartedError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerAlreadyStartedError.Body) {
                self.body = body
            }
        }
        internal struct containerAlreadyStoppedError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerAlreadyStoppedError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerAlreadyStoppedError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerAlreadyStoppedError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerAlreadyStoppedError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerAlreadyStoppedError.Body
            /// Creates a new `containerAlreadyStoppedError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerAlreadyStoppedError.Body) {
                self.body = body
            }
        }
        internal struct containerCreateResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerCreateResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerCreateResponse/content/application\/json`.
                case json(Components.Schemas.ContainerCreateResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ContainerCreateResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerCreateResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerCreateResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerCreateResponse.Body
            /// Creates a new `containerCreateResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerCreateResponse.Body) {
                self.body = body
            }
        }
        internal struct containerInspectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerInspectResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerInspectResponse/content/application\/json`.
                case json(Components.Schemas.ContainerJSON)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ContainerJSON {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerInspectResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerInspectResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerInspectResponse.Body
            /// Creates a new `containerInspectResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerInspectResponse.Body) {
                self.body = body
            }
        }
        internal struct containerInspectResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerInspectResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerInspectResponseLibpod/content/application\/json`.
                case json(Components.Schemas.InspectContainerData)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.InspectContainerData {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerInspectResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerInspectResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerInspectResponseLibpod.Body
            /// Creates a new `containerInspectResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerInspectResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct containerNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerNotFound.Body
            /// Creates a new `containerNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerNotFound.Body) {
                self.body = body
            }
        }
        internal struct containerRemoveLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerRemoveLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerRemoveLibpod/content/application\/json`.
                case json([Components.Schemas.LibpodContainersRmReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.LibpodContainersRmReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerRemoveLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerRemoveLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerRemoveLibpod.Body
            /// Creates a new `containerRemoveLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerRemoveLibpod.Body) {
                self.body = body
            }
        }
        internal struct containerStats: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerStats/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerStats/content/application\/json`.
                case json(Components.Schemas.ContainerStats)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ContainerStats {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerStats/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerStats/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerStats.Body
            /// Creates a new `containerStats`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerStats.Body) {
                self.body = body
            }
        }
        internal struct containerTopResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerTopResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerTopResponse/content/application\/json`.
                case json(Components.Schemas.ContainerTopOKBody)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ContainerTopOKBody {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerTopResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerTopResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerTopResponse.Body
            /// Creates a new `containerTopResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerTopResponse.Body) {
                self.body = body
            }
        }
        internal struct containerUpdateResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content/json/ID`.
                    internal var ID: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ID:
                    internal init(ID: Swift.String? = nil) {
                        self.ID = ID
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case ID
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content/application\/json`.
                case json(Components.Responses.containerUpdateResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.containerUpdateResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerUpdateResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerUpdateResponse.Body
            /// Creates a new `containerUpdateResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerUpdateResponse.Body) {
                self.body = body
            }
        }
        internal struct containerWaitResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containerWaitResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/json/Error`.
                    internal struct _ErrorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/json/Error/Message`.
                        internal var Message: Swift.String?
                        /// Creates a new `_ErrorPayload`.
                        ///
                        /// - Parameters:
                        ///   - Message:
                        internal init(Message: Swift.String? = nil) {
                            self.Message = Message
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case Message
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/json/Error`.
                    internal var _Error: Components.Responses.containerWaitResponse.Body.jsonPayload._ErrorPayload?
                    /// container exit code
                    ///
                    /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/json/StatusCode`.
                    internal var StatusCode: Swift.Int64?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - _Error:
                    ///   - StatusCode: container exit code
                    internal init(
                        _Error: Components.Responses.containerWaitResponse.Body.jsonPayload._ErrorPayload? = nil,
                        StatusCode: Swift.Int64? = nil
                    ) {
                        self._Error = _Error
                        self.StatusCode = StatusCode
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case _Error = "Error"
                        case StatusCode
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/application\/json`.
                case json(Components.Responses.containerWaitResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.containerWaitResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containerWaitResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containerWaitResponse.Body
            /// Creates a new `containerWaitResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containerWaitResponse.Body) {
                self.body = body
            }
        }
        internal struct containersList: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containersList/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containersList/content/application\/json`.
                case json([Components.Schemas.Container])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.Container] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersList/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersList/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containersList.Body
            /// Creates a new `containersList`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containersList.Body) {
                self.body = body
            }
        }
        internal struct containersListLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containersListLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containersListLibpod/content/application\/json`.
                case json([Components.Schemas.ListContainer])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.ListContainer] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersListLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersListLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containersListLibpod.Body
            /// Creates a new `containersListLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containersListLibpod.Body) {
                self.body = body
            }
        }
        internal struct containersPrune: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containersPrune/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containersPrune/content/application\/json`.
                case json([Components.Schemas.ContainersPruneReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.ContainersPruneReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersPrune/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersPrune/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containersPrune.Body
            /// Creates a new `containersPrune`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containersPrune.Body) {
                self.body = body
            }
        }
        internal struct containersPruneLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/containersPruneLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/containersPruneLibpod/content/application\/json`.
                case json([Components.Schemas.ContainersPruneReportLibpod])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.ContainersPruneReportLibpod] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersPruneLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/containersPruneLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.containersPruneLibpod.Body
            /// Creates a new `containersPruneLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.containersPruneLibpod.Body) {
                self.body = body
            }
        }
        internal struct execSessionInspect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/execSessionInspect/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/execSessionInspect/content/application\/json`.
                case json(Components.Schemas.InspectExecSession)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.InspectExecSession {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/execSessionInspect/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/execSessionInspect/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.execSessionInspect.Body
            /// Creates a new `execSessionInspect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.execSessionInspect.Body) {
                self.body = body
            }
        }
        internal struct execSessionNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/execSessionNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/execSessionNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/execSessionNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/execSessionNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.execSessionNotFound.Body
            /// Creates a new `execSessionNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.execSessionNotFound.Body) {
                self.body = body
            }
        }
        internal struct healthCheck: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/healthCheck/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/healthCheck/content/application\/json`.
                case json(Components.Schemas.HealthCheckResults)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.HealthCheckResults {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/healthCheck/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/healthCheck/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.healthCheck.Body
            /// Creates a new `healthCheck`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.healthCheck.Body) {
                self.body = body
            }
        }
        internal struct history: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/history/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/history/content/application\/json`.
                case json(Components.Schemas.HistoryResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.HistoryResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/history/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/history/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.history.Body
            /// Creates a new `history`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.history.Body) {
                self.body = body
            }
        }
        internal struct imageDeleteResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/jsonPayload`.
                internal struct jsonPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/jsonPayload/deleted`.
                    internal var deleted: Swift.String?
                    /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/jsonPayload/untagged`.
                    internal var untagged: [Swift.String]?
                    /// Creates a new `jsonPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - deleted:
                    ///   - untagged:
                    internal init(
                        deleted: Swift.String? = nil,
                        untagged: [Swift.String]? = nil
                    ) {
                        self.deleted = deleted
                        self.untagged = untagged
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case deleted
                        case untagged
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/json`.
                internal typealias jsonPayload = [Components.Responses.imageDeleteResponse.Body.jsonPayloadPayload]
                /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/application\/json`.
                case json(Components.Responses.imageDeleteResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.imageDeleteResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageDeleteResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imageDeleteResponse.Body
            /// Creates a new `imageDeleteResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imageDeleteResponse.Body) {
                self.body = body
            }
        }
        internal struct imageInspect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imageInspect/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imageInspect/content/application\/json`.
                case json(Components.Schemas.ImageInspect)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ImageInspect {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageInspect/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageInspect/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imageInspect.Body
            /// Creates a new `imageInspect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imageInspect.Body) {
                self.body = body
            }
        }
        internal struct imageList: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imageList/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imageList/content/application\/json`.
                case json([Components.Schemas.Summary])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.Summary] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageList/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageList/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imageList.Body
            /// Creates a new `imageList`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imageList.Body) {
                self.body = body
            }
        }
        internal struct imageListLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imageListLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imageListLibpod/content/application\/json`.
                case json([Components.Schemas.LibpodImageSummary])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.LibpodImageSummary] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageListLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageListLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imageListLibpod.Body
            /// Creates a new `imageListLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imageListLibpod.Body) {
                self.body = body
            }
        }
        internal struct imageNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imageNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imageNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imageNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imageNotFound.Body
            /// Creates a new `imageNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imageNotFound.Body) {
                self.body = body
            }
        }
        internal struct imagesImportResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesImportResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesImportResponseLibpod/content/application\/json`.
                case json(Components.Schemas.ImageImportReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ImageImportReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesImportResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesImportResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesImportResponseLibpod.Body
            /// Creates a new `imagesImportResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesImportResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct imagesLoadResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesLoadResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesLoadResponseLibpod/content/application\/json`.
                case json(Components.Schemas.ImageLoadReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ImageLoadReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesLoadResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesLoadResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesLoadResponseLibpod.Body
            /// Creates a new `imagesLoadResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesLoadResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct imagesPruneLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesPruneLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesPruneLibpod/content/application\/json`.
                case json([Components.Schemas.PruneReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.PruneReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesPruneLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesPruneLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesPruneLibpod.Body
            /// Creates a new `imagesPruneLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesPruneLibpod.Body) {
                self.body = body
            }
        }
        internal struct imagesPullResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesPullResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesPullResponseLibpod/content/application\/json`.
                case json(Components.Schemas.LibpodImagesPullReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.LibpodImagesPullReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesPullResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesPullResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesPullResponseLibpod.Body
            /// Creates a new `imagesPullResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesPullResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct imagesRemoveResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesRemoveResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesRemoveResponseLibpod/content/application\/json`.
                case json(Components.Schemas.LibpodImagesRemoveReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.LibpodImagesRemoveReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesRemoveResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesRemoveResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesRemoveResponseLibpod.Body
            /// Creates a new `imagesRemoveResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesRemoveResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct imagesScpResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/imagesScpResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/imagesScpResponseLibpod/content/application\/json`.
                case json(Components.Schemas.ScpReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ScpReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesScpResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/imagesScpResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.imagesScpResponseLibpod.Body
            /// Creates a new `imagesScpResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.imagesScpResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct infoResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/infoResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/infoResponse/content/application\/json`.
                case json(Components.Schemas.LibpodInfo)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.LibpodInfo {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/infoResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/infoResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.infoResponse.Body
            /// Creates a new `infoResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.infoResponse.Body) {
                self.body = body
            }
        }
        internal struct inspectImageResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/inspectImageResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/inspectImageResponseLibpod/content/application\/json`.
                case json(Components.Schemas.ImageData)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ImageData {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/inspectImageResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/inspectImageResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.inspectImageResponseLibpod.Body
            /// Creates a new `inspectImageResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.inspectImageResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct internalError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internalError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internalError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/internalError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/internalError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.internalError.Body
            /// Creates a new `internalError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.internalError.Body) {
                self.body = body
            }
        }
        internal struct manifestInspect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/manifestInspect/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/manifestInspect/content/application\/json`.
                case json(Components.Schemas.Schema2ListPublic)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.Schema2ListPublic {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/manifestInspect/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/manifestInspect/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.manifestInspect.Body
            /// Creates a new `manifestInspect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.manifestInspect.Body) {
                self.body = body
            }
        }
        internal struct manifestNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/manifestNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/manifestNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/manifestNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/manifestNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.manifestNotFound.Body
            /// Creates a new `manifestNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.manifestNotFound.Body) {
                self.body = body
            }
        }
        internal struct networkConnectedError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkConnectedError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkConnectedError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkConnectedError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkConnectedError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkConnectedError.Body
            /// Creates a new `networkConnectedError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkConnectedError.Body) {
                self.body = body
            }
        }
        internal struct networkCreateResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkCreateResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkCreateResponse/content/application\/json`.
                case json(Components.Schemas.Network)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.Network {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkCreateResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkCreateResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkCreateResponse.Body
            /// Creates a new `networkCreateResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkCreateResponse.Body) {
                self.body = body
            }
        }
        internal struct networkInspectCompat: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkInspectCompat/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkInspectCompat/content/application\/json`.
                case json(Components.Schemas.Inspect)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.Inspect {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkInspectCompat/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkInspectCompat/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkInspectCompat.Body
            /// Creates a new `networkInspectCompat`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkInspectCompat.Body) {
                self.body = body
            }
        }
        internal struct networkInspectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkInspectResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkInspectResponse/content/application\/json`.
                case json(Components.Schemas.NetworkInspectReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.NetworkInspectReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkInspectResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkInspectResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkInspectResponse.Body
            /// Creates a new `networkInspectResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkInspectResponse.Body) {
                self.body = body
            }
        }
        internal struct networkListCompat: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkListCompat/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkListCompat/content/application\/json`.
                case json([Components.Schemas.Inspect])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.Inspect] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkListCompat/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkListCompat/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkListCompat.Body
            /// Creates a new `networkListCompat`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkListCompat.Body) {
                self.body = body
            }
        }
        internal struct networkListLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkListLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkListLibpod/content/application\/json`.
                case json([Components.Schemas.Network])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.Network] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkListLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkListLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkListLibpod.Body
            /// Creates a new `networkListLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkListLibpod.Body) {
                self.body = body
            }
        }
        internal struct networkNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkNotFound.Body
            /// Creates a new `networkNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkNotFound.Body) {
                self.body = body
            }
        }
        internal struct networkPruneResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkPruneResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkPruneResponse/content/application\/json`.
                case json([Components.Schemas.NetworkPruneReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.NetworkPruneReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkPruneResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkPruneResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkPruneResponse.Body
            /// Creates a new `networkPruneResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkPruneResponse.Body) {
                self.body = body
            }
        }
        internal struct networkRmResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/networkRmResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/networkRmResponse/content/application\/json`.
                case json([Components.Schemas.NetworkRmReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.NetworkRmReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkRmResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/networkRmResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.networkRmResponse.Body
            /// Creates a new `networkRmResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.networkRmResponse.Body) {
                self.body = body
            }
        }
        internal struct ok: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ok/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ok/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/ok/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/ok/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.ok.Body
            /// Creates a new `ok`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.ok.Body) {
                self.body = body
            }
        }
        internal struct playKubeResponseLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/playKubeResponseLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/playKubeResponseLibpod/content/application\/json`.
                case json(Components.Schemas.PlayKubeReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PlayKubeReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/playKubeResponseLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/playKubeResponseLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.playKubeResponseLibpod.Body
            /// Creates a new `playKubeResponseLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.playKubeResponseLibpod.Body) {
                self.body = body
            }
        }
        internal struct podAlreadyStartedError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podAlreadyStartedError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podAlreadyStartedError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podAlreadyStartedError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podAlreadyStartedError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podAlreadyStartedError.Body
            /// Creates a new `podAlreadyStartedError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podAlreadyStartedError.Body) {
                self.body = body
            }
        }
        internal struct podAlreadyStoppedError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podAlreadyStoppedError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podAlreadyStoppedError/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podAlreadyStoppedError/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podAlreadyStoppedError/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podAlreadyStoppedError.Body
            /// Creates a new `podAlreadyStoppedError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podAlreadyStoppedError.Body) {
                self.body = body
            }
        }
        internal struct podInspectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podInspectResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podInspectResponse/content/application\/json`.
                case json(Components.Schemas.InspectPodData)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.InspectPodData {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podInspectResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podInspectResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podInspectResponse.Body
            /// Creates a new `podInspectResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podInspectResponse.Body) {
                self.body = body
            }
        }
        internal struct podKillResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podKillResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podKillResponse/content/application\/json`.
                case json(Components.Schemas.PodKillReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodKillReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podKillResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podKillResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podKillResponse.Body
            /// Creates a new `podKillResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podKillResponse.Body) {
                self.body = body
            }
        }
        internal struct podNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podNotFound.Body
            /// Creates a new `podNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podNotFound.Body) {
                self.body = body
            }
        }
        internal struct podPauseResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podPauseResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podPauseResponse/content/application\/json`.
                case json(Components.Schemas.PodPauseReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodPauseReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podPauseResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podPauseResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podPauseResponse.Body
            /// Creates a new `podPauseResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podPauseResponse.Body) {
                self.body = body
            }
        }
        internal struct podPruneResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podPruneResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podPruneResponse/content/application\/json`.
                case json(Components.Schemas.PodPruneReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodPruneReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podPruneResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podPruneResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podPruneResponse.Body
            /// Creates a new `podPruneResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podPruneResponse.Body) {
                self.body = body
            }
        }
        internal struct podRestartResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podRestartResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podRestartResponse/content/application\/json`.
                case json(Components.Schemas.PodRestartReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodRestartReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podRestartResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podRestartResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podRestartResponse.Body
            /// Creates a new `podRestartResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podRestartResponse.Body) {
                self.body = body
            }
        }
        internal struct podRmResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podRmResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podRmResponse/content/application\/json`.
                case json(Components.Schemas.PodRmReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodRmReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podRmResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podRmResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podRmResponse.Body
            /// Creates a new `podRmResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podRmResponse.Body) {
                self.body = body
            }
        }
        internal struct podStartResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podStartResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podStartResponse/content/application\/json`.
                case json(Components.Schemas.PodStartReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodStartReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStartResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStartResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podStartResponse.Body
            /// Creates a new `podStartResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podStartResponse.Body) {
                self.body = body
            }
        }
        internal struct podStatsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podStatsResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podStatsResponse/content/application\/json`.
                case json([Components.Schemas.PodStatsReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.PodStatsReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStatsResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStatsResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podStatsResponse.Body
            /// Creates a new `podStatsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podStatsResponse.Body) {
                self.body = body
            }
        }
        internal struct podStopResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podStopResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podStopResponse/content/application\/json`.
                case json(Components.Schemas.PodStopReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodStopReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStopResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podStopResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podStopResponse.Body
            /// Creates a new `podStopResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podStopResponse.Body) {
                self.body = body
            }
        }
        internal struct podTopResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podTopResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podTopResponse/content/application\/json`.
                case json(Components.Schemas.PodTopOKBody)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodTopOKBody {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podTopResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podTopResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podTopResponse.Body
            /// Creates a new `podTopResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podTopResponse.Body) {
                self.body = body
            }
        }
        internal struct podUnpauseResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podUnpauseResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podUnpauseResponse/content/application\/json`.
                case json(Components.Schemas.PodUnpauseReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PodUnpauseReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podUnpauseResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podUnpauseResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podUnpauseResponse.Body
            /// Creates a new `podUnpauseResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podUnpauseResponse.Body) {
                self.body = body
            }
        }
        internal struct podsListResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/podsListResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/podsListResponse/content/application\/json`.
                case json([Components.Schemas.ListPodsReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.ListPodsReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podsListResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/podsListResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.podsListResponse.Body
            /// Creates a new `podsListResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.podsListResponse.Body) {
                self.body = body
            }
        }
        internal struct registrySearchResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/registrySearchResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// Automated indicates if the image was created by an automated build.
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Automated`.
                    internal var Automated: Swift.String?
                    /// Description of the image.
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Description`.
                    internal var Description: Swift.String?
                    /// Index is the image index
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Index`.
                    internal var Index: Swift.String?
                    /// Name is the canonical name of the image
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Name`.
                    internal var Name: Swift.String?
                    /// Official indicates if it's an official image.
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Official`.
                    internal var Official: Swift.String?
                    /// Stars is the number of stars of the image.
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Stars`.
                    internal var Stars: Swift.Int64?
                    /// Tag is the image tag
                    ///
                    /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/json/Tag`.
                    internal var Tag: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Automated: Automated indicates if the image was created by an automated build.
                    ///   - Description: Description of the image.
                    ///   - Index: Index is the image index
                    ///   - Name: Name is the canonical name of the image
                    ///   - Official: Official indicates if it's an official image.
                    ///   - Stars: Stars is the number of stars of the image.
                    ///   - Tag: Tag is the image tag
                    internal init(
                        Automated: Swift.String? = nil,
                        Description: Swift.String? = nil,
                        Index: Swift.String? = nil,
                        Name: Swift.String? = nil,
                        Official: Swift.String? = nil,
                        Stars: Swift.Int64? = nil,
                        Tag: Swift.String? = nil
                    ) {
                        self.Automated = Automated
                        self.Description = Description
                        self.Index = Index
                        self.Name = Name
                        self.Official = Official
                        self.Stars = Stars
                        self.Tag = Tag
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case Automated
                        case Description
                        case Index
                        case Name
                        case Official
                        case Stars
                        case Tag
                    }
                }
                /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/application\/json`.
                case json(Components.Responses.registrySearchResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Responses.registrySearchResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/registrySearchResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.registrySearchResponse.Body
            /// Creates a new `registrySearchResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.registrySearchResponse.Body) {
                self.body = body
            }
        }
        internal struct systemAuthResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/systemAuthResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/systemAuthResponse/content/application\/json`.
                case json(Components.Schemas.AuthReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.AuthReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemAuthResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemAuthResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.systemAuthResponse.Body
            /// Creates a new `systemAuthResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.systemAuthResponse.Body) {
                self.body = body
            }
        }
        internal struct systemCheckResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/systemCheckResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/systemCheckResponse/content/application\/json`.
                case json(Components.Schemas.SystemCheckReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SystemCheckReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemCheckResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemCheckResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.systemCheckResponse.Body
            /// Creates a new `systemCheckResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.systemCheckResponse.Body) {
                self.body = body
            }
        }
        internal struct systemDiskUsage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/systemDiskUsage/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/systemDiskUsage/content/application\/json`.
                case json(Components.Schemas.SystemDfReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SystemDfReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemDiskUsage/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemDiskUsage/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.systemDiskUsage.Body
            /// Creates a new `systemDiskUsage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.systemDiskUsage.Body) {
                self.body = body
            }
        }
        internal struct systemPruneResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/systemPruneResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/systemPruneResponse/content/application\/json`.
                case json(Components.Schemas.SystemPruneReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SystemPruneReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemPruneResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/systemPruneResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.systemPruneResponse.Body
            /// Creates a new `systemPruneResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.systemPruneResponse.Body) {
                self.body = body
            }
        }
        internal struct treeResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/treeResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/treeResponse/content/application\/json`.
                case json(Components.Schemas.ImageTreeReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ImageTreeReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/treeResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/treeResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.treeResponse.Body
            /// Creates a new `treeResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.treeResponse.Body) {
                self.body = body
            }
        }
        internal struct versionResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/versionResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/versionResponse/content/application\/json`.
                case json(Components.Schemas.SystemComponentVersion)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.SystemComponentVersion {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/versionResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/versionResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.versionResponse.Body
            /// Creates a new `versionResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.versionResponse.Body) {
                self.body = body
            }
        }
        internal struct volumeCreateResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumeCreateResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumeCreateResponse/content/application\/json`.
                case json(Components.Schemas.VolumeConfigResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.VolumeConfigResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeCreateResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeCreateResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumeCreateResponse.Body
            /// Creates a new `volumeCreateResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumeCreateResponse.Body) {
                self.body = body
            }
        }
        internal struct volumeInspect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumeInspect/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumeInspect/content/application\/json`.
                case json(Components.Schemas.Volume)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.Volume {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeInspect/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeInspect/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumeInspect.Body
            /// Creates a new `volumeInspect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumeInspect.Body) {
                self.body = body
            }
        }
        internal struct volumeList: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumeList/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumeList/content/application\/json`.
                case json(Components.Schemas.ListResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ListResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeList/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeList/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumeList.Body
            /// Creates a new `volumeList`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumeList.Body) {
                self.body = body
            }
        }
        internal struct volumeListLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumeListLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumeListLibpod/content/application\/json`.
                case json([Components.Schemas.VolumeConfigResponse])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.VolumeConfigResponse] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeListLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeListLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumeListLibpod.Body
            /// Creates a new `volumeListLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumeListLibpod.Body) {
                self.body = body
            }
        }
        internal struct volumeNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumeNotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumeNotFound/content/application\/json`.
                case json(Components.Schemas.ErrorModel)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorModel {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeNotFound/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumeNotFound/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumeNotFound.Body
            /// Creates a new `volumeNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumeNotFound.Body) {
                self.body = body
            }
        }
        internal struct volumePruneLibpod: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumePruneLibpod/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumePruneLibpod/content/application\/json`.
                case json([Components.Schemas.PruneReport])
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: [Components.Schemas.PruneReport] {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumePruneLibpod/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumePruneLibpod/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumePruneLibpod.Body
            /// Creates a new `volumePruneLibpod`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumePruneLibpod.Body) {
                self.body = body
            }
        }
        internal struct volumePruneResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/volumePruneResponse/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/volumePruneResponse/content/application\/json`.
                case json(Components.Schemas.PruneReport)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.PruneReport {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumePruneResponse/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.binary`.
                ///
                /// - Throws: An error if `self` is not `.binary`.
                /// - SeeAlso: `.binary`.
                internal var binary: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .binary(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/octet-stream",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/volumePruneResponse/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.plainText`.
                ///
                /// - Throws: An error if `self` is not `.plainText`.
                /// - SeeAlso: `.plainText`.
                internal var plainText: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .plainText(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "text/plain",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.volumePruneResponse.Body
            /// Creates a new `volumePruneResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.volumePruneResponse.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Check auth configuration
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    internal enum SystemAuth {
        internal static let id: Swift.String = "SystemAuth"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemAuth.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemAuth.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemAuth.Input.Headers
            /// - Remark: Generated from `#/paths/auth/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AuthConfig)
                /// - Remark: Generated from `#/paths/auth/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.SystemAuth.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.SystemAuth.Input.Headers = .init(),
                body: Operations.SystemAuth.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Auth response
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.systemAuthResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.systemAuthResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    internal enum ImageBuild {
        internal static let id: Swift.String = "ImageBuild"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/build/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Path within the build context to the `Dockerfile`.
                /// This is ignored if remote is specified and points to an external `Dockerfile`.
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/dockerfile`.
                internal var dockerfile: Swift.String?
                /// A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag, the default latest value is assumed. You can provide several t parameters.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/t`.
                internal var t: Swift.String?
                /// TBD Extra hosts to add to /etc/hosts
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/extrahosts`.
                internal var extrahosts: Swift.String?
                /// Not to create /etc/hosts when building the image
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/nohosts`.
                internal var nohosts: Swift.Bool?
                /// A Git repository URI or HTTP/HTTPS context URI.
                /// If the URI points to a single text file, the fileâ€™s contents are placed
                /// into a file called Dockerfile and the image is built from that file. If
                /// the URI points to a tarball, the file is downloaded by the daemon and the
                /// contents therein used as the context for the build. If the URI points to a
                /// tarball and the dockerfile parameter is also specified, there must be a file
                /// with the corresponding path inside the tarball.
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/remote`.
                internal var remote: Swift.String?
                /// Number of times to retry in case of failure when performing push/pull.
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/retry`.
                internal var retry: Swift.Int?
                /// Delay between retries in case of push/pull failures.
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/retry-delay`.
                internal var retry_hyphen_delay: Swift.String?
                /// Suppress verbose build output
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/q`.
                internal var q: Swift.Bool?
                /// Contents of base images to be modified on ADD or COPY only
                /// (As of Podman version v5.2)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/compatvolumes`.
                internal var compatvolumes: Swift.Bool?
                /// Do not use the cache when building the image
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/nocache`.
                internal var nocache: Swift.Bool?
                /// JSON array of images used to build cache resolution
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cachefrom`.
                internal var cachefrom: Swift.String?
                /// Attempt to pull the image even if an older image exists locally
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/pull`.
                internal var pull: Swift.Bool?
                /// Remove intermediate containers after a successful build
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/rm`.
                internal var rm: Swift.Bool?
                /// Always remove intermediate containers, even upon failure
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/forcerm`.
                internal var forcerm: Swift.Bool?
                /// Memory is the upper limit (in bytes) on how much memory running containers can use
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/memory`.
                internal var memory: Swift.Int?
                /// MemorySwap limits the amount of memory and swap together
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/memswap`.
                internal var memswap: Swift.Int?
                /// CPUShares (relative weight
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpushares`.
                internal var cpushares: Swift.Int?
                /// CPUSetCPUs in which to allow execution (0-3, 0,1)
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpusetcpus`.
                internal var cpusetcpus: Swift.String?
                /// CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpuperiod`.
                internal var cpuperiod: Swift.Int?
                /// CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpuquota`.
                internal var cpuquota: Swift.Int?
                /// JSON map of string pairs denoting build-time variables.
                /// For example, the build argument `Foo` with the value of `bar` would be encoded in JSON as `["Foo":"bar"]`.
                ///
                /// For example, buildargs={"Foo":"bar"}.
                ///
                /// Note(s):
                /// * This should not be used to pass secrets.
                /// * The value of buildargs should be URI component encoded before being passed to the API.
                ///
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/buildargs`.
                internal var buildargs: Swift.String?
                /// ShmSize is the "size" value to use when mounting an shmfs on the container's /dev/shm directory.
                /// Default is 64MB
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/shmsize`.
                internal var shmsize: Swift.Int?
                /// Silently ignored.
                /// Squash the resulting images layers into a single layer
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/squash`.
                internal var squash: Swift.Bool?
                /// JSON map of key, value pairs to set as labels on the new image
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/labels`.
                internal var labels: Swift.String?
                /// Sets the networking mode for the run commands during build.
                /// Supported standard values are:
                ///   * `bridge` limited to containers within a single host, port mapping required for external access
                ///   * `host` no isolation between host and containers on this network
                ///   * `none` disable all networking for this container
                ///   * container:<nameOrID> share networking with given container
                ///   ---All other values are assumed to be a custom network's name
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/networkmode`.
                internal var networkmode: Swift.String?
                /// Platform format os[/arch[/variant]]
                /// Can be comma separated list for multi arch builds.
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/platform`.
                internal var platform: Swift.String?
                /// Target build stage
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/target`.
                internal var target: Swift.String?
                /// output configuration TBD
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/outputs`.
                internal var outputs: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - dockerfile: Path within the build context to the `Dockerfile`.
                ///   - t: A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag, the default latest value is assumed. You can provide several t parameters.
                ///   - extrahosts: TBD Extra hosts to add to /etc/hosts
                ///   - nohosts: Not to create /etc/hosts when building the image
                ///   - remote: A Git repository URI or HTTP/HTTPS context URI.
                ///   - retry: Number of times to retry in case of failure when performing push/pull.
                ///   - retry_hyphen_delay: Delay between retries in case of push/pull failures.
                ///   - q: Suppress verbose build output
                ///   - compatvolumes: Contents of base images to be modified on ADD or COPY only
                ///   - nocache: Do not use the cache when building the image
                ///   - cachefrom: JSON array of images used to build cache resolution
                ///   - pull: Attempt to pull the image even if an older image exists locally
                ///   - rm: Remove intermediate containers after a successful build
                ///   - forcerm: Always remove intermediate containers, even upon failure
                ///   - memory: Memory is the upper limit (in bytes) on how much memory running containers can use
                ///   - memswap: MemorySwap limits the amount of memory and swap together
                ///   - cpushares: CPUShares (relative weight
                ///   - cpusetcpus: CPUSetCPUs in which to allow execution (0-3, 0,1)
                ///   - cpuperiod: CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period
                ///   - cpuquota: CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota
                ///   - buildargs: JSON map of string pairs denoting build-time variables.
                ///   - shmsize: ShmSize is the "size" value to use when mounting an shmfs on the container's /dev/shm directory.
                ///   - squash: Silently ignored.
                ///   - labels: JSON map of key, value pairs to set as labels on the new image
                ///   - networkmode: Sets the networking mode for the run commands during build.
                ///   - platform: Platform format os[/arch[/variant]]
                ///   - target: Target build stage
                ///   - outputs: output configuration TBD
                internal init(
                    dockerfile: Swift.String? = nil,
                    t: Swift.String? = nil,
                    extrahosts: Swift.String? = nil,
                    nohosts: Swift.Bool? = nil,
                    remote: Swift.String? = nil,
                    retry: Swift.Int? = nil,
                    retry_hyphen_delay: Swift.String? = nil,
                    q: Swift.Bool? = nil,
                    compatvolumes: Swift.Bool? = nil,
                    nocache: Swift.Bool? = nil,
                    cachefrom: Swift.String? = nil,
                    pull: Swift.Bool? = nil,
                    rm: Swift.Bool? = nil,
                    forcerm: Swift.Bool? = nil,
                    memory: Swift.Int? = nil,
                    memswap: Swift.Int? = nil,
                    cpushares: Swift.Int? = nil,
                    cpusetcpus: Swift.String? = nil,
                    cpuperiod: Swift.Int? = nil,
                    cpuquota: Swift.Int? = nil,
                    buildargs: Swift.String? = nil,
                    shmsize: Swift.Int? = nil,
                    squash: Swift.Bool? = nil,
                    labels: Swift.String? = nil,
                    networkmode: Swift.String? = nil,
                    platform: Swift.String? = nil,
                    target: Swift.String? = nil,
                    outputs: Swift.String? = nil
                ) {
                    self.dockerfile = dockerfile
                    self.t = t
                    self.extrahosts = extrahosts
                    self.nohosts = nohosts
                    self.remote = remote
                    self.retry = retry
                    self.retry_hyphen_delay = retry_hyphen_delay
                    self.q = q
                    self.compatvolumes = compatvolumes
                    self.nocache = nocache
                    self.cachefrom = cachefrom
                    self.pull = pull
                    self.rm = rm
                    self.forcerm = forcerm
                    self.memory = memory
                    self.memswap = memswap
                    self.cpushares = cpushares
                    self.cpusetcpus = cpusetcpus
                    self.cpuperiod = cpuperiod
                    self.cpuquota = cpuquota
                    self.buildargs = buildargs
                    self.shmsize = shmsize
                    self.squash = squash
                    self.labels = labels
                    self.networkmode = networkmode
                    self.platform = platform
                    self.target = target
                    self.outputs = outputs
                }
            }
            internal var query: Operations.ImageBuild.Input.Query
            /// - Remark: Generated from `#/paths/build/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/header/X-Registry-Config`.
                internal var X_hyphen_Registry_hyphen_Config: Swift.String?
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuild.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Config:
                ///   - accept:
                internal init(
                    X_hyphen_Registry_hyphen_Config: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuild.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Config = X_hyphen_Registry_hyphen_Config
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageBuild.Input.Headers
            /// - Remark: Generated from `#/paths/build/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/build/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ImageBuild.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.ImageBuild.Input.Query = .init(),
                headers: Operations.ImageBuild.Input.Headers = .init(),
                body: Operations.ImageBuild.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/build/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// output from build process
                        ///
                        /// - Remark: Generated from `#/paths/build/POST/responses/200/content/json/stream`.
                        internal var stream: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - stream: output from build process
                        internal init(stream: Swift.String) {
                            self.stream = stream
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case stream
                        }
                    }
                    /// - Remark: Generated from `#/paths/build/POST/responses/200/content/application\/json`.
                    case json(Operations.ImageBuild.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.ImageBuild.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageBuild.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageBuild.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK (As of version 1.xx)
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageBuild.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageBuild.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// New Image
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    internal enum ImageCommit {
        internal static let id: Swift.String = "ImageCommit"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commit/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the name or ID of a container
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/container`.
                internal var container: Swift.String?
                /// the repository name for the created image
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/repo`.
                internal var repo: Swift.String?
                /// tag name for the created image
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/tag`.
                internal var tag: Swift.String?
                /// commit message
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/comment`.
                internal var comment: Swift.String?
                /// author of the image
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/author`.
                internal var author: Swift.String?
                /// pause the container before committing it
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/pause`.
                internal var pause: Swift.Bool?
                /// instructions to apply while committing in Dockerfile format
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/changes`.
                internal var changes: Swift.String?
                /// squash newly built layers into a single new layer
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/squash`.
                internal var squash: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - container: the name or ID of a container
                ///   - repo: the repository name for the created image
                ///   - tag: tag name for the created image
                ///   - comment: commit message
                ///   - author: author of the image
                ///   - pause: pause the container before committing it
                ///   - changes: instructions to apply while committing in Dockerfile format
                ///   - squash: squash newly built layers into a single new layer
                internal init(
                    container: Swift.String? = nil,
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil,
                    comment: Swift.String? = nil,
                    author: Swift.String? = nil,
                    pause: Swift.Bool? = nil,
                    changes: Swift.String? = nil,
                    squash: Swift.Bool? = nil
                ) {
                    self.container = container
                    self.repo = repo
                    self.tag = tag
                    self.comment = comment
                    self.author = author
                    self.pause = pause
                    self.changes = changes
                    self.squash = squash
                }
            }
            internal var query: Operations.ImageCommit.Input.Query
            /// - Remark: Generated from `#/paths/commit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageCommit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageCommit.Input.Query = .init(),
                headers: Operations.ImageCommit.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageCommit.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ImageCommit.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{name}`.
    /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)`.
    internal enum ContainerDelete {
        internal static let id: Swift.String = "ContainerDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerDelete.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// If the container is running, kill it before removing it.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Remove the volumes associated with the container.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/DELETE/query/v`.
                internal var v: Swift.Bool?
                /// not supported
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/DELETE/query/link`.
                internal var link: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: If the container is running, kill it before removing it.
                ///   - v: Remove the volumes associated with the container.
                ///   - link: not supported
                internal init(
                    force: Swift.Bool? = nil,
                    v: Swift.Bool? = nil,
                    link: Swift.Bool? = nil
                ) {
                    self.force = force
                    self.v = v
                    self.link = link
                }
            }
            internal var query: Operations.ContainerDelete.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerDelete.Input.Path,
                query: Operations.ContainerDelete.Input.Query = .init(),
                headers: Operations.ContainerDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerDelete.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/delete(ContainerDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get files from a container
    ///
    /// Get a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)`.
    internal enum ContainerArchive {
        internal static let id: Swift.String = "ContainerArchive"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// container name or id
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: container name or id
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerArchive.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Path to a directory in the container to extract
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/query/path`.
                internal var path: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Path to a directory in the container to extract
                internal init(path: Swift.String) {
                    self.path = path
                }
            }
            internal var query: Operations.ContainerArchive.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerArchive.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerArchive.Input.Path,
                query: Operations.ContainerArchive.Input.Query,
                headers: Operations.ContainerArchive.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{name}/archive/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerArchive.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/get(ContainerArchive)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Put files into a container
    ///
    /// Put a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)`.
    internal enum PutContainerArchive {
        internal static let id: Swift.String = "PutContainerArchive"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// container name or id
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: container name or id
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PutContainerArchive.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/query`.
            internal struct Query: Sendable, Hashable {
                /// Path to a directory in the container to extract
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/query/path`.
                internal var path: Swift.String
                /// if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa (1 or true)
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/query/noOverwriteDirNonDir`.
                internal var noOverwriteDirNonDir: Swift.String?
                /// copy UID/GID maps to the dest file or di (1 or true)
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/query/copyUIDGID`.
                internal var copyUIDGID: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Path to a directory in the container to extract
                ///   - noOverwriteDirNonDir: if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa (1 or true)
                ///   - copyUIDGID: copy UID/GID maps to the dest file or di (1 or true)
                internal init(
                    path: Swift.String,
                    noOverwriteDirNonDir: Swift.String? = nil,
                    copyUIDGID: Swift.String? = nil
                ) {
                    self.path = path
                    self.noOverwriteDirNonDir = noOverwriteDirNonDir
                    self.copyUIDGID = copyUIDGID
                }
            }
            internal var query: Operations.PutContainerArchive.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/archive/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PutContainerArchive.Input.Headers
            internal var body: Components.RequestBodies.PutContainerArchiveRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.PutContainerArchive.Input.Path,
                query: Operations.PutContainerArchive.Input.Query,
                headers: Operations.PutContainerArchive.Input.Headers = .init(),
                body: Components.RequestBodies.PutContainerArchiveRequest? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutContainerArchive.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.PutContainerArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                internal init() {}
            }
            /// the container rootfs is read-only
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PutContainerArchive.Output.Forbidden)
            /// the container rootfs is read-only
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Operations.PutContainerArchive.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/archive/put(PutContainerArchive)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// It uses the same stream format as docker, see the libpod attach endpoint for a description of the format.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)`.
    internal enum ContainerAttach {
        internal static let id: Swift.String = "ContainerAttach"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerAttach.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// keys to use for detaching from the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/detachKeys`.
                internal var detachKeys: Swift.String?
                /// Stream all logs from the container across the connection. Happens before streaming attach (if requested). At least one of logs or stream must be set
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/logs`.
                internal var logs: Swift.Bool?
                /// Attach to the container. If unset, and logs is set, only the container's logs will be sent. At least one of stream or logs must be set
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/stream`.
                internal var stream: Swift.Bool?
                /// Attach to container STDOUT
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/stdout`.
                internal var stdout: Swift.Bool?
                /// Attach to container STDERR
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/stderr`.
                internal var stderr: Swift.Bool?
                /// Attach to container STDIN
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/query/stdin`.
                internal var stdin: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: keys to use for detaching from the container
                ///   - logs: Stream all logs from the container across the connection. Happens before streaming attach (if requested). At least one of logs or stream must be set
                ///   - stream: Attach to the container. If unset, and logs is set, only the container's logs will be sent. At least one of stream or logs must be set
                ///   - stdout: Attach to container STDOUT
                ///   - stderr: Attach to container STDERR
                ///   - stdin: Attach to container STDIN
                internal init(
                    detachKeys: Swift.String? = nil,
                    logs: Swift.Bool? = nil,
                    stream: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    stdin: Swift.Bool? = nil
                ) {
                    self.detachKeys = detachKeys
                    self.logs = logs
                    self.stream = stream
                    self.stdout = stdout
                    self.stderr = stderr
                    self.stdin = stdin
                }
            }
            internal var query: Operations.ContainerAttach.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/attach/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttach.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttach.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerAttach.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerAttach.Input.Path,
                query: Operations.ContainerAttach.Input.Query = .init(),
                headers: Operations.ContainerAttach.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct SwitchingProtocols: Sendable, Hashable {
                /// Creates a new `SwitchingProtocols`.
                internal init() {}
            }
            /// No error, connection has been hijacked for transporting streams.
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            case switchingProtocols(Operations.ContainerAttach.Output.SwitchingProtocols)
            /// No error, connection has been hijacked for transporting streams.
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            internal static var switchingProtocols: Self {
                .switchingProtocols(.init())
            }
            /// The associated value of the enum case if `self` is `.switchingProtocols`.
            ///
            /// - Throws: An error if `self` is not `.switchingProtocols`.
            /// - SeeAlso: `.switchingProtocols`.
            internal var switchingProtocols: Operations.ContainerAttach.Output.SwitchingProtocols {
                get throws {
                    switch self {
                    case let .switchingProtocols(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "switchingProtocols",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/attach/post(ContainerAttach)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)`.
    internal enum ContainerExec {
        internal static let id: Swift.String = "ContainerExec"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/exec/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// name of container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/exec/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: name of container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerExec.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/exec/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExec.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExec.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerExec.Input.Headers
            internal var body: Components.RequestBodies.ContainerExecControl?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ContainerExec.Input.Path,
                headers: Operations.ContainerExec.Input.Headers = .init(),
                body: Components.RequestBodies.ContainerExecControl? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ContainerExec.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ContainerExec.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// container is paused
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerExec.Output.Conflict)
            /// container is paused
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ContainerExec.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/exec/post(ContainerExec)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{name}/export`.
    /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)`.
    internal enum ContainerExport {
        internal static let id: Swift.String = "ContainerExport"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/export/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/export/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerExport.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/export/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExport.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExport.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerExport.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerExport.Input.Path,
                headers: Operations.ContainerExport.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// tarball is returned in body
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerExport.Output.Ok)
            /// tarball is returned in body
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerExport.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/export/get(ContainerExport)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/json`.
    /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)`.
    internal enum ContainerInspect {
        internal static let id: Swift.String = "ContainerInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or id of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or id of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerInspect.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// include the size of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/json/GET/query/size`.
                internal var size: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - size: include the size of the container
                internal init(size: Swift.Bool? = nil) {
                    self.size = size
                }
            }
            internal var query: Operations.ContainerInspect.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerInspect.Input.Path,
                query: Operations.ContainerInspect.Input.Query = .init(),
                headers: Operations.ContainerInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Inspect container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerInspectResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerInspectResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/json/get(ContainerInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Kill container
    ///
    /// Signal to send to the container as an integer or string (e.g. SIGINT)
    ///
    /// - Remark: HTTP `POST /containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)`.
    internal enum ContainerKill {
        internal static let id: Swift.String = "ContainerKill"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerKill.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Send kill signal to all containers
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/query/all`.
                internal var all: Swift.Bool?
                /// signal to be sent to container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/query/signal`.
                internal var signal: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Send kill signal to all containers
                ///   - signal: signal to be sent to container
                internal init(
                    all: Swift.Bool? = nil,
                    signal: Swift.String? = nil
                ) {
                    self.all = all
                    self.signal = signal
                }
            }
            internal var query: Operations.ContainerKill.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/kill/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKill.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKill.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerKill.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerKill.Input.Path,
                query: Operations.ContainerKill.Input.Query = .init(),
                headers: Operations.ContainerKill.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerKill.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerKill.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/kill/post(ContainerKill)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// - Remark: HTTP `GET /containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)`.
    internal enum ContainerLogs {
        internal static let id: Swift.String = "ContainerLogs"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerLogs.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Keep connection after returning logs.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/follow`.
                internal var follow: Swift.Bool?
                /// Return logs from stdout
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/stdout`.
                internal var stdout: Swift.Bool?
                /// Return logs from stderr
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/stderr`.
                internal var stderr: Swift.Bool?
                /// Only return logs since this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/since`.
                internal var since: Swift.String?
                /// Only return logs before this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/until`.
                internal var until: Swift.String?
                /// Add timestamps to every log line
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/timestamps`.
                internal var timestamps: Swift.Bool?
                /// Only return this number of log lines from the end of the logs
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/query/tail`.
                internal var tail: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - follow: Keep connection after returning logs.
                ///   - stdout: Return logs from stdout
                ///   - stderr: Return logs from stderr
                ///   - since: Only return logs since this time, as a UNIX timestamp
                ///   - until: Only return logs before this time, as a UNIX timestamp
                ///   - timestamps: Add timestamps to every log line
                ///   - tail: Only return this number of log lines from the end of the logs
                internal init(
                    follow: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    timestamps: Swift.Bool? = nil,
                    tail: Swift.String? = nil
                ) {
                    self.follow = follow
                    self.stdout = stdout
                    self.stderr = stderr
                    self.since = since
                    self.until = until
                    self.timestamps = timestamps
                    self.tail = tail
                }
            }
            internal var query: Operations.ContainerLogs.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/logs/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerLogs.Input.Path,
                query: Operations.ContainerLogs.Input.Query = .init(),
                headers: Operations.ContainerLogs.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// logs returned as a stream in response body.
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerLogs.Output.Ok)
            /// logs returned as a stream in response body.
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/logs/get(ContainerLogs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Pause container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)`.
    internal enum ContainerPause {
        internal static let id: Swift.String = "ContainerPause"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/pause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/pause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerPause.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/pause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPause.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPause.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerPause.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerPause.Input.Path,
                headers: Operations.ContainerPause.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerPause.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerPause.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/pause/post(ContainerPause)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)`.
    internal enum ContainerRename {
        internal static let id: Swift.String = "ContainerRename"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/rename/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Full or partial ID or full name of the container to rename
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/rename/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Full or partial ID or full name of the container to rename
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerRename.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/rename/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// New name for the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/rename/POST/query/name`.
                internal var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: New name for the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var query: Operations.ContainerRename.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/rename/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRename.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerRename.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerRename.Input.Path,
                query: Operations.ContainerRename.Input.Query,
                headers: Operations.ContainerRename.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRename.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerRename.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/rename/post(ContainerRename)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)`.
    internal enum ContainerResize {
        internal static let id: Swift.String = "ContainerResize"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerResize.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Height to set for the terminal, in characters
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/query/h`.
                internal var h: Swift.Int?
                /// Width to set for the terminal, in characters
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/query/w`.
                internal var w: Swift.Int?
                /// Ignore containers not running errors
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/query/running`.
                internal var running: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height to set for the terminal, in characters
                ///   - w: Width to set for the terminal, in characters
                ///   - running: Ignore containers not running errors
                internal init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil,
                    running: Swift.Bool? = nil
                ) {
                    self.h = h
                    self.w = w
                    self.running = running
                }
            }
            internal var query: Operations.ContainerResize.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/resize/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResize.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResize.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerResize.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerResize.Input.Path,
                query: Operations.ContainerResize.Input.Query = .init(),
                headers: Operations.ContainerResize.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Success
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/resize/post(ContainerResize)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Restart container
    ///
    /// - Remark: HTTP `POST /containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)`.
    internal enum ContainerRestart {
        internal static let id: Swift.String = "ContainerRestart"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/restart/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/restart/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerRestart.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/restart/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// timeout before sending kill signal to container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/restart/POST/query/t`.
                internal var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: timeout before sending kill signal to container
                internal init(t: Swift.Int? = nil) {
                    self.t = t
                }
            }
            internal var query: Operations.ContainerRestart.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/restart/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerRestart.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerRestart.Input.Path,
                query: Operations.ContainerRestart.Input.Query = .init(),
                headers: Operations.ContainerRestart.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRestart.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerRestart.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/restart/post(ContainerRestart)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/start`.
    /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)`.
    internal enum ContainerStart {
        internal static let id: Swift.String = "ContainerStart"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/start/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/start/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStart.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/start/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/start/POST/query/detachKeys`.
                internal var detachKeys: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _.
                internal init(detachKeys: Swift.String? = nil) {
                    self.detachKeys = detachKeys
                }
            }
            internal var query: Operations.ContainerStart.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/start/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStart.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStart.Input.Path,
                query: Operations.ContainerStart.Input.Query = .init(),
                headers: Operations.ContainerStart.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStart.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerStart.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Container already started
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.containerAlreadyStartedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.containerAlreadyStartedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/start/post(ContainerStart)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get stats for a container
    ///
    /// This returns a live stream of a containerâ€™s resource usage statistics.
    ///
    /// - Remark: HTTP `GET /containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)`.
    internal enum ContainerStats {
        internal static let id: Swift.String = "ContainerStats"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStats.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Stream the output
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// Provide a one-shot response in which preCPU stats are blank, resulting in a single cycle return.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/query/one-shot`.
                internal var one_hyphen_shot: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - stream: Stream the output
                ///   - one_hyphen_shot: Provide a one-shot response in which preCPU stats are blank, resulting in a single cycle return.
                internal init(
                    stream: Swift.Bool? = nil,
                    one_hyphen_shot: Swift.Bool? = nil
                ) {
                    self.stream = stream
                    self.one_hyphen_shot = one_hyphen_shot
                }
            }
            internal var query: Operations.ContainerStats.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStats.Input.Path,
                query: Operations.ContainerStats.Input.Query = .init(),
                headers: Operations.ContainerStats.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{name}/stats/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerStats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerStats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerStats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerStats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stats/get(ContainerStats)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Stop a container
    ///
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)`.
    internal enum ContainerStop {
        internal static let id: Swift.String = "ContainerStop"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/stop/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/stop/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStop.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/stop/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// number of seconds to wait before killing container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/stop/POST/query/t`.
                internal var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: number of seconds to wait before killing container
                internal init(t: Swift.Int? = nil) {
                    self.t = t
                }
            }
            internal var query: Operations.ContainerStop.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/stop/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStop.Input.Path,
                query: Operations.ContainerStop.Input.Query = .init(),
                headers: Operations.ContainerStop.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStop.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerStop.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Container already stopped
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.containerAlreadyStoppedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.containerAlreadyStoppedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/stop/post(ContainerStop)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /containers/{name}/top`.
    /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)`.
    internal enum ContainerTop {
        internal static let id: Swift.String = "ContainerTop"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/top/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/top/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerTop.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/top/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// arguments to pass to ps such as aux.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/top/GET/query/ps_args`.
                internal var ps_args: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ps_args: arguments to pass to ps such as aux.
                internal init(ps_args: Swift.String? = nil) {
                    self.ps_args = ps_args
                }
            }
            internal var query: Operations.ContainerTop.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/top/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerTop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerTop.Input.Path,
                query: Operations.ContainerTop.Input.Query = .init(),
                headers: Operations.ContainerTop.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List processes in container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerTopResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerTopResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/top/get(ContainerTop)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Unpause container
    ///
    /// Resume a paused container
    ///
    /// - Remark: HTTP `POST /containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)`.
    internal enum ContainerUnpause {
        internal static let id: Swift.String = "ContainerUnpause"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/unpause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/unpause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerUnpause.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/unpause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpause.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpause.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerUnpause.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerUnpause.Input.Path,
                headers: Operations.ContainerUnpause.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerUnpause.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerUnpause.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/unpause/post(ContainerUnpause)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Update configuration of an existing container
    ///
    /// Change configuration settings for an existing container without requiring recreation.
    ///
    /// - Remark: HTTP `POST /containers/{name}/update`.
    /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)`.
    internal enum ContainerUpdate {
        internal static let id: Swift.String = "ContainerUpdate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/update/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Full or partial ID or full name of the container to rename
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/update/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Full or partial ID or full name of the container to rename
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerUpdate.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/update/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/containers/{name}/update/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{name}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.containerUpdateRequest)
                /// - Remark: Generated from `#/paths/containers/{name}/update/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ContainerUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ContainerUpdate.Input.Path,
                headers: Operations.ContainerUpdate.Input.Headers = .init(),
                body: Operations.ContainerUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerUpdate.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/update/post(ContainerUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Wait on a container
    ///
    /// Block until a container stops or given condition is met.
    ///
    /// - Remark: HTTP `POST /containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)`.
    internal enum ContainerWait {
        internal static let id: Swift.String = "ContainerWait"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerWait.Input.Path
            /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// wait until container is to a given condition. default is stopped. valid conditions are:
                ///   - configured
                ///   - created
                ///   - exited
                ///   - paused
                ///   - running
                ///   - stopped
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/query/condition`.
                internal var condition: Swift.String?
                /// Time Interval to wait before polling for completion.
                ///
                /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/query/interval`.
                internal var interval: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - condition: wait until container is to a given condition. default is stopped. valid conditions are:
                ///   - interval: Time Interval to wait before polling for completion.
                internal init(
                    condition: Swift.String? = nil,
                    interval: Swift.String? = nil
                ) {
                    self.condition = condition
                    self.interval = interval
                }
            }
            internal var query: Operations.ContainerWait.Input.Query
            /// - Remark: Generated from `#/paths/containers/{name}/wait/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWait.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWait.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerWait.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerWait.Input.Path,
                query: Operations.ContainerWait.Input.Query = .init(),
                headers: Operations.ContainerWait.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Wait container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerWaitResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerWaitResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/{name}/wait/post(ContainerWait)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    internal enum ContainerCreate {
        internal static let id: Swift.String = "ContainerCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/create/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// container name
                ///
                /// - Remark: Generated from `#/paths/containers/create/POST/query/name`.
                internal var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: container name
                internal init(name: Swift.String? = nil) {
                    self.name = name
                }
            }
            internal var query: Operations.ContainerCreate.Input.Query
            /// - Remark: Generated from `#/paths/containers/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerCreate.Input.Headers
            /// - Remark: Generated from `#/paths/containers/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateContainerConfig)
                /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ContainerCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.ContainerCreate.Input.Query = .init(),
                headers: Operations.ContainerCreate.Input.Headers = .init(),
                body: Operations.ContainerCreate.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Create container
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.containerCreateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.containerCreateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    internal enum ContainerList {
        internal static let id: Swift.String = "ContainerList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Return all containers. By default, only running containers are shown
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/all`.
                internal var all: Swift.Bool?
                /// Return containers in storage not controlled by Podman
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/external`.
                internal var external: Swift.Bool?
                /// Return this number of most recently created containers, including non-running ones.
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/limit`.
                internal var limit: Swift.Int?
                /// Return the size of container as fields SizeRw and SizeRootFs.
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/size`.
                internal var size: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the containers list. Available filters:
                /// - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
                /// - `before`=(`<container id>` or `<container name>`)
                /// - `expose`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)
                /// - `exited=<int>` containers with exit code of `<int>`
                /// - `health`=(`starting`, `healthy`, `unhealthy` or `none`)
                /// - `id=<ID>` a container's ID
                /// - `is-task`=(`true` or `false`)
                /// - `label`=(`key` or `"key=value"`) of a container label
                /// - `name=<name>` a container's name
                /// - `network`=(`<network id>` or `<network name>`)
                /// - `publish`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)
                /// - `since`=(`<container id>` or `<container name>`)
                /// - `status`=(`created`, `restarting`, `running`, `removing`, `paused`, `exited` or `dead`)
                /// - `volume`=(`<volume name>` or `<mount point destination>`)
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Return all containers. By default, only running containers are shown
                ///   - external: Return containers in storage not controlled by Podman
                ///   - limit: Return this number of most recently created containers, including non-running ones.
                ///   - size: Return the size of container as fields SizeRw and SizeRootFs.
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the containers list. Available filters:
                internal init(
                    all: Swift.Bool? = nil,
                    external: Swift.Bool? = nil,
                    limit: Swift.Int? = nil,
                    size: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.all = all
                    self.external = external
                    self.limit = limit
                    self.size = size
                    self.filters = filters
                }
            }
            internal var query: Operations.ContainerList.Input.Query
            /// - Remark: Generated from `#/paths/containers/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ContainerList.Input.Query = .init(),
                headers: Operations.ContainerList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List Containers
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containersList)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containersList {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    internal enum ContainerPrune {
        internal static let id: Swift.String = "ContainerPrune"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters:
                ///  - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///  - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.ContainerPrune.Input.Query
            /// - Remark: Generated from `#/paths/containers/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerPrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ContainerPrune.Input.Query = .init(),
                headers: Operations.ContainerPrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Prune Containers
            ///
            /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containersPrune)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containersPrune {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    internal enum SystemEvents {
        internal static let id: Swift.String = "SystemEvents"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/events/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// start streaming events from this time
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/since`.
                internal var since: Swift.String?
                /// stop streaming events later than this
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/until`.
                internal var until: Swift.String?
                /// JSON encoded map[string][]string of constraints
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: start streaming events from this time
                ///   - until: stop streaming events later than this
                ///   - filters: JSON encoded map[string][]string of constraints
                internal init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.filters = filters
                }
            }
            internal var query: Operations.SystemEvents.Input.Query
            /// - Remark: Generated from `#/paths/events/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEvents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.SystemEvents.Input.Query = .init(),
                headers: Operations.SystemEvents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// returns a string of json data describing an event
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemEvents.Output.Ok)
            /// returns a string of json data describing an event
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.SystemEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    internal enum ExecInspect {
        internal static let id: Swift.String = "ExecInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/json/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecInspect.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ExecInspect.Input.Path,
                headers: Operations.ExecInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Exec Session Inspect
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.execSessionInspect)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.execSessionInspect {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    internal enum ExecResize {
        internal static let id: Swift.String = "ExecResize"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecResize.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Height of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query/h`.
                internal var h: Swift.Int?
                /// Width of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query/w`.
                internal var w: Swift.Int?
                /// Ignore containers not running errors
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query/running`.
                internal var running: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height of the TTY session in characters
                ///   - w: Width of the TTY session in characters
                ///   - running: Ignore containers not running errors
                internal init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil,
                    running: Swift.Bool? = nil
                ) {
                    self.h = h
                    self.w = w
                    self.running = running
                }
            }
            internal var query: Operations.ExecResize.Input.Query
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResize.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResize.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecResize.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ExecResize.Input.Path,
                query: Operations.ExecResize.Input.Query = .init(),
                headers: Operations.ExecResize.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ExecResize.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ExecResize.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    internal enum ExecStart {
        internal static let id: Swift.String = "ExecStart"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecStart.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecStart.Input.Headers
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// Detach from the command. Not presently supported.
                    ///
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json/Detach`.
                    internal var Detach: Swift.Bool?
                    /// Allocate a pseudo-TTY. Presently ignored.
                    ///
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json/Tty`.
                    internal var Tty: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Detach: Detach from the command. Not presently supported.
                    ///   - Tty: Allocate a pseudo-TTY. Presently ignored.
                    internal init(
                        Detach: Swift.Bool? = nil,
                        Tty: Swift.Bool? = nil
                    ) {
                        self.Detach = Detach
                        self.Tty = Tty
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case Detach
                        case Tty
                    }
                }
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/content/application\/json`.
                case json(Operations.ExecStart.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ExecStart.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ExecStart.Input.Path,
                headers: Operations.ExecStart.Input.Headers = .init(),
                body: Operations.ExecStart.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecStart.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ExecStart.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// container is not running
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ExecStart.Output.Conflict)
            /// container is not running
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ExecStart.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove Image
    ///
    /// Delete an image from local storage
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    internal enum ImageDelete {
        internal static let id: Swift.String = "ImageDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// name or ID of image to delete
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: name or ID of image to delete
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageDelete.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// remove the image even if used by containers or has other tags
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// do not remove dangling parent images
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/query/noprune`.
                internal var noprune: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: remove the image even if used by containers or has other tags
                ///   - noprune: do not remove dangling parent images
                internal init(
                    force: Swift.Bool? = nil,
                    noprune: Swift.Bool? = nil
                ) {
                    self.force = force
                    self.noprune = noprune
                }
            }
            internal var query: Operations.ImageDelete.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageDelete.Input.Path,
                query: Operations.ImageDelete.Input.Query = .init(),
                headers: Operations.ImageDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Delete
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imageDeleteResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imageDeleteResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export an image
    ///
    /// Export an image in tarball format
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    internal enum ImageGet {
        internal static let id: Swift.String = "ImageGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/get/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/images/{name}/get/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageGet.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/get/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageGet.Input.Path,
                headers: Operations.ImageGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/200/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    internal var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_tar
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-tar":
                    self = .application_x_hyphen_tar
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_tar:
                    return "application/x-tar"
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_tar,
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    internal enum ImageHistory {
        internal static let id: Swift.String = "ImageHistory"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/history/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/images/{name}/history/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageHistory.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/history/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageHistory.Input.Path,
                headers: Operations.ImageHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image History
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.history)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.history {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    internal enum ImageInspect {
        internal static let id: Swift.String = "ImageInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/images/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageInspect.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageInspect.Input.Path,
                headers: Operations.ImageInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Inspect
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imageInspect)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imageInspect {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    internal enum ImagePush {
        internal static let id: Swift.String = "ImagePush"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Name of image to push.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Name of image to push.
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImagePush.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// The tag to associate with the image on the registry.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/tag`.
                internal var tag: Swift.String?
                /// All indicates whether to push all images related to the image list
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/all`.
                internal var all: Swift.Bool?
                /// Use compression on image.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/compress`.
                internal var compress: Swift.Bool?
                /// Allows for pushing the image to a different destination than the image refers to.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/destination`.
                internal var destination: Swift.String?
                /// Manifest type (oci, v2s1, or v2s2) to use when pushing an image. Default is manifest type of source, with fallbacks.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/format`.
                internal var format: Swift.String?
                /// Require TLS verification.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tag: The tag to associate with the image on the registry.
                ///   - all: All indicates whether to push all images related to the image list
                ///   - compress: Use compression on image.
                ///   - destination: Allows for pushing the image to a different destination than the image refers to.
                ///   - format: Manifest type (oci, v2s1, or v2s2) to use when pushing an image. Default is manifest type of source, with fallbacks.
                ///   - tlsVerify: Require TLS verification.
                internal init(
                    tag: Swift.String? = nil,
                    all: Swift.Bool? = nil,
                    compress: Swift.Bool? = nil,
                    destination: Swift.String? = nil,
                    format: Swift.String? = nil,
                    tlsVerify: Swift.Bool? = nil
                ) {
                    self.tag = tag
                    self.all = all
                    self.compress = compress
                    self.destination = destination
                    self.format = format
                    self.tlsVerify = tlsVerify
                }
            }
            internal var query: Operations.ImagePush.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// A base64-encoded auth configuration.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/header/X-Registry-Auth`.
                internal var X_hyphen_Registry_hyphen_Auth: Swift.String?
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePush.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64-encoded auth configuration.
                ///   - accept:
                internal init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePush.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImagePush.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImagePush.Input.Path,
                query: Operations.ImagePush.Input.Query = .init(),
                headers: Operations.ImagePush.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImagePush.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImagePush.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImagePush.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImagePush.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    internal enum ImageTag {
        internal static let id: Swift.String = "ImageTag"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageTag.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the repository to tag in
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query/repo`.
                internal var repo: Swift.String?
                /// the name of the new tag
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query/tag`.
                internal var tag: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - repo: the repository to tag in
                ///   - tag: the name of the new tag
                internal init(
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.repo = repo
                    self.tag = tag
                }
            }
            internal var query: Operations.ImageTag.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTag.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTag.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageTag.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageTag.Input.Path,
                query: Operations.ImageTag.Input.Query = .init(),
                headers: Operations.ImageTag.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageTag.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ImageTag.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create an image
    ///
    /// Create an image by either pulling it from a registry or importing it.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    internal enum ImageCreate {
        internal static let id: Swift.String = "ImageCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/create/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/fromImage`.
                internal var fromImage: Swift.String?
                /// Source to import. The value may be a URL from which the image can be retrieved or - to read the image from the request body. This parameter may only be used when importing an image
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/fromSrc`.
                internal var fromSrc: Swift.String?
                /// Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/repo`.
                internal var repo: Swift.String?
                /// Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/tag`.
                internal var tag: Swift.String?
                /// Set commit message for imported image.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/message`.
                internal var message: Swift.String?
                /// Platform in the format os[/arch[/variant]]
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/platform`.
                internal var platform: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fromImage: Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
                ///   - fromSrc: Source to import. The value may be a URL from which the image can be retrieved or - to read the image from the request body. This parameter may only be used when importing an image
                ///   - repo: Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
                ///   - tag: Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
                ///   - message: Set commit message for imported image.
                ///   - platform: Platform in the format os[/arch[/variant]]
                internal init(
                    fromImage: Swift.String? = nil,
                    fromSrc: Swift.String? = nil,
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil,
                    message: Swift.String? = nil,
                    platform: Swift.String? = nil
                ) {
                    self.fromImage = fromImage
                    self.fromSrc = fromSrc
                    self.repo = repo
                    self.tag = tag
                    self.message = message
                    self.platform = platform
                }
            }
            internal var query: Operations.ImageCreate.Input.Query
            /// - Remark: Generated from `#/paths/images/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// A base64-encoded auth configuration.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/header/X-Registry-Auth`.
                internal var X_hyphen_Registry_hyphen_Auth: Swift.String?
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64-encoded auth configuration.
                ///   - accept:
                internal init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCreate.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageCreate.Input.Headers
            /// - Remark: Generated from `#/paths/images/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/create/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/images/create/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ImageCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.ImageCreate.Input.Query = .init(),
                headers: Operations.ImageCreate.Input.Headers = .init(),
                body: Operations.ImageCreate.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/create/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/create/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image repositories
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    internal enum ImageGetAll {
        internal static let id: Swift.String = "ImageGetAll"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/get/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// one or more image names or IDs comma separated
                ///
                /// - Remark: Generated from `#/paths/images/get/GET/query/names`.
                internal var names: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - names: one or more image names or IDs comma separated
                internal init(names: Swift.String) {
                    self.names = names
                }
            }
            internal var query: Operations.ImageGetAll.Input.Query
            /// - Remark: Generated from `#/paths/images/get/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageGetAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageGetAll.Input.Query,
                headers: Operations.ImageGetAll.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/get/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/get/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageGetAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageGetAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageGetAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageGetAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    internal enum ImageList {
        internal static let id: Swift.String = "ImageList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Show all images. Only images from a final layer (no children) are shown by default.
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/all`.
                internal var all: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                /// - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                /// - `dangling=true`
                /// - `label=key` or `label="key=value"` of an image label
                /// - `reference`=(`<image-name>[:<tag>]`)
                /// - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                ///
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Not supported
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/digests`.
                internal var digests: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Show all images. Only images from a final layer (no children) are shown by default.
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                ///   - digests: Not supported
                internal init(
                    all: Swift.Bool? = nil,
                    filters: Swift.String? = nil,
                    digests: Swift.Bool? = nil
                ) {
                    self.all = all
                    self.filters = filters
                    self.digests = digests
                }
            }
            internal var query: Operations.ImageList.Input.Query
            /// - Remark: Generated from `#/paths/images/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageList.Input.Query = .init(),
                headers: Operations.ImageList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image summary for compat API
            ///
            /// - Remark: Generated from `#/paths//images/json/get(ImageList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imageList)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imageList {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/json/get(ImageList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Import image
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    internal enum ImageLoad {
        internal static let id: Swift.String = "ImageLoad"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/load/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// not supported
                ///
                /// - Remark: Generated from `#/paths/images/load/POST/query/quiet`.
                internal var quiet: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - quiet: not supported
                internal init(quiet: Swift.Bool? = nil) {
                    self.quiet = quiet
                }
            }
            internal var query: Operations.ImageLoad.Input.Query
            /// - Remark: Generated from `#/paths/images/load/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoad.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoad.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageLoad.Input.Headers
            /// - Remark: Generated from `#/paths/images/load/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/load/POST/requestBody/content/application\/json`.
                case json(Swift.String)
                /// - Remark: Generated from `#/paths/images/load/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ImageLoad.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.ImageLoad.Input.Query = .init(),
                headers: Operations.ImageLoad.Input.Headers = .init(),
                body: Operations.ImageLoad.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageLoad.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageLoad.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune unused images
    ///
    /// Remove images from local storage that are not being used by a container
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    internal enum ImagePrune {
        internal static let id: Swift.String = "ImagePrune"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// filters to apply to image pruning, encoded as JSON (map[string][]string). Available filters:
                ///   - `dangling=<boolean>` When set to `true` (or `1`), prune only
                ///      unused *and* untagged images. When set to `false`
                ///      (or `0`), all unused images are pruned.
                ///   - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: filters to apply to image pruning, encoded as JSON (map[string][]string). Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.ImagePrune.Input.Query
            /// - Remark: Generated from `#/paths/images/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImagePrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImagePrune.Input.Query = .init(),
                headers: Operations.ImagePrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Delete
            ///
            /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imageDeleteResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imageDeleteResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Search images
    ///
    /// Search registries for an image
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    internal enum ImageSearch {
        internal static let id: Swift.String = "ImageSearch"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/search/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// term to search
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/term`.
                internal var term: Swift.String?
                /// maximum number of results
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/limit`.
                internal var limit: Swift.Int?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                /// - `is-automated=(true|false)`
                /// - `is-official=(true|false)`
                /// - `stars=<number>` Matches images that have at least 'number' stars.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/filters`.
                internal var filters: Swift.String?
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// list the available tags in the repository
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/listTags`.
                internal var listTags: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - term: term to search
                ///   - limit: maximum number of results
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                ///   - listTags: list the available tags in the repository
                internal init(
                    term: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    filters: Swift.String? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    listTags: Swift.Bool? = nil
                ) {
                    self.term = term
                    self.limit = limit
                    self.filters = filters
                    self.tlsVerify = tlsVerify
                    self.listTags = listTags
                }
            }
            internal var query: Operations.ImageSearch.Input.Query
            /// - Remark: Generated from `#/paths/images/search/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageSearch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageSearch.Input.Query = .init(),
                headers: Operations.ImageSearch.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Registry Search
            ///
            /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.registrySearchResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.registrySearchResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    internal enum SystemInfo {
        internal static let id: Swift.String = "SystemInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/info/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// to be determined
            ///
            /// - Remark: Generated from `#/paths//info/get(SystemInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemInfo.Output.Ok)
            /// to be determined
            ///
            /// - Remark: Generated from `#/paths//info/get(SystemInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.SystemInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//info/get(SystemInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Ping service
    ///
    /// Return protocol information in response headers.
    /// `HEAD /libpod/_ping` is also supported.
    /// `/_ping` is available for compatibility with other engines.
    /// The '_ping' endpoints are not versioned.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/_ping`.
    /// - Remark: Generated from `#/paths//libpod/_ping/get(SystemPing)`.
    internal enum SystemPing {
        internal static let id: Swift.String = "SystemPing"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/_ping/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPing.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPing.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemPing.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemPing.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// Max compatibility API Version the server supports
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/API-Version`.
                    internal var API_hyphen_Version: Swift.String?
                    /// Default version of docker image builder
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/BuildKit-Version`.
                    internal var BuildKit_hyphen_Version: Swift.String?
                    /// always no-cache
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/Cache-Control`.
                    internal var Cache_hyphen_Control: Swift.String?
                    /// If the server is running with experimental mode enabled, always true
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/Docker-Experimental`.
                    internal var Docker_hyphen_Experimental: Swift.Bool?
                    /// Max Podman API Version the server supports.
                    /// Available if service is backed by Podman, therefore may be used to
                    /// determine if talking to Podman engine or another engine
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/Libpod-API-Version`.
                    internal var Libpod_hyphen_API_hyphen_Version: Swift.String?
                    /// Default version of libpod image builder.
                    ///   Available if service is backed by Podman, therefore may be used to
                    ///   determine if talking to Podman engine or another engine
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/Libpod-Buildah-Version`.
                    internal var Libpod_hyphen_Buildah_hyphen_Version: Swift.String?
                    /// always no-cache
                    ///
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/headers/Pragma`.
                    internal var Pragma: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - API_hyphen_Version: Max compatibility API Version the server supports
                    ///   - BuildKit_hyphen_Version: Default version of docker image builder
                    ///   - Cache_hyphen_Control: always no-cache
                    ///   - Docker_hyphen_Experimental: If the server is running with experimental mode enabled, always true
                    ///   - Libpod_hyphen_API_hyphen_Version: Max Podman API Version the server supports.
                    ///   - Libpod_hyphen_Buildah_hyphen_Version: Default version of libpod image builder.
                    ///   - Pragma: always no-cache
                    internal init(
                        API_hyphen_Version: Swift.String? = nil,
                        BuildKit_hyphen_Version: Swift.String? = nil,
                        Cache_hyphen_Control: Swift.String? = nil,
                        Docker_hyphen_Experimental: Swift.Bool? = nil,
                        Libpod_hyphen_API_hyphen_Version: Swift.String? = nil,
                        Libpod_hyphen_Buildah_hyphen_Version: Swift.String? = nil,
                        Pragma: Swift.String? = nil
                    ) {
                        self.API_hyphen_Version = API_hyphen_Version
                        self.BuildKit_hyphen_Version = BuildKit_hyphen_Version
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Docker_hyphen_Experimental = Docker_hyphen_Experimental
                        self.Libpod_hyphen_API_hyphen_Version = Libpod_hyphen_API_hyphen_Version
                        self.Libpod_hyphen_Buildah_hyphen_Version = Libpod_hyphen_Buildah_hyphen_Version
                        self.Pragma = Pragma
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.SystemPing.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/_ping/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    internal var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.SystemPing.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.SystemPing.Output.Ok.Headers = .init(),
                    body: Operations.SystemPing.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Success
            ///
            /// - Remark: Generated from `#/paths//libpod/_ping/get(SystemPing)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemPing.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.SystemPing.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/_ping/get(SystemPing)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case json
            case binary
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                }
            }
            internal static var allCases: [Self] {
                [
                    .plainText,
                    .json,
                    .binary
                ]
            }
        }
    }
    /// Create image
    ///
    /// Build an image from the given Dockerfile(s)
    ///
    /// - Remark: HTTP `POST /libpod/build`.
    /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)`.
    internal enum ImageBuildLibpod {
        internal static let id: Swift.String = "ImageBuildLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/build/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Path within the build context to the `Dockerfile`.
                /// This is ignored if remote is specified and points to an external `Dockerfile`.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/dockerfile`.
                internal var dockerfile: Swift.String?
                /// A name and optional tag to apply to the image in the `name:tag` format.  If you omit the tag, the default latest value is assumed. You can provide several t parameters.
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/t`.
                internal var t: Swift.String?
                /// Instead of building for a set of platforms specified using the platform option, inspect the build's base images,
                /// and build for all of the platforms that are available.  Stages that use *scratch* as a starting point can not be inspected,
                /// so at least one non-*scratch* stage must be present for detection to work usefully.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/allplatforms`.
                internal var allplatforms: Swift.Bool?
                /// TBD Extra hosts to add to /etc/hosts
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/extrahosts`.
                internal var extrahosts: Swift.String?
                /// Not to create /etc/hosts when building the image
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/nohosts`.
                internal var nohosts: Swift.Bool?
                /// A Git repository URI or HTTP/HTTPS context URI.
                /// If the URI points to a single text file, the fileâ€™s contents are placed
                /// into a file called Dockerfile and the image is built from that file. If
                /// the URI points to a tarball, the file is downloaded by the daemon and the
                /// contents therein used as the context for the build. If the URI points to a
                /// tarball and the dockerfile parameter is also specified, there must be a file
                /// with the corresponding path inside the tarball.
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/remote`.
                internal var remote: Swift.String?
                /// Suppress verbose build output
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/q`.
                internal var q: Swift.Bool?
                /// Contents of base images to be modified on ADD or COPY only
                /// (As of Podman version v5.2)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/compatvolumes`.
                internal var compatvolumes: Swift.Bool?
                /// Do not use the cache when building the image
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/nocache`.
                internal var nocache: Swift.Bool?
                /// JSON array of images used to build cache resolution
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/cachefrom`.
                internal var cachefrom: Swift.String?
                /// Attempt to pull the image even if an older image exists locally
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/pull`.
                internal var pull: Swift.Bool?
                /// Remove intermediate containers after a successful build
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/rm`.
                internal var rm: Swift.Bool?
                /// Always remove intermediate containers, even upon failure
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/forcerm`.
                internal var forcerm: Swift.Bool?
                /// Memory is the upper limit (in bytes) on how much memory running containers can use
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/memory`.
                internal var memory: Swift.Int?
                /// MemorySwap limits the amount of memory and swap together
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/memswap`.
                internal var memswap: Swift.Int?
                /// CPUShares (relative weight
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/cpushares`.
                internal var cpushares: Swift.Int?
                /// CPUSetCPUs in which to allow execution (0-3, 0,1)
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/cpusetcpus`.
                internal var cpusetcpus: Swift.String?
                /// CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/cpuperiod`.
                internal var cpuperiod: Swift.Int?
                /// CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/cpuquota`.
                internal var cpuquota: Swift.Int?
                /// JSON map of string pairs denoting build-time variables.
                /// For example, the build argument `Foo` with the value of `bar` would be encoded in JSON as `["Foo":"bar"]`.
                ///
                /// For example, buildargs={"Foo":"bar"}.
                ///
                /// Note(s):
                /// * This should not be used to pass secrets.
                /// * The value of buildargs should be URI component encoded before being passed to the API.
                ///
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/buildargs`.
                internal var buildargs: Swift.String?
                /// ShmSize is the "size" value to use when mounting an shmfs on the container's /dev/shm directory.
                /// Default is 64MB
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/shmsize`.
                internal var shmsize: Swift.Int?
                /// Silently ignored.
                /// Squash the resulting images layers into a single layer
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/squash`.
                internal var squash: Swift.Bool?
                /// JSON map of key, value pairs to set as labels on the new image
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/labels`.
                internal var labels: Swift.String?
                /// Add an intermediate image *label* (e.g. label=*value*) to the intermediate image metadata.
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/layerLabel`.
                internal var layerLabel: [Swift.String]?
                /// Cache intermediate layers during build.
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/layers`.
                internal var layers: Swift.Bool?
                /// Sets the networking mode for the run commands during build.
                /// Supported standard values are:
                ///   * `bridge` limited to containers within a single host, port mapping required for external access
                ///   * `host` no isolation between host and containers on this network
                ///   * `none` disable all networking for this container
                ///   * container:<nameOrID> share networking with given container
                ///   ---All other values are assumed to be a custom network's name
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/networkmode`.
                internal var networkmode: Swift.String?
                /// Platform format os[/arch[/variant]]
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/platform`.
                internal var platform: Swift.String?
                /// Target build stage
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/target`.
                internal var target: Swift.String?
                /// output configuration TBD
                /// (As of version 1.xx)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/outputs`.
                internal var outputs: Swift.String?
                /// Inject http proxy environment variables into container
                /// (As of version 2.0.0)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/httpproxy`.
                internal var httpproxy: Swift.Bool?
                /// Unset environment variables from the final image.
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/unsetenv`.
                internal var unsetenv: [Swift.String]?
                /// Unset the image label, causing the label not to be inherited from the base image.
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/unsetlabel`.
                internal var unsetlabel: [Swift.String]?
                /// Extra volumes that should be mounted in the build container.
                ///
                /// - Remark: Generated from `#/paths/libpod/build/POST/query/volume`.
                internal var volume: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - dockerfile: Path within the build context to the `Dockerfile`.
                ///   - t: A name and optional tag to apply to the image in the `name:tag` format.  If you omit the tag, the default latest value is assumed. You can provide several t parameters.
                ///   - allplatforms: Instead of building for a set of platforms specified using the platform option, inspect the build's base images,
                ///   - extrahosts: TBD Extra hosts to add to /etc/hosts
                ///   - nohosts: Not to create /etc/hosts when building the image
                ///   - remote: A Git repository URI or HTTP/HTTPS context URI.
                ///   - q: Suppress verbose build output
                ///   - compatvolumes: Contents of base images to be modified on ADD or COPY only
                ///   - nocache: Do not use the cache when building the image
                ///   - cachefrom: JSON array of images used to build cache resolution
                ///   - pull: Attempt to pull the image even if an older image exists locally
                ///   - rm: Remove intermediate containers after a successful build
                ///   - forcerm: Always remove intermediate containers, even upon failure
                ///   - memory: Memory is the upper limit (in bytes) on how much memory running containers can use
                ///   - memswap: MemorySwap limits the amount of memory and swap together
                ///   - cpushares: CPUShares (relative weight
                ///   - cpusetcpus: CPUSetCPUs in which to allow execution (0-3, 0,1)
                ///   - cpuperiod: CPUPeriod limits the CPU CFS (Completely Fair Scheduler) period
                ///   - cpuquota: CPUQuota limits the CPU CFS (Completely Fair Scheduler) quota
                ///   - buildargs: JSON map of string pairs denoting build-time variables.
                ///   - shmsize: ShmSize is the "size" value to use when mounting an shmfs on the container's /dev/shm directory.
                ///   - squash: Silently ignored.
                ///   - labels: JSON map of key, value pairs to set as labels on the new image
                ///   - layerLabel: Add an intermediate image *label* (e.g. label=*value*) to the intermediate image metadata.
                ///   - layers: Cache intermediate layers during build.
                ///   - networkmode: Sets the networking mode for the run commands during build.
                ///   - platform: Platform format os[/arch[/variant]]
                ///   - target: Target build stage
                ///   - outputs: output configuration TBD
                ///   - httpproxy: Inject http proxy environment variables into container
                ///   - unsetenv: Unset environment variables from the final image.
                ///   - unsetlabel: Unset the image label, causing the label not to be inherited from the base image.
                ///   - volume: Extra volumes that should be mounted in the build container.
                internal init(
                    dockerfile: Swift.String? = nil,
                    t: Swift.String? = nil,
                    allplatforms: Swift.Bool? = nil,
                    extrahosts: Swift.String? = nil,
                    nohosts: Swift.Bool? = nil,
                    remote: Swift.String? = nil,
                    q: Swift.Bool? = nil,
                    compatvolumes: Swift.Bool? = nil,
                    nocache: Swift.Bool? = nil,
                    cachefrom: Swift.String? = nil,
                    pull: Swift.Bool? = nil,
                    rm: Swift.Bool? = nil,
                    forcerm: Swift.Bool? = nil,
                    memory: Swift.Int? = nil,
                    memswap: Swift.Int? = nil,
                    cpushares: Swift.Int? = nil,
                    cpusetcpus: Swift.String? = nil,
                    cpuperiod: Swift.Int? = nil,
                    cpuquota: Swift.Int? = nil,
                    buildargs: Swift.String? = nil,
                    shmsize: Swift.Int? = nil,
                    squash: Swift.Bool? = nil,
                    labels: Swift.String? = nil,
                    layerLabel: [Swift.String]? = nil,
                    layers: Swift.Bool? = nil,
                    networkmode: Swift.String? = nil,
                    platform: Swift.String? = nil,
                    target: Swift.String? = nil,
                    outputs: Swift.String? = nil,
                    httpproxy: Swift.Bool? = nil,
                    unsetenv: [Swift.String]? = nil,
                    unsetlabel: [Swift.String]? = nil,
                    volume: [Swift.String]? = nil
                ) {
                    self.dockerfile = dockerfile
                    self.t = t
                    self.allplatforms = allplatforms
                    self.extrahosts = extrahosts
                    self.nohosts = nohosts
                    self.remote = remote
                    self.q = q
                    self.compatvolumes = compatvolumes
                    self.nocache = nocache
                    self.cachefrom = cachefrom
                    self.pull = pull
                    self.rm = rm
                    self.forcerm = forcerm
                    self.memory = memory
                    self.memswap = memswap
                    self.cpushares = cpushares
                    self.cpusetcpus = cpusetcpus
                    self.cpuperiod = cpuperiod
                    self.cpuquota = cpuquota
                    self.buildargs = buildargs
                    self.shmsize = shmsize
                    self.squash = squash
                    self.labels = labels
                    self.layerLabel = layerLabel
                    self.layers = layers
                    self.networkmode = networkmode
                    self.platform = platform
                    self.target = target
                    self.outputs = outputs
                    self.httpproxy = httpproxy
                    self.unsetenv = unsetenv
                    self.unsetlabel = unsetlabel
                    self.volume = volume
                }
            }
            internal var query: Operations.ImageBuildLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/build/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuildLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuildLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageBuildLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageBuildLibpod.Input.Query = .init(),
                headers: Operations.ImageBuildLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/build/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/build/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// output from build process
                        ///
                        /// - Remark: Generated from `#/paths/libpod/build/POST/responses/200/content/json/stream`.
                        internal var stream: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - stream: output from build process
                        internal init(stream: Swift.String) {
                            self.stream = stream
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case stream
                        }
                    }
                    /// - Remark: Generated from `#/paths/libpod/build/POST/responses/200/content/application\/json`.
                    case json(Operations.ImageBuildLibpod.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.ImageBuildLibpod.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageBuildLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageBuildLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK (As of version 1.xx)
            ///
            /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageBuildLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageBuildLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/build/post(ImageBuildLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Commit
    ///
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /libpod/commit`.
    /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)`.
    internal enum ImageCommitLibpod {
        internal static let id: Swift.String = "ImageCommitLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/commit/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the name or ID of a container
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/container`.
                internal var container: Swift.String
                /// author of the image
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/author`.
                internal var author: Swift.String?
                /// instructions to apply while committing in Dockerfile format (i.e. "CMD=/bin/foo")
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/changes`.
                internal var changes: [Swift.String]?
                /// commit message
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/comment`.
                internal var comment: Swift.String?
                /// format of the image manifest and metadata (default "oci")
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/format`.
                internal var format: Swift.String?
                /// pause the container before committing it
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/pause`.
                internal var pause: Swift.Bool?
                /// squash the container before committing it
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/squash`.
                internal var squash: Swift.Bool?
                /// the repository name for the created image
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/repo`.
                internal var repo: Swift.String?
                /// output from commit process
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/stream`.
                internal var stream: Swift.Bool?
                /// tag name for the created image
                ///
                /// - Remark: Generated from `#/paths/libpod/commit/POST/query/tag`.
                internal var tag: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - container: the name or ID of a container
                ///   - author: author of the image
                ///   - changes: instructions to apply while committing in Dockerfile format (i.e. "CMD=/bin/foo")
                ///   - comment: commit message
                ///   - format: format of the image manifest and metadata (default "oci")
                ///   - pause: pause the container before committing it
                ///   - squash: squash the container before committing it
                ///   - repo: the repository name for the created image
                ///   - stream: output from commit process
                ///   - tag: tag name for the created image
                internal init(
                    container: Swift.String,
                    author: Swift.String? = nil,
                    changes: [Swift.String]? = nil,
                    comment: Swift.String? = nil,
                    format: Swift.String? = nil,
                    pause: Swift.Bool? = nil,
                    squash: Swift.Bool? = nil,
                    repo: Swift.String? = nil,
                    stream: Swift.Bool? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.container = container
                    self.author = author
                    self.changes = changes
                    self.comment = comment
                    self.format = format
                    self.pause = pause
                    self.squash = squash
                    self.repo = repo
                    self.stream = stream
                    self.tag = tag
                }
            }
            internal var query: Operations.ImageCommitLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/commit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommitLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommitLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageCommitLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageCommitLibpod.Input.Query,
                headers: Operations.ImageCommitLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageCommitLibpod.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ImageCommitLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/commit/post(ImageCommitLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete container
    ///
    /// Delete container
    ///
    /// - Remark: HTTP `DELETE /libpod/containers/{name}`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)`.
    internal enum ContainerDeleteLibpod {
        internal static let id: Swift.String = "ContainerDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// additionally remove containers that depend on the container to be removed
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query/depend`.
                internal var depend: Swift.Bool?
                /// force stop container if running
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// ignore errors when the container to be removed does not existxo
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query/ignore`.
                internal var ignore: Swift.Bool?
                /// number of seconds to wait before killing container when force removing
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query/timeout`.
                internal var timeout: Swift.Int?
                /// delete volumes
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/query/v`.
                internal var v: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - depend: additionally remove containers that depend on the container to be removed
                ///   - force: force stop container if running
                ///   - ignore: ignore errors when the container to be removed does not existxo
                ///   - timeout: number of seconds to wait before killing container when force removing
                ///   - v: delete volumes
                internal init(
                    depend: Swift.Bool? = nil,
                    force: Swift.Bool? = nil,
                    ignore: Swift.Bool? = nil,
                    timeout: Swift.Int? = nil,
                    v: Swift.Bool? = nil
                ) {
                    self.depend = depend
                    self.force = force
                    self.ignore = ignore
                    self.timeout = timeout
                    self.v = v
                }
            }
            internal var query: Operations.ContainerDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerDeleteLibpod.Input.Path,
                query: Operations.ContainerDeleteLibpod.Input.Query = .init(),
                headers: Operations.ContainerDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Remove Containers
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerRemoveLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerRemoveLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerDeleteLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerDeleteLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/delete(ContainerDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Copy files from a container
    ///
    /// Copy a tar archive of files from a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)`.
    internal enum ContainerArchiveLibpod {
        internal static let id: Swift.String = "ContainerArchiveLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// container name or id
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: container name or id
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerArchiveLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Path to a directory in the container to extract
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/query/path`.
                internal var path: Swift.String
                /// JSON encoded map[string]string to translate paths
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/query/rename`.
                internal var rename: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Path to a directory in the container to extract
                ///   - rename: JSON encoded map[string]string to translate paths
                internal init(
                    path: Swift.String,
                    rename: Swift.String? = nil
                ) {
                    self.path = path
                    self.rename = rename
                }
            }
            internal var query: Operations.ContainerArchiveLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchiveLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchiveLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerArchiveLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerArchiveLibpod.Input.Path,
                query: Operations.ContainerArchiveLibpod.Input.Query,
                headers: Operations.ContainerArchiveLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerArchiveLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerArchiveLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerArchiveLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerArchiveLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/get(ContainerArchiveLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Copy files into a container
    ///
    /// Copy a tar archive of files into a container
    ///
    /// - Remark: HTTP `PUT /libpod/containers/{name}/archive`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)`.
    internal enum PutContainerArchiveLibpod {
        internal static let id: Swift.String = "PutContainerArchiveLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// container name or id
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: container name or id
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PutContainerArchiveLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/query`.
            internal struct Query: Sendable, Hashable {
                /// Path to a directory in the container to extract
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/query/path`.
                internal var path: Swift.String
                /// pause the container while copying (defaults to true)
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/query/pause`.
                internal var pause: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Path to a directory in the container to extract
                ///   - pause: pause the container while copying (defaults to true)
                internal init(
                    path: Swift.String,
                    pause: Swift.Bool? = nil
                ) {
                    self.path = path
                    self.pause = pause
                }
            }
            internal var query: Operations.PutContainerArchiveLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/archive/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchiveLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchiveLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PutContainerArchiveLibpod.Input.Headers
            internal var body: Components.RequestBodies.PutContainerArchiveRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.PutContainerArchiveLibpod.Input.Path,
                query: Operations.PutContainerArchiveLibpod.Input.Query,
                headers: Operations.PutContainerArchiveLibpod.Input.Headers = .init(),
                body: Components.RequestBodies.PutContainerArchiveRequest? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutContainerArchiveLibpod.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.PutContainerArchiveLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                internal init() {}
            }
            /// the container rootfs is read-only
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PutContainerArchiveLibpod.Output.Forbidden)
            /// the container rootfs is read-only
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Operations.PutContainerArchiveLibpod.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/archive/put(PutContainerArchiveLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the service for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To inform potential proxies about connection hijacking, the client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /v4.6.0/libpod/containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The service will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled for the container,
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// (starting with v4.7.0, previously application/vnd.docker.raw-stream was always used)
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information about the output stream type and the size of
    /// the payload.
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which contains the specified number of
    /// bytes as written in the size.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled for the container,
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/attach`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)`.
    internal enum ContainerAttachLibpod {
        internal static let id: Swift.String = "ContainerAttachLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerAttachLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// keys to use for detaching from the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/detachKeys`.
                internal var detachKeys: Swift.String?
                /// Stream all logs from the container across the connection. Happens before streaming attach (if requested). At least one of logs or stream must be set
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/logs`.
                internal var logs: Swift.Bool?
                /// Attach to the container. If unset, and logs is set, only the container's logs will be sent. At least one of stream or logs must be set
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/stream`.
                internal var stream: Swift.Bool?
                /// Attach to container STDOUT
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/stdout`.
                internal var stdout: Swift.Bool?
                /// Attach to container STDERR
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/stderr`.
                internal var stderr: Swift.Bool?
                /// Attach to container STDIN
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/query/stdin`.
                internal var stdin: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: keys to use for detaching from the container
                ///   - logs: Stream all logs from the container across the connection. Happens before streaming attach (if requested). At least one of logs or stream must be set
                ///   - stream: Attach to the container. If unset, and logs is set, only the container's logs will be sent. At least one of stream or logs must be set
                ///   - stdout: Attach to container STDOUT
                ///   - stderr: Attach to container STDERR
                ///   - stdin: Attach to container STDIN
                internal init(
                    detachKeys: Swift.String? = nil,
                    logs: Swift.Bool? = nil,
                    stream: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    stdin: Swift.Bool? = nil
                ) {
                    self.detachKeys = detachKeys
                    self.logs = logs
                    self.stream = stream
                    self.stdout = stdout
                    self.stderr = stderr
                    self.stdin = stdin
                }
            }
            internal var query: Operations.ContainerAttachLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/attach/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttachLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttachLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerAttachLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerAttachLibpod.Input.Path,
                query: Operations.ContainerAttachLibpod.Input.Query = .init(),
                headers: Operations.ContainerAttachLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct SwitchingProtocols: Sendable, Hashable {
                /// Creates a new `SwitchingProtocols`.
                internal init() {}
            }
            /// No error, connection has been hijacked for transporting streams.
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            case switchingProtocols(Operations.ContainerAttachLibpod.Output.SwitchingProtocols)
            /// No error, connection has been hijacked for transporting streams.
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            internal static var switchingProtocols: Self {
                .switchingProtocols(.init())
            }
            /// The associated value of the enum case if `self` is `.switchingProtocols`.
            ///
            /// - Throws: An error if `self` is not `.switchingProtocols`.
            /// - SeeAlso: `.switchingProtocols`.
            internal var switchingProtocols: Operations.ContainerAttachLibpod.Output.SwitchingProtocols {
                get throws {
                    switch self {
                    case let .switchingProtocols(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "switchingProtocols",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/attach/post(ContainerAttachLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Report on changes to container's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)`.
    internal enum ContainerChangesLibpod {
        internal static let id: Swift.String = "ContainerChangesLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or id of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or id of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerChangesLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// specify a second layer which is used to compare against it instead of the parent layer
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/query/parent`.
                internal var parent: Swift.String?
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/query/diffType`.
                internal enum diffTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case container = "container"
                    case image = "image"
                }
                /// select what you want to match, default is all
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/query/diffType`.
                internal var diffType: Operations.ContainerChangesLibpod.Input.Query.diffTypePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - parent: specify a second layer which is used to compare against it instead of the parent layer
                ///   - diffType: select what you want to match, default is all
                internal init(
                    parent: Swift.String? = nil,
                    diffType: Operations.ContainerChangesLibpod.Input.Query.diffTypePayload? = nil
                ) {
                    self.parent = parent
                    self.diffType = diffType
                }
            }
            internal var query: Operations.ContainerChangesLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/changes/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerChangesLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerChangesLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerChangesLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerChangesLibpod.Input.Path,
                query: Operations.ContainerChangesLibpod.Input.Query = .init(),
                headers: Operations.ContainerChangesLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Array of Changes
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerChangesLibpod.Output.Ok)
            /// Array of Changes
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerChangesLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/changes/get(ContainerChangesLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Checkpoint a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/checkpoint`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)`.
    internal enum ContainerCheckpointLibpod {
        internal static let id: Swift.String = "ContainerCheckpointLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerCheckpointLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// keep all temporary checkpoint files
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/keep`.
                internal var keep: Swift.Bool?
                /// leave the container running after writing checkpoint to disk
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/leaveRunning`.
                internal var leaveRunning: Swift.Bool?
                /// checkpoint a container with established TCP connections
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/tcpEstablished`.
                internal var tcpEstablished: Swift.Bool?
                /// export the checkpoint image to a tar.gz
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/export`.
                internal var export: Swift.Bool?
                /// do not include root file-system changes when exporting. can only be used with export
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/ignoreRootFS`.
                internal var ignoreRootFS: Swift.Bool?
                /// do not include associated volumes. can only be used with export
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/ignoreVolumes`.
                internal var ignoreVolumes: Swift.Bool?
                /// dump the container's memory information only, leaving the container running. only works on runc 1.0-rc or higher
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/preCheckpoint`.
                internal var preCheckpoint: Swift.Bool?
                /// check out the container with previous criu image files in pre-dump. only works on runc 1.0-rc or higher
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/withPrevious`.
                internal var withPrevious: Swift.Bool?
                /// checkpoint a container with filelocks
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/fileLocks`.
                internal var fileLocks: Swift.Bool?
                /// add checkpoint statistics to the returned CheckpointReport
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/query/printStats`.
                internal var printStats: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - keep: keep all temporary checkpoint files
                ///   - leaveRunning: leave the container running after writing checkpoint to disk
                ///   - tcpEstablished: checkpoint a container with established TCP connections
                ///   - export: export the checkpoint image to a tar.gz
                ///   - ignoreRootFS: do not include root file-system changes when exporting. can only be used with export
                ///   - ignoreVolumes: do not include associated volumes. can only be used with export
                ///   - preCheckpoint: dump the container's memory information only, leaving the container running. only works on runc 1.0-rc or higher
                ///   - withPrevious: check out the container with previous criu image files in pre-dump. only works on runc 1.0-rc or higher
                ///   - fileLocks: checkpoint a container with filelocks
                ///   - printStats: add checkpoint statistics to the returned CheckpointReport
                internal init(
                    keep: Swift.Bool? = nil,
                    leaveRunning: Swift.Bool? = nil,
                    tcpEstablished: Swift.Bool? = nil,
                    export: Swift.Bool? = nil,
                    ignoreRootFS: Swift.Bool? = nil,
                    ignoreVolumes: Swift.Bool? = nil,
                    preCheckpoint: Swift.Bool? = nil,
                    withPrevious: Swift.Bool? = nil,
                    fileLocks: Swift.Bool? = nil,
                    printStats: Swift.Bool? = nil
                ) {
                    self.keep = keep
                    self.leaveRunning = leaveRunning
                    self.tcpEstablished = tcpEstablished
                    self.export = export
                    self.ignoreRootFS = ignoreRootFS
                    self.ignoreVolumes = ignoreVolumes
                    self.preCheckpoint = preCheckpoint
                    self.withPrevious = withPrevious
                    self.fileLocks = fileLocks
                    self.printStats = printStats
                }
            }
            internal var query: Operations.ContainerCheckpointLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/checkpoint/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCheckpointLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCheckpointLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerCheckpointLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerCheckpointLibpod.Input.Path,
                query: Operations.ContainerCheckpointLibpod.Input.Query = .init(),
                headers: Operations.ContainerCheckpointLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// tarball is returned in body if exported
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerCheckpointLibpod.Output.Ok)
            /// tarball is returned in body if exported
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerCheckpointLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/checkpoint/post(ContainerCheckpointLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create an exec instance
    ///
    /// Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/exec`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)`.
    internal enum ContainerExecLibpod {
        internal static let id: Swift.String = "ContainerExecLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/exec/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// name of container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/exec/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: name of container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerExecLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/exec/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExecLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExecLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerExecLibpod.Input.Headers
            internal var body: Components.RequestBodies.ContainerExecControl?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ContainerExecLibpod.Input.Path,
                headers: Operations.ContainerExecLibpod.Input.Headers = .init(),
                body: Components.RequestBodies.ContainerExecControl? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ContainerExecLibpod.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ContainerExecLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// container is paused
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerExecLibpod.Output.Conflict)
            /// container is paused
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ContainerExecLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exec/post(ContainerExecLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Check if container exists
    ///
    /// Quick way to determine if a container exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)`.
    internal enum ContainerExistsLibpod {
        internal static let id: Swift.String = "ContainerExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerExistsLibpod.Input.Path,
                headers: Operations.ContainerExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// container exists
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerExistsLibpod.Output.NoContent)
            /// container exists
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/exists/get(ContainerExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/export`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)`.
    internal enum ContainerExportLibpod {
        internal static let id: Swift.String = "ContainerExportLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/export/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/export/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerExportLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/export/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExportLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExportLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerExportLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerExportLibpod.Input.Path,
                headers: Operations.ContainerExportLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// tarball is returned in body
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerExportLibpod.Output.Ok)
            /// tarball is returned in body
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerExportLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/export/get(ContainerExportLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Run a container's healthcheck
    ///
    /// Execute the defined healthcheck and return information about the results
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/healthcheck`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)`.
    internal enum ContainerHealthcheckLibpod {
        internal static let id: Swift.String = "ContainerHealthcheckLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/healthcheck/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/healthcheck/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerHealthcheckLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/healthcheck/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerHealthcheckLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerHealthcheckLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerHealthcheckLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerHealthcheckLibpod.Input.Path,
                headers: Operations.ContainerHealthcheckLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Healthcheck Results
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.healthCheck)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.healthCheck {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// container has no healthcheck or is not running
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerHealthcheckLibpod.Output.Conflict)
            /// container has no healthcheck or is not running
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ContainerHealthcheckLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/healthcheck/get(ContainerHealthcheckLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Initialize a container
    ///
    /// Performs all tasks necessary for initializing the container but does not start the container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/init`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)`.
    internal enum ContainerInitLibpod {
        internal static let id: Swift.String = "ContainerInitLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/init/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/init/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerInitLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/init/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInitLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInitLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerInitLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerInitLibpod.Input.Path,
                headers: Operations.ContainerInitLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerInitLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerInitLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            internal struct NotModified: Sendable, Hashable {
                /// Creates a new `NotModified`.
                internal init() {}
            }
            /// container already initialized
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Operations.ContainerInitLibpod.Output.NotModified)
            /// container already initialized
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            internal static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Operations.ContainerInitLibpod.Output.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/init/post(ContainerInitLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)`.
    internal enum ContainerInspectLibpod {
        internal static let id: Swift.String = "ContainerInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// display filesystem usage
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/json/GET/query/size`.
                internal var size: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - size: display filesystem usage
                internal init(size: Swift.Bool? = nil) {
                    self.size = size
                }
            }
            internal var query: Operations.ContainerInspectLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerInspectLibpod.Input.Path,
                query: Operations.ContainerInspectLibpod.Input.Query = .init(),
                headers: Operations.ContainerInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Inspect container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerInspectResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerInspectResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/json/get(ContainerInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Kill container
    ///
    /// send a signal to a container, defaults to killing the container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)`.
    internal enum ContainerKillLibpod {
        internal static let id: Swift.String = "ContainerKillLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/kill/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/kill/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerKillLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/kill/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// signal to be sent to container, either by integer or SIG_ name
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/kill/POST/query/signal`.
                internal var signal: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - signal: signal to be sent to container, either by integer or SIG_ name
                internal init(signal: Swift.String? = nil) {
                    self.signal = signal
                }
            }
            internal var query: Operations.ContainerKillLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/kill/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKillLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKillLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerKillLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerKillLibpod.Input.Path,
                query: Operations.ContainerKillLibpod.Input.Query = .init(),
                headers: Operations.ContainerKillLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerKillLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerKillLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/kill/post(ContainerKillLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get container logs
    ///
    /// Get stdout and stderr logs from a container.
    ///
    /// The stream format is the same as described in the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/logs`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)`.
    internal enum ContainerLogsLibpod {
        internal static let id: Swift.String = "ContainerLogsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerLogsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Keep connection after returning logs.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/follow`.
                internal var follow: Swift.Bool?
                /// Return logs from stdout
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/stdout`.
                internal var stdout: Swift.Bool?
                /// Return logs from stderr
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/stderr`.
                internal var stderr: Swift.Bool?
                /// Only return logs since this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/since`.
                internal var since: Swift.String?
                /// Only return logs before this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/until`.
                internal var until: Swift.String?
                /// Add timestamps to every log line
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/timestamps`.
                internal var timestamps: Swift.Bool?
                /// Only return this number of log lines from the end of the logs
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/query/tail`.
                internal var tail: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - follow: Keep connection after returning logs.
                ///   - stdout: Return logs from stdout
                ///   - stderr: Return logs from stderr
                ///   - since: Only return logs since this time, as a UNIX timestamp
                ///   - until: Only return logs before this time, as a UNIX timestamp
                ///   - timestamps: Add timestamps to every log line
                ///   - tail: Only return this number of log lines from the end of the logs
                internal init(
                    follow: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    timestamps: Swift.Bool? = nil,
                    tail: Swift.String? = nil
                ) {
                    self.follow = follow
                    self.stdout = stdout
                    self.stderr = stderr
                    self.since = since
                    self.until = until
                    self.timestamps = timestamps
                    self.tail = tail
                }
            }
            internal var query: Operations.ContainerLogsLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/logs/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerLogsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerLogsLibpod.Input.Path,
                query: Operations.ContainerLogsLibpod.Input.Query = .init(),
                headers: Operations.ContainerLogsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// logs returned as a stream in response body.
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerLogsLibpod.Output.Ok)
            /// logs returned as a stream in response body.
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerLogsLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/logs/get(ContainerLogsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Mount a container
    ///
    /// Mount a container to the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/mount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)`.
    internal enum ContainerMountLibpod {
        internal static let id: Swift.String = "ContainerMountLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/mount/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/mount/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerMountLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/mount/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerMountLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerMountLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerMountLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerMountLibpod.Input.Path,
                headers: Operations.ContainerMountLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/mount/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/containers/{name}/mount/POST/responses/200/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerMountLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerMountLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// mounted container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerMountLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerMountLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/mount/post(ContainerMountLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Pause a container
    ///
    /// Use the cgroups freezer to suspend all processes in a container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)`.
    internal enum ContainerPauseLibpod {
        internal static let id: Swift.String = "ContainerPauseLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/pause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/pause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerPauseLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/pause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPauseLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPauseLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerPauseLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerPauseLibpod.Input.Path,
                headers: Operations.ContainerPauseLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerPauseLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerPauseLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/pause/post(ContainerPauseLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Rename an existing container
    ///
    /// Change the name of an existing container.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/rename`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)`.
    internal enum ContainerRenameLibpod {
        internal static let id: Swift.String = "ContainerRenameLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/rename/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Full or partial ID or full name of the container to rename
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/rename/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Full or partial ID or full name of the container to rename
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerRenameLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/rename/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// New name for the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/rename/POST/query/name`.
                internal var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: New name for the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var query: Operations.ContainerRenameLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/rename/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRenameLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRenameLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerRenameLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerRenameLibpod.Input.Path,
                query: Operations.ContainerRenameLibpod.Input.Query,
                headers: Operations.ContainerRenameLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRenameLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerRenameLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/rename/post(ContainerRenameLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Resize a container's TTY
    ///
    /// Resize the terminal attached to a container (for use with Attach).
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/resize`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)`.
    internal enum ContainerResizeLibpod {
        internal static let id: Swift.String = "ContainerResizeLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerResizeLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Height to set for the terminal, in characters
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/query/h`.
                internal var h: Swift.Int?
                /// Width to set for the terminal, in characters
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/query/w`.
                internal var w: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height to set for the terminal, in characters
                ///   - w: Width to set for the terminal, in characters
                internal init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil
                ) {
                    self.h = h
                    self.w = w
                }
            }
            internal var query: Operations.ContainerResizeLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/resize/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResizeLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResizeLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerResizeLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerResizeLibpod.Input.Path,
                query: Operations.ContainerResizeLibpod.Input.Query = .init(),
                headers: Operations.ContainerResizeLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Success
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/resize/post(ContainerResizeLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)`.
    internal enum ContainerRestartLibpod {
        internal static let id: Swift.String = "ContainerRestartLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restart/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restart/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerRestartLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restart/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// number of seconds to wait before killing container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restart/POST/query/t`.
                internal var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: number of seconds to wait before killing container
                internal init(t: Swift.Int? = nil) {
                    self.t = t
                }
            }
            internal var query: Operations.ContainerRestartLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restart/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestartLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestartLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerRestartLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerRestartLibpod.Input.Path,
                query: Operations.ContainerRestartLibpod.Input.Query = .init(),
                headers: Operations.ContainerRestartLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRestartLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerRestartLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restart/post(ContainerRestartLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Restore a container
    ///
    /// Restore a container from a checkpoint.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/restore`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)`.
    internal enum ContainerRestoreLibpod {
        internal static let id: Swift.String = "ContainerRestoreLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or id of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or id of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerRestoreLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the name of the container when restored from a tar. can only be used with import
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/name`.
                internal var name: Swift.String?
                /// keep all temporary checkpoint files
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/keep`.
                internal var keep: Swift.Bool?
                /// checkpoint a container with established TCP connections
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/tcpEstablished`.
                internal var tcpEstablished: Swift.Bool?
                /// import the restore from a checkpoint tar.gz
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/import`.
                internal var _import: Swift.Bool?
                /// do not include root file-system changes when exporting. can only be used with import
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/ignoreRootFS`.
                internal var ignoreRootFS: Swift.Bool?
                /// do not restore associated volumes. can only be used with import
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/ignoreVolumes`.
                internal var ignoreVolumes: Swift.Bool?
                /// ignore IP address if set statically
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/ignoreStaticIP`.
                internal var ignoreStaticIP: Swift.Bool?
                /// ignore MAC address if set statically
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/ignoreStaticMAC`.
                internal var ignoreStaticMAC: Swift.Bool?
                /// restore a container with file locks
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/fileLocks`.
                internal var fileLocks: Swift.Bool?
                /// add restore statistics to the returned RestoreReport
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/printStats`.
                internal var printStats: Swift.Bool?
                /// pod to restore into
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/query/pod`.
                internal var pod: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: the name of the container when restored from a tar. can only be used with import
                ///   - keep: keep all temporary checkpoint files
                ///   - tcpEstablished: checkpoint a container with established TCP connections
                ///   - _import: import the restore from a checkpoint tar.gz
                ///   - ignoreRootFS: do not include root file-system changes when exporting. can only be used with import
                ///   - ignoreVolumes: do not restore associated volumes. can only be used with import
                ///   - ignoreStaticIP: ignore IP address if set statically
                ///   - ignoreStaticMAC: ignore MAC address if set statically
                ///   - fileLocks: restore a container with file locks
                ///   - printStats: add restore statistics to the returned RestoreReport
                ///   - pod: pod to restore into
                internal init(
                    name: Swift.String? = nil,
                    keep: Swift.Bool? = nil,
                    tcpEstablished: Swift.Bool? = nil,
                    _import: Swift.Bool? = nil,
                    ignoreRootFS: Swift.Bool? = nil,
                    ignoreVolumes: Swift.Bool? = nil,
                    ignoreStaticIP: Swift.Bool? = nil,
                    ignoreStaticMAC: Swift.Bool? = nil,
                    fileLocks: Swift.Bool? = nil,
                    printStats: Swift.Bool? = nil,
                    pod: Swift.String? = nil
                ) {
                    self.name = name
                    self.keep = keep
                    self.tcpEstablished = tcpEstablished
                    self._import = _import
                    self.ignoreRootFS = ignoreRootFS
                    self.ignoreVolumes = ignoreVolumes
                    self.ignoreStaticIP = ignoreStaticIP
                    self.ignoreStaticMAC = ignoreStaticMAC
                    self.fileLocks = fileLocks
                    self.printStats = printStats
                    self.pod = pod
                }
            }
            internal var query: Operations.ContainerRestoreLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/restore/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestoreLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestoreLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerRestoreLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerRestoreLibpod.Input.Path,
                query: Operations.ContainerRestoreLibpod.Input.Query = .init(),
                headers: Operations.ContainerRestoreLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// tarball is returned in body if exported
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerRestoreLibpod.Output.Ok)
            /// tarball is returned in body if exported
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerRestoreLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/restore/post(ContainerRestoreLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)`.
    internal enum ContainerStartLibpod {
        internal static let id: Swift.String = "ContainerStartLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/start/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/start/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStartLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/start/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/start/POST/query/detachKeys`.
                internal var detachKeys: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _.
                internal init(detachKeys: Swift.String? = nil) {
                    self.detachKeys = detachKeys
                }
            }
            internal var query: Operations.ContainerStartLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/start/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStartLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStartLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStartLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStartLibpod.Input.Path,
                query: Operations.ContainerStartLibpod.Input.Query = .init(),
                headers: Operations.ContainerStartLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStartLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerStartLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Container already started
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.containerAlreadyStartedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.containerAlreadyStartedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/start/post(ContainerStartLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get stats for a container
    ///
    /// DEPRECATED. This endpoint will be removed with the next major release. Please use /libpod/containers/stats instead.
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)`.
    internal enum ContainerStatsLibpod {
        internal static let id: Swift.String = "ContainerStatsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stats/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/stats/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStatsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stats/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Stream the output
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/stats/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - stream: Stream the output
                internal init(stream: Swift.Bool? = nil) {
                    self.stream = stream
                }
            }
            internal var query: Operations.ContainerStatsLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stats/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStatsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStatsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStatsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStatsLibpod.Input.Path,
                query: Operations.ContainerStatsLibpod.Input.Query = .init(),
                headers: Operations.ContainerStatsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerStatsLibpod.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerStatsLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stats/get(ContainerStatsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)`.
    internal enum ContainerStopLibpod {
        internal static let id: Swift.String = "ContainerStopLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerStopLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// number of seconds to wait before killing container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/query/timeout`.
                internal var timeout: Swift.Int?
                /// do not return error if container is already stopped
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/query/Ignore`.
                internal var Ignore: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - timeout: number of seconds to wait before killing container
                ///   - Ignore: do not return error if container is already stopped
                internal init(
                    timeout: Swift.Int? = nil,
                    Ignore: Swift.Bool? = nil
                ) {
                    self.timeout = timeout
                    self.Ignore = Ignore
                }
            }
            internal var query: Operations.ContainerStopLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/stop/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStopLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStopLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerStopLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerStopLibpod.Input.Path,
                query: Operations.ContainerStopLibpod.Input.Query = .init(),
                headers: Operations.ContainerStopLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStopLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerStopLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Container already stopped
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.containerAlreadyStoppedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.containerAlreadyStoppedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/stop/post(ContainerStopLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List processes
    ///
    /// List processes running inside a container
    ///
    /// - Remark: HTTP `GET /libpod/containers/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)`.
    internal enum ContainerTopLibpod {
        internal static let id: Swift.String = "ContainerTopLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Name of container to query for processes (As of version 1.xx)
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Name of container to query for processes (As of version 1.xx)
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerTopLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// when true, repeatedly stream the latest output (As of version 4.0)
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// if streaming, delay in seconds between updates. Must be >1. (As of version 4.0)
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/query/delay`.
                internal var delay: Swift.Int?
                /// arguments to pass to ps such as aux.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/query/ps_args`.
                internal var ps_args: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - stream: when true, repeatedly stream the latest output (As of version 4.0)
                ///   - delay: if streaming, delay in seconds between updates. Must be >1. (As of version 4.0)
                ///   - ps_args: arguments to pass to ps such as aux.
                internal init(
                    stream: Swift.Bool? = nil,
                    delay: Swift.Int? = nil,
                    ps_args: [Swift.String]? = nil
                ) {
                    self.stream = stream
                    self.delay = delay
                    self.ps_args = ps_args
                }
            }
            internal var query: Operations.ContainerTopLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/top/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTopLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTopLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerTopLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerTopLibpod.Input.Path,
                query: Operations.ContainerTopLibpod.Input.Query = .init(),
                headers: Operations.ContainerTopLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List processes in container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerTopResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerTopResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/top/get(ContainerTopLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Unmount a container
    ///
    /// Unmount a container from the filesystem
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unmount`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)`.
    internal enum ContainerUnmountLibpod {
        internal static let id: Swift.String = "ContainerUnmountLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/unmount/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/unmount/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerUnmountLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/unmount/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnmountLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnmountLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerUnmountLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerUnmountLibpod.Input.Path,
                headers: Operations.ContainerUnmountLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerUnmountLibpod.Output.NoContent)
            /// ok
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerUnmountLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unmount/post(ContainerUnmountLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Unpause Container
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)`.
    internal enum ContainerUnpauseLibpod {
        internal static let id: Swift.String = "ContainerUnpauseLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/unpause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/unpause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerUnpauseLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/unpause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpauseLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpauseLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerUnpauseLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ContainerUnpauseLibpod.Input.Path,
                headers: Operations.ContainerUnpauseLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerUnpauseLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ContainerUnpauseLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/unpause/post(ContainerUnpauseLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks
    ///
    /// Updates the configuration of an existing container, allowing changes to resource limits and healthchecks.
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)`.
    internal enum ContainerUpdateLibpod {
        internal static let id: Swift.String = "ContainerUpdateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Full or partial ID or full name of the container to update
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Full or partial ID or full name of the container to update
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerUpdateLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// New restart policy for the container.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/query/restartPolicy`.
                internal var restartPolicy: Swift.String?
                /// New amount of retries for the container's restart policy. Only allowed if restartPolicy is set to on-failure
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/query/restartRetries`.
                internal var restartRetries: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - restartPolicy: New restart policy for the container.
                ///   - restartRetries: New amount of retries for the container's restart policy. Only allowed if restartPolicy is set to on-failure
                internal init(
                    restartPolicy: Swift.String? = nil,
                    restartRetries: Swift.Int? = nil
                ) {
                    self.restartPolicy = restartPolicy
                    self.restartRetries = restartRetries
                }
            }
            internal var query: Operations.ContainerUpdateLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerUpdateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateEntities)
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/update/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ContainerUpdateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ContainerUpdateLibpod.Input.Path,
                query: Operations.ContainerUpdateLibpod.Input.Query = .init(),
                headers: Operations.ContainerUpdateLibpod.Input.Headers = .init(),
                body: Operations.ContainerUpdateLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Update container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.containerUpdateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.containerUpdateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/update/post(ContainerUpdateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Wait on a container
    ///
    /// Wait on a container to meet a given condition
    ///
    /// - Remark: HTTP `POST /libpod/containers/{name}/wait`.
    /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)`.
    internal enum ContainerWaitLibpod {
        internal static let id: Swift.String = "ContainerWaitLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ContainerWaitLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/query/conditionPayload`.
                internal enum conditionPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case configured = "configured"
                    case created = "created"
                    case exited = "exited"
                    case healthy = "healthy"
                    case initialized = "initialized"
                    case paused = "paused"
                    case removing = "removing"
                    case running = "running"
                    case stopped = "stopped"
                    case stopping = "stopping"
                    case unhealthy = "unhealthy"
                }
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/query/condition`.
                internal typealias conditionPayload = [Operations.ContainerWaitLibpod.Input.Query.conditionPayloadPayload]
                /// Conditions to wait for. If no condition provided the 'exited' condition is assumed.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/query/condition`.
                internal var condition: Operations.ContainerWaitLibpod.Input.Query.conditionPayload?
                /// Time Interval to wait before polling for completion.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/query/interval`.
                internal var interval: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - condition: Conditions to wait for. If no condition provided the 'exited' condition is assumed.
                ///   - interval: Time Interval to wait before polling for completion.
                internal init(
                    condition: Operations.ContainerWaitLibpod.Input.Query.conditionPayload? = nil,
                    interval: Swift.String? = nil
                ) {
                    self.condition = condition
                    self.interval = interval
                }
            }
            internal var query: Operations.ContainerWaitLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWaitLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWaitLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerWaitLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ContainerWaitLibpod.Input.Path,
                query: Operations.ContainerWaitLibpod.Input.Query = .init(),
                headers: Operations.ContainerWaitLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/responses/200/content/application\/json`.
                    case json(Swift.Int32)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Swift.Int32 {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/libpod/containers/{name}/wait/POST/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    internal var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerWaitLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerWaitLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Status code
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerWaitLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerWaitLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/{name}/wait/post(ContainerWaitLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case binary
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                case .binary:
                    return "application/octet-stream"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .plainText,
                    .binary
                ]
            }
        }
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /libpod/containers/create`.
    /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)`.
    internal enum ContainerCreateLibpod {
        internal static let id: Swift.String = "ContainerCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/containers/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SpecGenerator)
                /// - Remark: Generated from `#/paths/libpod/containers/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ContainerCreateLibpod.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.ContainerCreateLibpod.Input.Headers = .init(),
                body: Operations.ContainerCreateLibpod.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Create container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.containerCreateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.containerCreateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/create/post(ContainerCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List containers
    ///
    /// Returns a list of containers
    ///
    /// - Remark: HTTP `GET /libpod/containers/json`.
    /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)`.
    internal enum ContainerListLibpod {
        internal static let id: Swift.String = "ContainerListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Return all containers. By default, only running containers are shown
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/all`.
                internal var all: Swift.Bool?
                /// Return this number of most recently created containers, including non-running ones.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/limit`.
                internal var limit: Swift.Int?
                /// Include namespace information
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/namespace`.
                internal var namespace: Swift.Bool?
                /// Ignored. Previously included details on pod name and ID that are currently included by default.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/pod`.
                internal var pod: Swift.Bool?
                /// Return the size of container as fields SizeRw and SizeRootFs.
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/size`.
                internal var size: Swift.Bool?
                /// Sync container state with OCI runtime
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/sync`.
                internal var sync: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the containers list. Available filters:
                /// - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
                /// - `before`=(`<container id>` or `<container name>`)
                /// - `expose`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)
                /// - `exited=<int>` containers with exit code of `<int>`
                /// - `health`=(`starting`, `healthy`, `unhealthy` or `none`)
                /// - `id=<ID>` a container's ID
                /// - `is-task`=(`true` or `false`)
                /// - `label`=(`key` or `"key=value"`) of a container label
                /// - `name=<name>` a container's name
                /// - `network`=(`<network id>` or `<network name>`)
                /// - `pod`=(`<pod id>` or `<pod name>`)
                /// - `publish`=(`<port>[/<proto>]` or `<startport-endport>/[<proto>]`)
                /// - `since`=(`<container id>` or `<container name>`)
                /// - `status`=(`created`, `restarting`, `running`, `removing`, `paused`, `exited` or `dead`)
                /// - `volume`=(`<volume name>` or `<mount point destination>`)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Return all containers. By default, only running containers are shown
                ///   - limit: Return this number of most recently created containers, including non-running ones.
                ///   - namespace: Include namespace information
                ///   - pod: Ignored. Previously included details on pod name and ID that are currently included by default.
                ///   - size: Return the size of container as fields SizeRw and SizeRootFs.
                ///   - sync: Sync container state with OCI runtime
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the containers list. Available filters:
                internal init(
                    all: Swift.Bool? = nil,
                    limit: Swift.Int? = nil,
                    namespace: Swift.Bool? = nil,
                    pod: Swift.Bool? = nil,
                    size: Swift.Bool? = nil,
                    sync: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.all = all
                    self.limit = limit
                    self.namespace = namespace
                    self.pod = pod
                    self.size = size
                    self.sync = sync
                    self.filters = filters
                }
            }
            internal var query: Operations.ContainerListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ContainerListLibpod.Input.Query = .init(),
                headers: Operations.ContainerListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List Containers
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containersListLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containersListLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/json/get(ContainerListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete stopped containers
    ///
    /// Remove containers not in use
    ///
    /// - Remark: HTTP `POST /libpod/containers/prune`.
    /// - Remark: Generated from `#/paths//libpod/containers/prune/post(ContainerPruneLibpod)`.
    internal enum ContainerPruneLibpod {
        internal static let id: Swift.String = "ContainerPruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters:
                ///  - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///  - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.ContainerPruneLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerPruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ContainerPruneLibpod.Input.Query = .init(),
                headers: Operations.ContainerPruneLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Prune Containers
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/prune/post(ContainerPruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containersPruneLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containersPruneLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/prune/post(ContainerPruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Show mounted containers
    ///
    /// Lists all mounted containers mount points
    ///
    /// - Remark: HTTP `GET /libpod/containers/showmounted`.
    /// - Remark: Generated from `#/paths//libpod/containers/showmounted/get(ContainerShowMountedLibpod)`.
    internal enum ContainerShowMountedLibpod {
        internal static let id: Swift.String = "ContainerShowMountedLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/showmounted/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerShowMountedLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerShowMountedLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainerShowMountedLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.ContainerShowMountedLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/containers/showmounted/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/containers/showmounted/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        internal var additionalProperties: [String: Swift.String]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        internal init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        internal init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/libpod/containers/showmounted/GET/responses/200/content/application\/json`.
                    case json(Operations.ContainerShowMountedLibpod.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.ContainerShowMountedLibpod.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ContainerShowMountedLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ContainerShowMountedLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// mounted containers
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/showmounted/get(ContainerShowMountedLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerShowMountedLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ContainerShowMountedLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/showmounted/get(ContainerShowMountedLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get stats for one or more containers
    ///
    /// Return a live stream of resource usage statistics of one or more container. If no container is specified, the statistics of all containers are returned.
    ///
    /// - Remark: HTTP `GET /libpod/containers/stats`.
    /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)`.
    internal enum ContainersStatsAllLibpod {
        internal static let id: Swift.String = "ContainersStatsAllLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/containers/stats/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// names or IDs of containers
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/stats/GET/query/containers`.
                internal var containers: [Swift.String]?
                /// Stream the output
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/stats/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// Time in seconds between stats reports
                ///
                /// - Remark: Generated from `#/paths/libpod/containers/stats/GET/query/interval`.
                internal var interval: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - containers: names or IDs of containers
                ///   - stream: Stream the output
                ///   - interval: Time in seconds between stats reports
                internal init(
                    containers: [Swift.String]? = nil,
                    stream: Swift.Bool? = nil,
                    interval: Swift.Int? = nil
                ) {
                    self.containers = containers
                    self.stream = stream
                    self.interval = interval
                }
            }
            internal var query: Operations.ContainersStatsAllLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/containers/stats/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainersStatsAllLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainersStatsAllLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ContainersStatsAllLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ContainersStatsAllLibpod.Input.Query = .init(),
                headers: Operations.ContainersStatsAllLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Get stats for one or more containers
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.containerStats)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.containerStats {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/containers/stats/get(ContainersStatsAllLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get events
    ///
    /// Returns events filtered on query parameters
    ///
    /// - Remark: HTTP `GET /libpod/events`.
    /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)`.
    internal enum SystemEventsLibpod {
        internal static let id: Swift.String = "SystemEventsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/events/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// start streaming events from this time
                ///
                /// - Remark: Generated from `#/paths/libpod/events/GET/query/since`.
                internal var since: Swift.String?
                /// stop streaming events later than this
                ///
                /// - Remark: Generated from `#/paths/libpod/events/GET/query/until`.
                internal var until: Swift.String?
                /// JSON encoded map[string][]string of constraints
                ///
                /// - Remark: Generated from `#/paths/libpod/events/GET/query/filters`.
                internal var filters: Swift.String?
                /// when false, do not follow events
                ///
                /// - Remark: Generated from `#/paths/libpod/events/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: start streaming events from this time
                ///   - until: stop streaming events later than this
                ///   - filters: JSON encoded map[string][]string of constraints
                ///   - stream: when false, do not follow events
                internal init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    filters: Swift.String? = nil,
                    stream: Swift.Bool? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.filters = filters
                    self.stream = stream
                }
            }
            internal var query: Operations.SystemEventsLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/events/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEventsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEventsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemEventsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.SystemEventsLibpod.Input.Query = .init(),
                headers: Operations.SystemEventsLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// returns a string of json data describing an event
            ///
            /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemEventsLibpod.Output.Ok)
            /// returns a string of json data describing an event
            ///
            /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.SystemEventsLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/events/get(SystemEventsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /libpod/exec/{id}/json`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)`.
    internal enum ExecInspectLibpod {
        internal static let id: Swift.String = "ExecInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/json/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ExecInspectLibpod.Input.Path,
                headers: Operations.ExecInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecInspectLibpod.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ExecInspectLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/json/get(ExecInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)`.
    internal enum ExecResizeLibpod {
        internal static let id: Swift.String = "ExecResizeLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecResizeLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Height of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/query/h`.
                internal var h: Swift.Int?
                /// Width of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/query/w`.
                internal var w: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height of the TTY session in characters
                ///   - w: Width of the TTY session in characters
                internal init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil
                ) {
                    self.h = h
                    self.w = w
                }
            }
            internal var query: Operations.ExecResizeLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/resize/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResizeLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResizeLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecResizeLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ExecResizeLibpod.Input.Path,
                query: Operations.ExecResizeLibpod.Input.Query = .init(),
                headers: Operations.ExecResizeLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ExecResizeLibpod.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ExecResizeLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/resize/post(ExecResizeLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command.
    /// Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint.
    ///
    ///
    /// - Remark: HTTP `POST /libpod/exec/{id}/start`.
    /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)`.
    internal enum ExecStartLibpod {
        internal static let id: Swift.String = "ExecStartLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.ExecStartLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStartLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStartLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ExecStartLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// Detach from the command.
                    ///
                    /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/json/Detach`.
                    internal var Detach: Swift.Bool?
                    /// Allocate a pseudo-TTY.
                    ///
                    /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/json/Tty`.
                    internal var Tty: Swift.Bool?
                    /// Height of the TTY session in characters. Tty must be set to true to use it.
                    ///
                    /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/json/h`.
                    internal var h: Swift.Int?
                    /// Width of the TTY session in characters. Tty must be set to true to use it.
                    ///
                    /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/json/w`.
                    internal var w: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Detach: Detach from the command.
                    ///   - Tty: Allocate a pseudo-TTY.
                    ///   - h: Height of the TTY session in characters. Tty must be set to true to use it.
                    ///   - w: Width of the TTY session in characters. Tty must be set to true to use it.
                    internal init(
                        Detach: Swift.Bool? = nil,
                        Tty: Swift.Bool? = nil,
                        h: Swift.Int? = nil,
                        w: Swift.Int? = nil
                    ) {
                        self.Detach = Detach
                        self.Tty = Tty
                        self.h = h
                        self.w = w
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case Detach
                        case Tty
                        case h
                        case w
                    }
                }
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/content/application\/json`.
                case json(Operations.ExecStartLibpod.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/libpod/exec/{id}/start/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ExecStartLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ExecStartLibpod.Input.Path,
                headers: Operations.ExecStartLibpod.Input.Headers = .init(),
                body: Operations.ExecStartLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecStartLibpod.Output.Ok)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ExecStartLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.execSessionNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.execSessionNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// container is not running.
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ExecStartLibpod.Output.Conflict)
            /// container is not running.
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ExecStartLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/exec/{id}/start/post(ExecStartLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Generate Systemd Units
    ///
    /// Generate Systemd Units based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/{name}/systemd`.
    /// - Remark: Generated from `#/paths//libpod/generate/{name}/systemd/get(GenerateSystemdLibpod)`.
    internal enum GenerateSystemdLibpod {
        internal static let id: Swift.String = "GenerateSystemdLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Name or ID of the container or pod.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Name or ID of the container or pod.
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.GenerateSystemdLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Use container/pod names instead of IDs.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/useName`.
                internal var useName: Swift.Bool?
                /// Create a new container instead of starting an existing one.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/new`.
                internal var new: Swift.Bool?
                /// Do not generate the header including the Podman version and the timestamp.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/noHeader`.
                internal var noHeader: Swift.Bool?
                /// Start timeout in seconds.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/startTimeout`.
                internal var startTimeout: Swift.Int?
                /// Stop timeout in seconds.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/stopTimeout`.
                internal var stopTimeout: Swift.Int?
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/restartPolicy`.
                internal enum restartPolicyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case no = "no"
                    case on_hyphen_success = "on-success"
                    case on_hyphen_failure = "on-failure"
                    case on_hyphen_abnormal = "on-abnormal"
                    case on_hyphen_watchdog = "on-watchdog"
                    case on_hyphen_abort = "on-abort"
                    case always = "always"
                }
                /// Systemd restart-policy.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/restartPolicy`.
                internal var restartPolicy: Operations.GenerateSystemdLibpod.Input.Query.restartPolicyPayload?
                /// Systemd unit name prefix for containers.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/containerPrefix`.
                internal var containerPrefix: Swift.String?
                /// Systemd unit name prefix for pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/podPrefix`.
                internal var podPrefix: Swift.String?
                /// Systemd unit name separator between name/id and prefix.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/separator`.
                internal var separator: Swift.String?
                /// Configures the time to sleep before restarting a service.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/restartSec`.
                internal var restartSec: Swift.Int?
                /// Systemd Wants list for the container or pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/wants`.
                internal var wants: [Swift.String]?
                /// Systemd After list for the container or pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/after`.
                internal var after: [Swift.String]?
                /// Systemd Requires list for the container or pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/requires`.
                internal var requires: [Swift.String]?
                /// Set environment variables to the systemd unit files.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/query/additionalEnvVariables`.
                internal var additionalEnvVariables: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - useName: Use container/pod names instead of IDs.
                ///   - new: Create a new container instead of starting an existing one.
                ///   - noHeader: Do not generate the header including the Podman version and the timestamp.
                ///   - startTimeout: Start timeout in seconds.
                ///   - stopTimeout: Stop timeout in seconds.
                ///   - restartPolicy: Systemd restart-policy.
                ///   - containerPrefix: Systemd unit name prefix for containers.
                ///   - podPrefix: Systemd unit name prefix for pods.
                ///   - separator: Systemd unit name separator between name/id and prefix.
                ///   - restartSec: Configures the time to sleep before restarting a service.
                ///   - wants: Systemd Wants list for the container or pods.
                ///   - after: Systemd After list for the container or pods.
                ///   - requires: Systemd Requires list for the container or pods.
                ///   - additionalEnvVariables: Set environment variables to the systemd unit files.
                internal init(
                    useName: Swift.Bool? = nil,
                    new: Swift.Bool? = nil,
                    noHeader: Swift.Bool? = nil,
                    startTimeout: Swift.Int? = nil,
                    stopTimeout: Swift.Int? = nil,
                    restartPolicy: Operations.GenerateSystemdLibpod.Input.Query.restartPolicyPayload? = nil,
                    containerPrefix: Swift.String? = nil,
                    podPrefix: Swift.String? = nil,
                    separator: Swift.String? = nil,
                    restartSec: Swift.Int? = nil,
                    wants: [Swift.String]? = nil,
                    after: [Swift.String]? = nil,
                    requires: [Swift.String]? = nil,
                    additionalEnvVariables: [Swift.String]? = nil
                ) {
                    self.useName = useName
                    self.new = new
                    self.noHeader = noHeader
                    self.startTimeout = startTimeout
                    self.stopTimeout = stopTimeout
                    self.restartPolicy = restartPolicy
                    self.containerPrefix = containerPrefix
                    self.podPrefix = podPrefix
                    self.separator = separator
                    self.restartSec = restartSec
                    self.wants = wants
                    self.after = after
                    self.requires = requires
                    self.additionalEnvVariables = additionalEnvVariables
                }
            }
            internal var query: Operations.GenerateSystemdLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GenerateSystemdLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GenerateSystemdLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GenerateSystemdLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.GenerateSystemdLibpod.Input.Path,
                query: Operations.GenerateSystemdLibpod.Input.Query = .init(),
                headers: Operations.GenerateSystemdLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        internal var additionalProperties: [String: Swift.String]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        internal init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        internal init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/libpod/generate/{name}/systemd/GET/responses/200/content/application\/json`.
                    case json(Operations.GenerateSystemdLibpod.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GenerateSystemdLibpod.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GenerateSystemdLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GenerateSystemdLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/generate/{name}/systemd/get(GenerateSystemdLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GenerateSystemdLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GenerateSystemdLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/generate/{name}/systemd/get(GenerateSystemdLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Generate a Kubernetes YAML file.
    ///
    /// Generate Kubernetes YAML based on a pod or container.
    ///
    /// - Remark: HTTP `GET /libpod/generate/kube`.
    /// - Remark: Generated from `#/paths//libpod/generate/kube/get(GenerateKubeLibpod)`.
    internal enum GenerateKubeLibpod {
        internal static let id: Swift.String = "GenerateKubeLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Name or ID of the container or pod.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/names`.
                internal var names: [Swift.String]
                /// Generate YAML for a Kubernetes service object.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/service`.
                internal var service: Swift.Bool?
                /// Generate YAML for the given Kubernetes kind.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/type`.
                internal var _type: Swift.String?
                /// Set the replica number for Deployment kind.
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/replicas`.
                internal var replicas: Swift.Int32?
                /// don't truncate annotations to the Kubernetes maximum length of 63 characters
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/noTrunc`.
                internal var noTrunc: Swift.Bool?
                /// add podman-only reserved annotations in generated YAML file (cannot be used by Kubernetes)
                ///
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/query/podmanOnly`.
                internal var podmanOnly: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - names: Name or ID of the container or pod.
                ///   - service: Generate YAML for a Kubernetes service object.
                ///   - _type: Generate YAML for the given Kubernetes kind.
                ///   - replicas: Set the replica number for Deployment kind.
                ///   - noTrunc: don't truncate annotations to the Kubernetes maximum length of 63 characters
                ///   - podmanOnly: add podman-only reserved annotations in generated YAML file (cannot be used by Kubernetes)
                internal init(
                    names: [Swift.String],
                    service: Swift.Bool? = nil,
                    _type: Swift.String? = nil,
                    replicas: Swift.Int32? = nil,
                    noTrunc: Swift.Bool? = nil,
                    podmanOnly: Swift.Bool? = nil
                ) {
                    self.names = names
                    self.service = service
                    self._type = _type
                    self.replicas = replicas
                    self.noTrunc = noTrunc
                    self.podmanOnly = podmanOnly
                }
            }
            internal var query: Operations.GenerateKubeLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GenerateKubeLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GenerateKubeLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GenerateKubeLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GenerateKubeLibpod.Input.Query,
                headers: Operations.GenerateKubeLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/responses/200/content/text\/vnd.yaml`.
                    case text_vnd_period_yaml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_vnd_period_yaml`.
                    ///
                    /// - Throws: An error if `self` is not `.text_vnd_period_yaml`.
                    /// - SeeAlso: `.text_vnd_period_yaml`.
                    internal var text_vnd_period_yaml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_vnd_period_yaml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/vnd.yaml",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/libpod/generate/kube/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GenerateKubeLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.GenerateKubeLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Kubernetes YAML file describing pod
            ///
            /// - Remark: Generated from `#/paths//libpod/generate/kube/get(GenerateKubeLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GenerateKubeLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GenerateKubeLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/generate/kube/get(GenerateKubeLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case text_vnd_period_yaml
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/vnd.yaml":
                    self = .text_vnd_period_yaml
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_vnd_period_yaml:
                    return "text/vnd.yaml"
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .text_vnd_period_yaml,
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove an image from the local storage.
    ///
    /// Remove an image from the local storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)`.
    internal enum ImageDeleteLibpod {
        internal static let id: Swift.String = "ImageDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// name or ID of image to remove
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: name or ID of image to remove
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// remove the image even if used by containers or has other tags
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: remove the image even if used by containers or has other tags
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.ImageDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageDeleteLibpod.Input.Path,
                query: Operations.ImageDeleteLibpod.Input.Query = .init(),
                headers: Operations.ImageDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Remove
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesRemoveResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesRemoveResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/delete(ImageDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Report on changes to images's filesystem; adds, deletes or modifications.
    ///
    /// Returns which files in an image's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
    ///
    /// 0: Modified
    /// 1: Added
    /// 2: Deleted
    ///
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/changes`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)`.
    internal enum ImageChangesLibpod {
        internal static let id: Swift.String = "ImageChangesLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or id of the image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or id of the image
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageChangesLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// specify a second layer which is used to compare against it instead of the parent layer
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/query/parent`.
                internal var parent: Swift.String?
                /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/query/diffType`.
                internal enum diffTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case container = "container"
                    case image = "image"
                }
                /// select what you want to match, default is all
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/query/diffType`.
                internal var diffType: Operations.ImageChangesLibpod.Input.Query.diffTypePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - parent: specify a second layer which is used to compare against it instead of the parent layer
                ///   - diffType: select what you want to match, default is all
                internal init(
                    parent: Swift.String? = nil,
                    diffType: Operations.ImageChangesLibpod.Input.Query.diffTypePayload? = nil
                ) {
                    self.parent = parent
                    self.diffType = diffType
                }
            }
            internal var query: Operations.ImageChangesLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/changes/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageChangesLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageChangesLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageChangesLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageChangesLibpod.Input.Path,
                query: Operations.ImageChangesLibpod.Input.Query = .init(),
                headers: Operations.ImageChangesLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Array of Changes
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageChangesLibpod.Output.Ok)
            /// Array of Changes
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageChangesLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such container
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.containerNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.containerNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/changes/get(ImageChangesLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Image exists
    ///
    /// Check if image exists in local store
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)`.
    internal enum ImageExistsLibpod {
        internal static let id: Swift.String = "ImageExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageExistsLibpod.Input.Path,
                headers: Operations.ImageExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// image exists
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ImageExistsLibpod.Output.NoContent)
            /// image exists
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ImageExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/exists/get(ImageExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export an image
    ///
    /// Export an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/get`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)`.
    internal enum ImageGetLibpod {
        internal static let id: Swift.String = "ImageGetLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageGetLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// format for exported image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/query/format`.
                internal var format: Swift.String?
                /// use compression on image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/query/compress`.
                internal var compress: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - format: format for exported image
                ///   - compress: use compression on image
                internal init(
                    format: Swift.String? = nil,
                    compress: Swift.Bool? = nil
                ) {
                    self.format = format
                    self.compress = compress
                }
            }
            internal var query: Operations.ImageGetLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageGetLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageGetLibpod.Input.Path,
                query: Operations.ImageGetLibpod.Input.Query = .init(),
                headers: Operations.ImageGetLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/images/{name}/get/GET/responses/200/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    internal var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageGetLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageGetLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageGetLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageGetLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/get/get(ImageGetLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_tar
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-tar":
                    self = .application_x_hyphen_tar
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_tar:
                    return "application/x-tar"
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_tar,
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// History of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/history`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)`.
    internal enum ImageHistoryLibpod {
        internal static let id: Swift.String = "ImageHistoryLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/history/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/history/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageHistoryLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/history/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistoryLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistoryLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageHistoryLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageHistoryLibpod.Input.Path,
                headers: Operations.ImageHistoryLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image History
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.history)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.history {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/history/get(ImageHistoryLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect an image
    ///
    /// Obtain low-level information about an image
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)`.
    internal enum ImageInspectLibpod {
        internal static let id: Swift.String = "ImageInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageInspectLibpod.Input.Path,
                headers: Operations.ImageInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Inspect Image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.inspectImageResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.inspectImageResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/json/get(ImageInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Push Image
    ///
    /// Push an image to a container registry
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)`.
    internal enum ImagePushLibpod {
        internal static let id: Swift.String = "ImagePushLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// Name of image to push.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Name of image to push.
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImagePushLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Allows for pushing the image to a different destination than the image refers to.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/destination`.
                internal var destination: Swift.String?
                /// Enforce compressing the layers with the specified --compression and do not reuse differently compressed blobs on the registry.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/forceCompressionFormat`.
                internal var forceCompressionFormat: Swift.Bool?
                /// Compression format used to compress image layers.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/compressionFormat`.
                internal var compressionFormat: Swift.String?
                /// Compression level used to compress image layers.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/compressionLevel`.
                internal var compressionLevel: Swift.Int?
                /// Require TLS verification.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Silences extra stream data on push.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/quiet`.
                internal var quiet: Swift.Bool?
                /// Manifest type (oci, v2s1, or v2s2) to use when pushing an image. Default is manifest type of source, with fallbacks.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/format`.
                internal var format: Swift.String?
                /// All indicates whether to push all images related to the image list.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/all`.
                internal var all: Swift.Bool?
                /// Discard any pre-existing signatures in the image.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/removeSignatures`.
                internal var removeSignatures: Swift.Bool?
                /// Number of times to retry push in case of failure.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/retry`.
                internal var retry: Swift.Int?
                /// Delay between retries in case of push failures. Duration format such as "412ms", or "3.5h".
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/query/retryDelay`.
                internal var retryDelay: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - destination: Allows for pushing the image to a different destination than the image refers to.
                ///   - forceCompressionFormat: Enforce compressing the layers with the specified --compression and do not reuse differently compressed blobs on the registry.
                ///   - compressionFormat: Compression format used to compress image layers.
                ///   - compressionLevel: Compression level used to compress image layers.
                ///   - tlsVerify: Require TLS verification.
                ///   - quiet: Silences extra stream data on push.
                ///   - format: Manifest type (oci, v2s1, or v2s2) to use when pushing an image. Default is manifest type of source, with fallbacks.
                ///   - all: All indicates whether to push all images related to the image list.
                ///   - removeSignatures: Discard any pre-existing signatures in the image.
                ///   - retry: Number of times to retry push in case of failure.
                ///   - retryDelay: Delay between retries in case of push failures. Duration format such as "412ms", or "3.5h".
                internal init(
                    destination: Swift.String? = nil,
                    forceCompressionFormat: Swift.Bool? = nil,
                    compressionFormat: Swift.String? = nil,
                    compressionLevel: Swift.Int? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    quiet: Swift.Bool? = nil,
                    format: Swift.String? = nil,
                    all: Swift.Bool? = nil,
                    removeSignatures: Swift.Bool? = nil,
                    retry: Swift.Int? = nil,
                    retryDelay: Swift.String? = nil
                ) {
                    self.destination = destination
                    self.forceCompressionFormat = forceCompressionFormat
                    self.compressionFormat = compressionFormat
                    self.compressionLevel = compressionLevel
                    self.tlsVerify = tlsVerify
                    self.quiet = quiet
                    self.format = format
                    self.all = all
                    self.removeSignatures = removeSignatures
                    self.retry = retry
                    self.retryDelay = retryDelay
                }
            }
            internal var query: Operations.ImagePushLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// A base64-encoded auth configuration.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/header/X-Registry-Auth`.
                internal var X_hyphen_Registry_hyphen_Auth: Swift.String?
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePushLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64-encoded auth configuration.
                ///   - accept:
                internal init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePushLibpod.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImagePushLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImagePushLibpod.Input.Path,
                query: Operations.ImagePushLibpod.Input.Query = .init(),
                headers: Operations.ImagePushLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/images/{name}/push/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImagePushLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImagePushLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImagePushLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImagePushLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/push/post(ImagePushLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Resolve an image (short) name
    ///
    /// Resolve the passed image name to a list of fully-qualified images referring to container registries.
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/resolve`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)`.
    internal enum ImageResolveLibpod {
        internal static let id: Swift.String = "ImageResolveLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/resolve/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the (short) name to resolve
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/resolve/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the (short) name to resolve
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageResolveLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/resolve/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageResolveLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageResolveLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageResolveLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ImageResolveLibpod.Input.Path,
                headers: Operations.ImageResolveLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// resolved image names
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ImageResolveLibpod.Output.NoContent)
            /// resolved image names
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ImageResolveLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/resolve/get(ImageResolveLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/tag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)`.
    internal enum ImageTagLibpod {
        internal static let id: Swift.String = "ImageTagLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageTagLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the repository to tag in
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/query/repo`.
                internal var repo: Swift.String?
                /// the name of the new tag
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/query/tag`.
                internal var tag: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - repo: the repository to tag in
                ///   - tag: the name of the new tag
                internal init(
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.repo = repo
                    self.tag = tag
                }
            }
            internal var query: Operations.ImageTagLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tag/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTagLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTagLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageTagLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageTagLibpod.Input.Path,
                query: Operations.ImageTagLibpod.Input.Query = .init(),
                headers: Operations.ImageTagLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageTagLibpod.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ImageTagLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tag/post(ImageTagLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Image tree
    ///
    /// Retrieve the image tree for the provided image name or ID
    ///
    /// - Remark: HTTP `GET /libpod/images/{name}/tree`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)`.
    internal enum ImageTreeLibpod {
        internal static let id: Swift.String = "ImageTreeLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tree/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/tree/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageTreeLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tree/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// show all child images and layers of the specified image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/tree/GET/query/whatrequires`.
                internal var whatrequires: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - whatrequires: show all child images and layers of the specified image
                internal init(whatrequires: Swift.Bool? = nil) {
                    self.whatrequires = whatrequires
                }
            }
            internal var query: Operations.ImageTreeLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/tree/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTreeLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTreeLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageTreeLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageTreeLibpod.Input.Path,
                query: Operations.ImageTreeLibpod.Input.Query = .init(),
                headers: Operations.ImageTreeLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Tree
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.treeResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.treeResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/tree/get(ImageTreeLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Untag an image
    ///
    /// Untag an image. If not repo and tag are specified, all tags are removed from the image.
    ///
    /// - Remark: HTTP `POST /libpod/images/{name}/untag`.
    /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)`.
    internal enum ImageUntagLibpod {
        internal static let id: Swift.String = "ImageUntagLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the container
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the container
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageUntagLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the repository to untag
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/query/repo`.
                internal var repo: Swift.String?
                /// the name of the tag to untag
                ///
                /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/query/tag`.
                internal var tag: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - repo: the repository to untag
                ///   - tag: the name of the tag to untag
                internal init(
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.repo = repo
                    self.tag = tag
                }
            }
            internal var query: Operations.ImageUntagLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/{name}/untag/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageUntagLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageUntagLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageUntagLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageUntagLibpod.Input.Path,
                query: Operations.ImageUntagLibpod.Input.Query = .init(),
                headers: Operations.ImageUntagLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageUntagLibpod.Output.Created)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ImageUntagLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/{name}/untag/post(ImageUntagLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Export multiple images
    ///
    /// Export multiple images into a single object. Only `docker-archive` is currently supported.
    ///
    /// - Remark: HTTP `GET /libpod/images/export`.
    /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)`.
    internal enum ImageExportLibpod {
        internal static let id: Swift.String = "ImageExportLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/export/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// format for exported image (only docker-archive is supported)
                ///
                /// - Remark: Generated from `#/paths/libpod/images/export/GET/query/format`.
                internal var format: Swift.String?
                /// references to images to export
                ///
                /// - Remark: Generated from `#/paths/libpod/images/export/GET/query/references`.
                internal var references: [Swift.String]?
                /// use compression on image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/export/GET/query/compress`.
                internal var compress: Swift.Bool?
                /// accept uncompressed layers when copying OCI images
                ///
                /// - Remark: Generated from `#/paths/libpod/images/export/GET/query/ociAcceptUncompressedLayers`.
                internal var ociAcceptUncompressedLayers: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - format: format for exported image (only docker-archive is supported)
                ///   - references: references to images to export
                ///   - compress: use compression on image
                ///   - ociAcceptUncompressedLayers: accept uncompressed layers when copying OCI images
                internal init(
                    format: Swift.String? = nil,
                    references: [Swift.String]? = nil,
                    compress: Swift.Bool? = nil,
                    ociAcceptUncompressedLayers: Swift.Bool? = nil
                ) {
                    self.format = format
                    self.references = references
                    self.compress = compress
                    self.ociAcceptUncompressedLayers = ociAcceptUncompressedLayers
                }
            }
            internal var query: Operations.ImageExportLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/export/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageExportLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageExportLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageExportLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageExportLibpod.Input.Query = .init(),
                headers: Operations.ImageExportLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/images/export/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/images/export/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ImageExportLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ImageExportLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageExportLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ImageExportLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/export/get(ImageExportLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Import image
    ///
    /// Import a previously exported tarball as an image.
    ///
    /// - Remark: HTTP `POST /libpod/images/import`.
    /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)`.
    internal enum ImageImportLibpod {
        internal static let id: Swift.String = "ImageImportLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/import/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Apply the following possible instructions to the created image: CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | STOPSIGNAL | USER | VOLUME | WORKDIR.  JSON encoded string
                ///
                /// - Remark: Generated from `#/paths/libpod/images/import/POST/query/changes`.
                internal var changes: [Swift.String]?
                /// Set commit message for imported image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/import/POST/query/message`.
                internal var message: Swift.String?
                /// Optional Name[:TAG] for the image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/import/POST/query/reference`.
                internal var reference: Swift.String?
                /// Load image from the specified URL
                ///
                /// - Remark: Generated from `#/paths/libpod/images/import/POST/query/url`.
                internal var url: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - changes: Apply the following possible instructions to the created image: CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | STOPSIGNAL | USER | VOLUME | WORKDIR.  JSON encoded string
                ///   - message: Set commit message for imported image
                ///   - reference: Optional Name[:TAG] for the image
                ///   - url: Load image from the specified URL
                internal init(
                    changes: [Swift.String]? = nil,
                    message: Swift.String? = nil,
                    reference: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.changes = changes
                    self.message = message
                    self.reference = reference
                    self.url = url
                }
            }
            internal var query: Operations.ImageImportLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/import/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageImportLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageImportLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageImportLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/images/import/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/images/import/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ImageImportLibpod.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.ImageImportLibpod.Input.Query = .init(),
                headers: Operations.ImageImportLibpod.Input.Headers = .init(),
                body: Operations.ImageImportLibpod.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Import
            ///
            /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesImportResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesImportResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/import/post(ImageImportLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List Images
    ///
    /// Returns a list of images on the server
    ///
    /// - Remark: HTTP `GET /libpod/images/json`.
    /// - Remark: Generated from `#/paths//libpod/images/json/get(ImageListLibpod)`.
    internal enum ImageListLibpod {
        internal static let id: Swift.String = "ImageListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Show all images. Only images from a final layer (no children) are shown by default.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/json/GET/query/all`.
                internal var all: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                /// - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                /// - `dangling=true`
                /// - `label=key` or `label="key=value"` of an image label
                /// - `reference`=(`<image-name>[:<tag>]`)
                /// - `id`=(`<image-id>`)
                /// - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Show all images. Only images from a final layer (no children) are shown by default.
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                internal init(
                    all: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.all = all
                    self.filters = filters
                }
            }
            internal var query: Operations.ImageListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageListLibpod.Input.Query = .init(),
                headers: Operations.ImageListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image summary for libpod API
            ///
            /// - Remark: Generated from `#/paths//libpod/images/json/get(ImageListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imageListLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imageListLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/json/get(ImageListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Load image
    ///
    /// Load an image (oci-archive or docker-archive) stream.
    ///
    /// - Remark: HTTP `POST /libpod/images/load`.
    /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)`.
    internal enum ImageLoadLibpod {
        internal static let id: Swift.String = "ImageLoadLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/load/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoadLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoadLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageLoadLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/images/load/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/images/load/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ImageLoadLibpod.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.ImageLoadLibpod.Input.Headers = .init(),
                body: Operations.ImageLoadLibpod.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Load
            ///
            /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesLoadResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesLoadResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/load/post(ImageLoadLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune unused images
    ///
    /// Remove images that are not being used by a container
    ///
    /// - Remark: HTTP `POST /libpod/images/prune`.
    /// - Remark: Generated from `#/paths//libpod/images/prune/post(ImagePruneLibpod)`.
    internal enum ImagePruneLibpod {
        internal static let id: Swift.String = "ImagePruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Remove all images not in use by containers, not just dangling ones
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/prune/POST/query/all`.
                internal var all: Swift.Bool?
                /// Remove images even when they are used by external containers (e.g, by build containers)
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/prune/POST/query/external`.
                internal var external: Swift.Bool?
                /// Remove persistent build cache created by build instructions such as `--mount=type=cache`.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/prune/POST/query/buildcache`.
                internal var buildcache: Swift.Bool?
                /// filters to apply to image pruning, encoded as JSON (map[string][]string). Available filters:
                ///   - `dangling=<boolean>` When set to `true` (or `1`), prune only
                ///      unused *and* untagged images. When set to `false`
                ///      (or `0`), all unused images are pruned.
                ///   - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Remove all images not in use by containers, not just dangling ones
                ///   - external: Remove images even when they are used by external containers (e.g, by build containers)
                ///   - buildcache: Remove persistent build cache created by build instructions such as `--mount=type=cache`.
                ///   - filters: filters to apply to image pruning, encoded as JSON (map[string][]string). Available filters:
                internal init(
                    all: Swift.Bool? = nil,
                    external: Swift.Bool? = nil,
                    buildcache: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.all = all
                    self.external = external
                    self.buildcache = buildcache
                    self.filters = filters
                }
            }
            internal var query: Operations.ImagePruneLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImagePruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImagePruneLibpod.Input.Query = .init(),
                headers: Operations.ImagePruneLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Prune
            ///
            /// - Remark: Generated from `#/paths//libpod/images/prune/post(ImagePruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesPruneLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesPruneLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/prune/post(ImagePruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Pull images
    ///
    /// Pull one or more images from a container registry.
    ///
    /// - Remark: HTTP `POST /libpod/images/pull`.
    /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)`.
    internal enum ImagePullLibpod {
        internal static let id: Swift.String = "ImagePullLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Mandatory reference to the image (e.g., quay.io/image/name:tag)
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/reference`.
                internal var reference: Swift.String?
                /// silences extra stream data on pull
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/quiet`.
                internal var quiet: Swift.Bool?
                /// Return the same JSON payload as the Docker-compat endpoint.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/compatMode`.
                internal var compatMode: Swift.Bool?
                /// Pull image for the specified architecture.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/Arch`.
                internal var Arch: Swift.String?
                /// Pull image for the specified operating system.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/OS`.
                internal var OS: Swift.String?
                /// Pull image for the specified variant.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/Variant`.
                internal var Variant: Swift.String?
                /// Pull policy, "always" (default), "missing", "newer", "never".
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/policy`.
                internal var policy: Swift.String?
                /// Require TLS verification.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Pull all tagged images in the repository.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/query/allTags`.
                internal var allTags: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - reference: Mandatory reference to the image (e.g., quay.io/image/name:tag)
                ///   - quiet: silences extra stream data on pull
                ///   - compatMode: Return the same JSON payload as the Docker-compat endpoint.
                ///   - Arch: Pull image for the specified architecture.
                ///   - OS: Pull image for the specified operating system.
                ///   - Variant: Pull image for the specified variant.
                ///   - policy: Pull policy, "always" (default), "missing", "newer", "never".
                ///   - tlsVerify: Require TLS verification.
                ///   - allTags: Pull all tagged images in the repository.
                internal init(
                    reference: Swift.String? = nil,
                    quiet: Swift.Bool? = nil,
                    compatMode: Swift.Bool? = nil,
                    Arch: Swift.String? = nil,
                    OS: Swift.String? = nil,
                    Variant: Swift.String? = nil,
                    policy: Swift.String? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    allTags: Swift.Bool? = nil
                ) {
                    self.reference = reference
                    self.quiet = quiet
                    self.compatMode = compatMode
                    self.Arch = Arch
                    self.OS = OS
                    self.Variant = Variant
                    self.policy = policy
                    self.tlsVerify = tlsVerify
                    self.allTags = allTags
                }
            }
            internal var query: Operations.ImagePullLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/pull/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// base-64 encoded auth config. Must include the following four values: username, password, email and server address OR simply just an identity token.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/pull/POST/header/X-Registry-Auth`.
                internal var X_hyphen_Registry_hyphen_Auth: Swift.String?
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePullLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: base-64 encoded auth config. Must include the following four values: username, password, email and server address OR simply just an identity token.
                ///   - accept:
                internal init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePullLibpod.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImagePullLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImagePullLibpod.Input.Query = .init(),
                headers: Operations.ImagePullLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Pull
            ///
            /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesPullResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesPullResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/pull/post(ImagePullLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove one or more images from the storage.
    ///
    /// Remove one or more images from the storage.
    ///
    /// - Remark: HTTP `DELETE /libpod/images/remove`.
    /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)`.
    internal enum ImageDeleteAllLibpod {
        internal static let id: Swift.String = "ImageDeleteAllLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// Images IDs or names to remove.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query/images`.
                internal var images: [Swift.String]?
                /// Remove all images.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query/all`.
                internal var all: Swift.Bool?
                /// Force image removal (including containers using the images).
                ///
                /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Ignore if a specified image does not exist and do not throw an error.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query/ignore`.
                internal var ignore: Swift.Bool?
                /// Resolves to manifest list instead of image.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/query/lookupManifest`.
                internal var lookupManifest: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - images: Images IDs or names to remove.
                ///   - all: Remove all images.
                ///   - force: Force image removal (including containers using the images).
                ///   - ignore: Ignore if a specified image does not exist and do not throw an error.
                ///   - lookupManifest: Resolves to manifest list instead of image.
                internal init(
                    images: [Swift.String]? = nil,
                    all: Swift.Bool? = nil,
                    force: Swift.Bool? = nil,
                    ignore: Swift.Bool? = nil,
                    lookupManifest: Swift.Bool? = nil
                ) {
                    self.images = images
                    self.all = all
                    self.force = force
                    self.ignore = ignore
                    self.lookupManifest = lookupManifest
                }
            }
            internal var query: Operations.ImageDeleteAllLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/remove/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDeleteAllLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDeleteAllLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageDeleteAllLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageDeleteAllLibpod.Input.Query = .init(),
                headers: Operations.ImageDeleteAllLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Remove
            ///
            /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesRemoveResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesRemoveResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/remove/delete(ImageDeleteAllLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Copy an image from one host to another
    ///
    /// Copy an image from one host to another
    ///
    /// - Remark: HTTP `POST /libpod/images/scp/{name}`.
    /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)`.
    internal enum ImageScpLibpod {
        internal static let id: Swift.String = "ImageScpLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// source connection/image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: source connection/image
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ImageScpLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// dest connection/image
                ///
                /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/query/destination`.
                internal var destination: Swift.String?
                /// quiet output
                ///
                /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/query/quiet`.
                internal var quiet: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - destination: dest connection/image
                ///   - quiet: quiet output
                internal init(
                    destination: Swift.String? = nil,
                    quiet: Swift.Bool? = nil
                ) {
                    self.destination = destination
                    self.quiet = quiet
                }
            }
            internal var query: Operations.ImageScpLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/scp/{name}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageScpLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageScpLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageScpLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ImageScpLibpod.Input.Path,
                query: Operations.ImageScpLibpod.Input.Query = .init(),
                headers: Operations.ImageScpLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Scp
            ///
            /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesScpResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesScpResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/scp/{name}/post(ImageScpLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Search images
    ///
    /// Search registries for images
    ///
    /// - Remark: HTTP `GET /libpod/images/search`.
    /// - Remark: Generated from `#/paths//libpod/images/search/get(ImageSearchLibpod)`.
    internal enum ImageSearchLibpod {
        internal static let id: Swift.String = "ImageSearchLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/images/search/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// term to search
                ///
                /// - Remark: Generated from `#/paths/libpod/images/search/GET/query/term`.
                internal var term: Swift.String?
                /// maximum number of results
                ///
                /// - Remark: Generated from `#/paths/libpod/images/search/GET/query/limit`.
                internal var limit: Swift.Int?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                /// - `is-automated=(true|false)`
                /// - `is-official=(true|false)`
                /// - `stars=<number>` Matches images that have at least 'number' stars.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/images/search/GET/query/filters`.
                internal var filters: Swift.String?
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/libpod/images/search/GET/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// list the available tags in the repository
                ///
                /// - Remark: Generated from `#/paths/libpod/images/search/GET/query/listTags`.
                internal var listTags: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - term: term to search
                ///   - limit: maximum number of results
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                ///   - listTags: list the available tags in the repository
                internal init(
                    term: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    filters: Swift.String? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    listTags: Swift.Bool? = nil
                ) {
                    self.term = term
                    self.limit = limit
                    self.filters = filters
                    self.tlsVerify = tlsVerify
                    self.listTags = listTags
                }
            }
            internal var query: Operations.ImageSearchLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/images/search/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearchLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearchLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ImageSearchLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.ImageSearchLibpod.Input.Query = .init(),
                headers: Operations.ImageSearchLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Registry Search
            ///
            /// - Remark: Generated from `#/paths//libpod/images/search/get(ImageSearchLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.registrySearchResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.registrySearchResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/images/search/get(ImageSearchLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Get info
    ///
    /// Returns information on the system and libpod configuration
    ///
    /// - Remark: HTTP `GET /libpod/info`.
    /// - Remark: Generated from `#/paths//libpod/info/get(SystemInfoLibpod)`.
    internal enum SystemInfoLibpod {
        internal static let id: Swift.String = "SystemInfoLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/info/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfoLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfoLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemInfoLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemInfoLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Info
            ///
            /// - Remark: Generated from `#/paths//libpod/info/get(SystemInfoLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.infoResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.infoResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/info/get(SystemInfoLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Apply a podman workload or Kubernetes YAML file.
    ///
    /// Deploy a podman container, pod, volume, or Kubernetes yaml to a Kubernetes cluster.
    ///
    /// - Remark: HTTP `POST /libpod/kube/apply`.
    /// - Remark: Generated from `#/paths//libpod/kube/apply/post(KubeApplyLibpod)`.
    internal enum KubeApplyLibpod {
        internal static let id: Swift.String = "KubeApplyLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Path to the CA cert file for the Kubernetes cluster.
                ///
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query/caCertFile`.
                internal var caCertFile: Swift.String?
                /// Path to the kubeconfig file for the Kubernetes cluster.
                ///
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query/kubeConfig`.
                internal var kubeConfig: Swift.String?
                /// The namespace to deploy the workload to on the Kubernetes cluster.
                ///
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query/namespace`.
                internal var namespace: Swift.String?
                /// Create a service object for the container being deployed.
                ///
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query/service`.
                internal var service: Swift.Bool?
                /// Path to the Kubernetes yaml file to deploy.
                ///
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/query/file`.
                internal var file: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - caCertFile: Path to the CA cert file for the Kubernetes cluster.
                ///   - kubeConfig: Path to the kubeconfig file for the Kubernetes cluster.
                ///   - namespace: The namespace to deploy the workload to on the Kubernetes cluster.
                ///   - service: Create a service object for the container being deployed.
                ///   - file: Path to the Kubernetes yaml file to deploy.
                internal init(
                    caCertFile: Swift.String? = nil,
                    kubeConfig: Swift.String? = nil,
                    namespace: Swift.String? = nil,
                    service: Swift.Bool? = nil,
                    file: Swift.String? = nil
                ) {
                    self.caCertFile = caCertFile
                    self.kubeConfig = kubeConfig
                    self.namespace = namespace
                    self.service = service
                    self.file = file
                }
            }
            internal var query: Operations.KubeApplyLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KubeApplyLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.KubeApplyLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.KubeApplyLibpod.Input.Headers
            internal var body: Components.RequestBodies.KubeApplyLibpodRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.KubeApplyLibpod.Input.Query = .init(),
                headers: Operations.KubeApplyLibpod.Input.Headers = .init(),
                body: Components.RequestBodies.KubeApplyLibpodRequest? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/kube/apply/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.KubeApplyLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.KubeApplyLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Kubernetes YAML file successfully deployed to cluster
            ///
            /// - Remark: Generated from `#/paths//libpod/kube/apply/post(KubeApplyLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.KubeApplyLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.KubeApplyLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/kube/apply/post(KubeApplyLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create
    ///
    /// Create a manifest list
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)`.
    internal enum ManifestCreateLibpod {
        internal static let id: Swift.String = "ManifestCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// manifest list or index name to create
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: manifest list or index name to create
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestCreateLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// One or more names of an image or a manifest list. Repeat parameter as needed.
                ///
                /// Support for multiple images, as of version 4.0.0
                /// Alias of `image` is support for compatibility with < 4.0.0
                /// Response status code is 200 with < 4.0.0 for compatibility
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/query/images`.
                internal var images: Swift.String
                /// add all contents if given list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/query/all`.
                internal var all: Swift.Bool?
                /// modify an existing list if one with the desired name already exists
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/query/amend`.
                internal var amend: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - images: One or more names of an image or a manifest list. Repeat parameter as needed.
                ///   - all: add all contents if given list
                ///   - amend: modify an existing list if one with the desired name already exists
                internal init(
                    images: Swift.String,
                    all: Swift.Bool? = nil,
                    amend: Swift.Bool? = nil
                ) {
                    self.images = images
                    self.all = all
                    self.amend = amend
                }
            }
            internal var query: Operations.ManifestCreateLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ManifestModifyOptions)
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ManifestCreateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ManifestCreateLibpod.Input.Path,
                query: Operations.ManifestCreateLibpod.Input.Query,
                headers: Operations.ManifestCreateLibpod.Input.Headers = .init(),
                body: Operations.ManifestCreateLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/responses/201/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IDResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.IDResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestCreateLibpod.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestCreateLibpod.Output.Created.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ManifestCreateLibpod.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.ManifestCreateLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.imageNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.imageNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/post(ManifestCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Modify manifest list
    ///
    /// Add/Remove an image(s) to a manifest list
    ///
    /// Note: operations are not atomic when multiple Images are provided.
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `PUT /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)`.
    internal enum ManifestModifyLibpod {
        internal static let id: Swift.String = "ManifestModifyLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestModifyLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/query`.
            internal struct Query: Sendable, Hashable {
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                internal init(tlsVerify: Swift.Bool? = nil) {
                    self.tlsVerify = tlsVerify
                }
            }
            internal var query: Operations.ManifestModifyLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestModifyLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestModifyLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestModifyLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ManifestModifyOptions)
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ManifestModifyLibpod.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ManifestModifyLibpod.Input.Path,
                query: Operations.ManifestModifyLibpod.Input.Query = .init(),
                headers: Operations.ManifestModifyLibpod.Input.Headers = .init(),
                body: Operations.ManifestModifyLibpod.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ManifestModifyReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ManifestModifyReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestModifyLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestModifyLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ManifestModifyLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ManifestModifyLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/responses/409/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/PUT/responses/409/content/application\/json`.
                    case json(Components.Schemas.ManifestModifyReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ManifestModifyReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestModifyLibpod.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestModifyLibpod.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Operation had partial success, both Images and Errors may have members
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ManifestModifyLibpod.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.ManifestModifyLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/put(ManifestModifyLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete manifest list
    ///
    /// Delete named manifest list
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `DELETE /libpod/manifests/{name}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)`.
    internal enum ManifestDeleteLibpod {
        internal static let id: Swift.String = "ManifestDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// The name or ID of the  list to be deleted
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name or ID of the  list to be deleted
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// Ignore if a specified manifest does not exist and do not throw an error.
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/DELETE/query/ignore`.
                internal var ignore: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ignore: Ignore if a specified manifest does not exist and do not throw an error.
                internal init(ignore: Swift.Bool? = nil) {
                    self.ignore = ignore
                }
            }
            internal var query: Operations.ManifestDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ManifestDeleteLibpod.Input.Path,
                query: Operations.ManifestDeleteLibpod.Input.Query = .init(),
                headers: Operations.ManifestDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Image Remove
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.imagesRemoveResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.imagesRemoveResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/delete(ManifestDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Add image
    ///
    /// Add an image to a manifest list
    ///
    /// Deprecated: As of 4.0.0 use ManifestModifyLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/add`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)`.
    internal enum ManifestAddLibpod {
        internal static let id: Swift.String = "ManifestAddLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestAddLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestAddLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestAddLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestAddLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ManifestAddOptions)
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.ManifestAddLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.ManifestAddLibpod.Input.Path,
                headers: Operations.ManifestAddLibpod.Input.Headers = .init(),
                body: Operations.ManifestAddLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.IDResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.IDResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestAddLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestAddLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ManifestAddLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ManifestAddLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/add/post(ManifestAddLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Exists
    ///
    /// Check if manifest list exists
    ///
    /// Note: There is no contract that the manifest list will exist for a follow-on operation
    ///
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)`.
    internal enum ManifestExistsLibpod {
        internal static let id: Swift.String = "ManifestExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest list
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.ManifestExistsLibpod.Input.Path,
                headers: Operations.ManifestExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// manifest list exists
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ManifestExistsLibpod.Output.NoContent)
            /// manifest list exists
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.ManifestExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/exists/get(ManifestExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect
    ///
    /// Display attributes of given manifest list
    ///
    /// - Remark: HTTP `GET /libpod/manifests/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)`.
    internal enum ManifestInspectLibpod {
        internal static let id: Swift.String = "ManifestInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest list
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/json/GET/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                internal init(tlsVerify: Swift.Bool? = nil) {
                    self.tlsVerify = tlsVerify
                }
            }
            internal var query: Operations.ManifestInspectLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ManifestInspectLibpod.Input.Path,
                query: Operations.ManifestInspectLibpod.Input.Query = .init(),
                headers: Operations.ManifestInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Inspect Manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.manifestInspect)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.manifestInspect {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/json/get(ManifestInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Push manifest to registry
    ///
    /// Push a manifest list or image index to a registry
    ///
    /// Deprecated: As of 4.0.0 use ManifestPushLibpod instead
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/push`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)`.
    internal enum ManifestPushV3Libpod {
        internal static let id: Swift.String = "ManifestPushV3Libpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.ManifestPushV3Libpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// the destination for the manifest
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/query/destination`.
                internal var destination: Swift.String
                /// push all images
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/query/all`.
                internal var all: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - destination: the destination for the manifest
                ///   - all: push all images
                internal init(
                    destination: Swift.String,
                    all: Swift.Bool? = nil
                ) {
                    self.destination = destination
                    self.all = all
                }
            }
            internal var query: Operations.ManifestPushV3Libpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestPushV3Libpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestPushV3Libpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestPushV3Libpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ManifestPushV3Libpod.Input.Path,
                query: Operations.ManifestPushV3Libpod.Input.Query,
                headers: Operations.ManifestPushV3Libpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/push/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.IDResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.IDResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestPushV3Libpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestPushV3Libpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ManifestPushV3Libpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ManifestPushV3Libpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/push/post(ManifestPushV3Libpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Push manifest list to registry
    ///
    /// Push a manifest list or image index to the named registry
    ///
    /// As of v4.0.0
    ///
    ///
    /// - Remark: HTTP `POST /libpod/manifests/{name}/registry/{destination}`.
    /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)`.
    internal enum ManifestPushLibpod {
        internal static let id: Swift.String = "ManifestPushLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the manifest list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/path/name`.
                internal var name: Swift.String
                /// the registry for the manifest list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/path/destination`.
                internal var destination: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the manifest list
                ///   - destination: the registry for the manifest list
                internal init(
                    name: Swift.String,
                    destination: Swift.String
                ) {
                    self.name = name
                    self.destination = destination
                }
            }
            internal var path: Operations.ManifestPushLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// add existing instances with requested compression algorithms to manifest list
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query/addCompression`.
                internal var addCompression: [Swift.String]?
                /// Enforce compressing the layers with the specified --compression and do not reuse differently compressed blobs on the registry.
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query/forceCompressionFormat`.
                internal var forceCompressionFormat: Swift.Bool?
                /// push all images
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query/all`.
                internal var all: Swift.Bool?
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// silences extra stream data on push
                ///
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/query/quiet`.
                internal var quiet: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - addCompression: add existing instances with requested compression algorithms to manifest list
                ///   - forceCompressionFormat: Enforce compressing the layers with the specified --compression and do not reuse differently compressed blobs on the registry.
                ///   - all: push all images
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                ///   - quiet: silences extra stream data on push
                internal init(
                    addCompression: [Swift.String]? = nil,
                    forceCompressionFormat: Swift.Bool? = nil,
                    all: Swift.Bool? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    quiet: Swift.Bool? = nil
                ) {
                    self.addCompression = addCompression
                    self.forceCompressionFormat = forceCompressionFormat
                    self.all = all
                    self.tlsVerify = tlsVerify
                    self.quiet = quiet
                }
            }
            internal var query: Operations.ManifestPushLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestPushLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ManifestPushLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.ManifestPushLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.ManifestPushLibpod.Input.Path,
                query: Operations.ManifestPushLibpod.Input.Query = .init(),
                headers: Operations.ManifestPushLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/manifests/{name}/registry/{destination}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.IDResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.IDResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.ManifestPushLibpod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.ManifestPushLibpod.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ManifestPushLibpod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ManifestPushLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such manifest
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.manifestNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.manifestNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/manifests/{name}/registry/{destination}/post(ManifestPushLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove a network
    ///
    /// Remove a configured network
    ///
    /// - Remark: HTTP `DELETE /libpod/networks/{name}`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)`.
    internal enum NetworkDeleteLibpod {
        internal static let id: Swift.String = "NetworkDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// remove containers associated with network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: remove containers associated with network
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.NetworkDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.NetworkDeleteLibpod.Input.Path,
                query: Operations.NetworkDeleteLibpod.Input.Query = .init(),
                headers: Operations.NetworkDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network Delete
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkRmResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkRmResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/delete(NetworkDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Connect container to network
    ///
    /// Connect a container to a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)`.
    internal enum NetworkConnectLibpod {
        internal static let id: Swift.String = "NetworkConnectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkConnectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkConnectLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.networkConnectRequestLibpod)
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/connect/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.NetworkConnectLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.NetworkConnectLibpod.Input.Path,
                headers: Operations.NetworkConnectLibpod.Input.Headers = .init(),
                body: Operations.NetworkConnectLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkConnectLibpod.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkConnectLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/connect/post(NetworkConnectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network.
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)`.
    internal enum NetworkDisconnectLibpod {
        internal static let id: Swift.String = "NetworkDisconnectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/disconnect/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/disconnect/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkDisconnectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/disconnect/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkDisconnectLibpod.Input.Headers
            internal var body: Components.RequestBodies.networkDisconnectRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.NetworkDisconnectLibpod.Input.Path,
                headers: Operations.NetworkDisconnectLibpod.Input.Headers = .init(),
                body: Components.RequestBodies.networkDisconnectRequest? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkDisconnectLibpod.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkDisconnectLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/disconnect/post(NetworkDisconnectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Network exists
    ///
    /// Check if network exists
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)`.
    internal enum NetworkExistsLibpod {
        internal static let id: Swift.String = "NetworkExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.NetworkExistsLibpod.Input.Path,
                headers: Operations.NetworkExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// network exists
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.NetworkExistsLibpod.Output.NoContent)
            /// network exists
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.NetworkExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/exists/get(NetworkExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect a network
    ///
    /// Display configuration for a network.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)`.
    internal enum NetworkInspectLibpod {
        internal static let id: Swift.String = "NetworkInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.NetworkInspectLibpod.Input.Path,
                headers: Operations.NetworkInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network inspect
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkInspectResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkInspectResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/json/get(NetworkInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Update existing podman network
    ///
    /// Update existing podman network
    ///
    /// - Remark: HTTP `POST /libpod/networks/{name}/update`.
    /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)`.
    internal enum NetworkUpdateLibpod {
        internal static let id: Swift.String = "NetworkUpdateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the network
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkUpdateLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkUpdateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkUpdateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkUpdateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.networkUpdateRequestLibpod)
                /// - Remark: Generated from `#/paths/libpod/networks/{name}/update/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.NetworkUpdateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.NetworkUpdateLibpod.Input.Path,
                headers: Operations.NetworkUpdateLibpod.Input.Headers = .init(),
                body: Operations.NetworkUpdateLibpod.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkUpdateLibpod.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkUpdateLibpod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/{name}/update/post(NetworkUpdateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create network
    ///
    /// Create a new network configuration
    ///
    /// - Remark: HTTP `POST /libpod/networks/create`.
    /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)`.
    internal enum NetworkCreateLibpod {
        internal static let id: Swift.String = "NetworkCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/networks/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/networks/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.networkCreateLibpod)
                /// - Remark: Generated from `#/paths/libpod/networks/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.NetworkCreateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.NetworkCreateLibpod.Input.Headers = .init(),
                body: Operations.NetworkCreateLibpod.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network create
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkCreateResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkCreateResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Conflict error in operation
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflictError)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.conflictError {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/create/post(NetworkCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List networks
    ///
    /// Display summary of network configurations.
    ///   - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.
    ///
    ///
    /// - Remark: HTTP `GET /libpod/networks/json`.
    /// - Remark: Generated from `#/paths//libpod/networks/json/get(NetworkListLibpod)`.
    internal enum NetworkListLibpod {
        internal static let id: Swift.String = "NetworkListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to process on the network list. Available filters:
                ///   - `name=[name]` Matches network name (accepts regex).
                ///   - `id=[id]` Matches for full or partial ID.
                ///   - `driver=[driver]` Only bridge is supported.
                ///   - `label=[key]` or `label=[key=value]` Matches networks based on the presence of a label alone or a label and a value.
                ///   - `until=[timestamp]` Matches all networks that were created before the given timestamp.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to process on the network list. Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.NetworkListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/networks/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.NetworkListLibpod.Input.Query = .init(),
                headers: Operations.NetworkListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network list
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/json/get(NetworkListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkListLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkListLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/json/get(NetworkListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /libpod/networks/prune`.
    /// - Remark: Generated from `#/paths//libpod/networks/prune/post(NetworkPruneLibpod)`.
    internal enum NetworkPruneLibpod {
        internal static let id: Swift.String = "NetworkPruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/networks/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                /// Available filters:
                ///   - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/networks/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.NetworkPruneLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/networks/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkPruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.NetworkPruneLibpod.Input.Query = .init(),
                headers: Operations.NetworkPruneLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network prune
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/prune/post(NetworkPruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkPruneResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkPruneResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/networks/prune/post(NetworkPruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Play a Kubernetes YAML file.
    ///
    /// Create and run pods based on a Kubernetes YAML file.
    ///
    /// ### Content-Type
    ///
    /// Then endpoint support two Content-Type
    ///  - `plain/text` for yaml format
    ///  - `application/x-tar` for sending context(s) required for building images
    ///
    /// #### Tar format
    ///
    /// The tar format must contain a `play.yaml` file at the root that will be used.
    /// If the file format requires context to build an image, it uses the image name and
    /// check for corresponding folder.
    ///
    /// For example, the client sends a tar file with the following structure:
    ///
    /// ```
    /// â””â”€â”€ content.tar
    ///  â”œâ”€â”€ play.yaml
    ///  â””â”€â”€ foobar/
    ///      â””â”€â”€ Containerfile
    /// ```
    ///
    /// The `play.yaml` is the following, the `foobar` image means we are looking for a context with this name.
    /// ```
    /// apiVersion: v1
    /// kind: Pod
    /// metadata:
    /// name: demo-build-remote
    /// spec:
    /// containers:
    ///  - name: container
    ///    image: foobar
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/post(PlayKubeLibpod)`.
    internal enum PlayKubeLibpod {
        internal static let id: Swift.String = "PlayKubeLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of annotations (a map[string]string).
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/annotations`.
                internal var annotations: Swift.String?
                /// Logging driver for the containers in the pod.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/logDriver`.
                internal var logDriver: Swift.String?
                /// logging driver options
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/logOptions`.
                internal var logOptions: [Swift.String]?
                /// USe the network mode or specify an array of networks.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/network`.
                internal var network: [Swift.String]?
                /// do not setup /etc/hosts file in container
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/noHosts`.
                internal var noHosts: Swift.Bool?
                /// use annotations that are not truncated to the Kubernetes maximum length of 63 characters
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/noTrunc`.
                internal var noTrunc: Swift.Bool?
                /// publish a container's port, or a range of ports, to the host
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/publishPorts`.
                internal var publishPorts: [Swift.String]?
                /// Whether to publish all ports defined in the K8S YAML file (containerPort, hostPort), if false only hostPort will be published
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/publishAllPorts`.
                internal var publishAllPorts: Swift.Bool?
                /// replace existing pods and containers
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/replace`.
                internal var replace: Swift.Bool?
                /// Starts a service container before all pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/serviceContainer`.
                internal var serviceContainer: Swift.Bool?
                /// Start the pod after creating it.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/start`.
                internal var start: Swift.Bool?
                /// Static IPs used for the pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/staticIPs`.
                internal var staticIPs: [Swift.String]?
                /// Static MACs used for the pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/staticMACs`.
                internal var staticMACs: [Swift.String]?
                /// Require HTTPS and verify signatures when contacting registries.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/tlsVerify`.
                internal var tlsVerify: Swift.Bool?
                /// Set the user namespace mode for the pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/userns`.
                internal var userns: Swift.String?
                /// Clean up all objects created when a SIGTERM is received or pods exit.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/wait`.
                internal var wait: Swift.Bool?
                /// Build the images with corresponding context.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/POST/query/build`.
                internal var build: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - annotations: JSON encoded value of annotations (a map[string]string).
                ///   - logDriver: Logging driver for the containers in the pod.
                ///   - logOptions: logging driver options
                ///   - network: USe the network mode or specify an array of networks.
                ///   - noHosts: do not setup /etc/hosts file in container
                ///   - noTrunc: use annotations that are not truncated to the Kubernetes maximum length of 63 characters
                ///   - publishPorts: publish a container's port, or a range of ports, to the host
                ///   - publishAllPorts: Whether to publish all ports defined in the K8S YAML file (containerPort, hostPort), if false only hostPort will be published
                ///   - replace: replace existing pods and containers
                ///   - serviceContainer: Starts a service container before all pods.
                ///   - start: Start the pod after creating it.
                ///   - staticIPs: Static IPs used for the pods.
                ///   - staticMACs: Static MACs used for the pods.
                ///   - tlsVerify: Require HTTPS and verify signatures when contacting registries.
                ///   - userns: Set the user namespace mode for the pods.
                ///   - wait: Clean up all objects created when a SIGTERM is received or pods exit.
                ///   - build: Build the images with corresponding context.
                internal init(
                    annotations: Swift.String? = nil,
                    logDriver: Swift.String? = nil,
                    logOptions: [Swift.String]? = nil,
                    network: [Swift.String]? = nil,
                    noHosts: Swift.Bool? = nil,
                    noTrunc: Swift.Bool? = nil,
                    publishPorts: [Swift.String]? = nil,
                    publishAllPorts: Swift.Bool? = nil,
                    replace: Swift.Bool? = nil,
                    serviceContainer: Swift.Bool? = nil,
                    start: Swift.Bool? = nil,
                    staticIPs: [Swift.String]? = nil,
                    staticMACs: [Swift.String]? = nil,
                    tlsVerify: Swift.Bool? = nil,
                    userns: Swift.String? = nil,
                    wait: Swift.Bool? = nil,
                    build: Swift.Bool? = nil
                ) {
                    self.annotations = annotations
                    self.logDriver = logDriver
                    self.logOptions = logOptions
                    self.network = network
                    self.noHosts = noHosts
                    self.noTrunc = noTrunc
                    self.publishPorts = publishPorts
                    self.publishAllPorts = publishAllPorts
                    self.replace = replace
                    self.serviceContainer = serviceContainer
                    self.start = start
                    self.staticIPs = staticIPs
                    self.staticMACs = staticMACs
                    self.tlsVerify = tlsVerify
                    self.userns = userns
                    self.wait = wait
                    self.build = build
                }
            }
            internal var query: Operations.PlayKubeLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/play/kube/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PlayKubeLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PlayKubeLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PlayKubeLibpod.Input.Headers
            internal var body: Components.RequestBodies.KubeApplyLibpodRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.PlayKubeLibpod.Input.Query = .init(),
                headers: Operations.PlayKubeLibpod.Input.Headers = .init(),
                body: Components.RequestBodies.KubeApplyLibpodRequest? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// PlayKube response
            ///
            /// - Remark: Generated from `#/paths//libpod/play/kube/post(PlayKubeLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.playKubeResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.playKubeResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/play/kube/post(PlayKubeLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove resources created from kube play
    ///
    /// Tears down pods, secrets, and volumes defined in a YAML file
    ///
    /// - Remark: HTTP `DELETE /libpod/play/kube`.
    /// - Remark: Generated from `#/paths//libpod/play/kube/delete(PlayKubeDownLibpod)`.
    internal enum PlayKubeDownLibpod {
        internal static let id: Swift.String = "PlayKubeDownLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/play/kube/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// Remove volumes.
                ///
                /// - Remark: Generated from `#/paths/libpod/play/kube/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Remove volumes.
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.PlayKubeDownLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/play/kube/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PlayKubeDownLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PlayKubeDownLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PlayKubeDownLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.PlayKubeDownLibpod.Input.Query = .init(),
                headers: Operations.PlayKubeDownLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// PlayKube response
            ///
            /// - Remark: Generated from `#/paths//libpod/play/kube/delete(PlayKubeDownLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.playKubeResponseLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.playKubeResponseLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/play/kube/delete(PlayKubeDownLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove pod
    ///
    /// - Remark: HTTP `DELETE /libpod/pods/{name}`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)`.
    internal enum PodDeleteLibpod {
        internal static let id: Swift.String = "PodDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// force removal of a running pod by first stopping all containers, then removing all containers in the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: force removal of a running pod by first stopping all containers, then removing all containers in the pod
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.PodDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.PodDeleteLibpod.Input.Path,
                query: Operations.PodDeleteLibpod.Input.Query = .init(),
                headers: Operations.PodDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Rm pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podRmResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podRmResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/delete(PodDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Pod exists
    ///
    /// Check if a pod exists by name or ID
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)`.
    internal enum PodExistsLibpod {
        internal static let id: Swift.String = "PodExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodExistsLibpod.Input.Path,
                headers: Operations.PodExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// pod exists
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PodExistsLibpod.Output.NoContent)
            /// pod exists
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.PodExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/exists/get(PodExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)`.
    internal enum PodInspectLibpod {
        internal static let id: Swift.String = "PodInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodInspectLibpod.Input.Path,
                headers: Operations.PodInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Inspect pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podInspectResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podInspectResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/json/get(PodInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Kill a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/kill`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)`.
    internal enum PodKillLibpod {
        internal static let id: Swift.String = "PodKillLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/kill/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/kill/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodKillLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/kill/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// signal to be sent to pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/kill/POST/query/signal`.
                internal var signal: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - signal: signal to be sent to pod
                internal init(signal: Swift.String? = nil) {
                    self.signal = signal
                }
            }
            internal var query: Operations.PodKillLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/kill/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodKillLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodKillLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodKillLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.PodKillLibpod.Input.Path,
                query: Operations.PodKillLibpod.Input.Query = .init(),
                headers: Operations.PodKillLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Kill Pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podKillResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podKillResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Kill Pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podKillResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podKillResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/kill/post(PodKillLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Pause a pod
    ///
    /// Pause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/pause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)`.
    internal enum PodPauseLibpod {
        internal static let id: Swift.String = "PodPauseLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/pause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/pause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodPauseLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/pause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodPauseLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodPauseLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodPauseLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodPauseLibpod.Input.Path,
                headers: Operations.PodPauseLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Pause pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podPauseResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podPauseResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Pause pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podPauseResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podPauseResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/pause/post(PodPauseLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Restart a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/restart`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)`.
    internal enum PodRestartLibpod {
        internal static let id: Swift.String = "PodRestartLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/restart/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/restart/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodRestartLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/restart/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodRestartLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodRestartLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodRestartLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodRestartLibpod.Input.Path,
                headers: Operations.PodRestartLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Restart pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podRestartResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podRestartResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Restart pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podRestartResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podRestartResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/restart/post(PodRestartLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Start a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/start`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)`.
    internal enum PodStartLibpod {
        internal static let id: Swift.String = "PodStartLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/start/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/start/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodStartLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/start/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStartLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStartLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodStartLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodStartLibpod.Input.Path,
                headers: Operations.PodStartLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Start pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podStartResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podStartResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Pod already started
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.podAlreadyStartedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.podAlreadyStartedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Start pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podStartResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podStartResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/start/post(PodStartLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Stop a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/stop`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)`.
    internal enum PodStopLibpod {
        internal static let id: Swift.String = "PodStopLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/stop/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/stop/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodStopLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/stop/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// timeout
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/stop/POST/query/t`.
                internal var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: timeout
                internal init(t: Swift.Int? = nil) {
                    self.t = t
                }
            }
            internal var query: Operations.PodStopLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/stop/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStopLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStopLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodStopLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.PodStopLibpod.Input.Path,
                query: Operations.PodStopLibpod.Input.Query = .init(),
                headers: Operations.PodStopLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Stop pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podStopResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podStopResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Pod already stopped
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.podAlreadyStoppedError)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            internal var notModified: Components.Responses.podAlreadyStoppedError {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Stop pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podStopResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podStopResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/stop/post(PodStopLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List processes
    ///
    /// List processes running inside a pod
    ///
    /// - Remark: HTTP `GET /libpod/pods/{name}/top`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)`.
    internal enum PodTopLibpod {
        internal static let id: Swift.String = "PodTopLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Name of pod to query for processes
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Name of pod to query for processes
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodTopLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// when true, repeatedly stream the latest output (As of version 4.0)
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/query/stream`.
                internal var stream: Swift.Bool?
                /// if streaming, delay in seconds between updates. Must be >1. (As of version 4.0)
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/query/delay`.
                internal var delay: Swift.Int?
                /// arguments to pass to ps such as aux.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/query/ps_args`.
                internal var ps_args: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - stream: when true, repeatedly stream the latest output (As of version 4.0)
                ///   - delay: if streaming, delay in seconds between updates. Must be >1. (As of version 4.0)
                ///   - ps_args: arguments to pass to ps such as aux.
                internal init(
                    stream: Swift.Bool? = nil,
                    delay: Swift.Int? = nil,
                    ps_args: Swift.String? = nil
                ) {
                    self.stream = stream
                    self.delay = delay
                    self.ps_args = ps_args
                }
            }
            internal var query: Operations.PodTopLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/top/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodTopLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodTopLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodTopLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.PodTopLibpod.Input.Path,
                query: Operations.PodTopLibpod.Input.Query = .init(),
                headers: Operations.PodTopLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List processes in pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podTopResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podTopResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/top/get(PodTopLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Unpause a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/{name}/unpause`.
    /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)`.
    internal enum PodUnpauseLibpod {
        internal static let id: Swift.String = "PodUnpauseLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/unpause/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the pod
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/{name}/unpause/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the pod
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.PodUnpauseLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/pods/{name}/unpause/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodUnpauseLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodUnpauseLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodUnpauseLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.PodUnpauseLibpod.Input.Path,
                headers: Operations.PodUnpauseLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Unpause pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podUnpauseResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podUnpauseResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unpause pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.podUnpauseResponse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.podUnpauseResponse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/{name}/unpause/post(PodUnpauseLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a pod
    ///
    /// - Remark: HTTP `POST /libpod/pods/create`.
    /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)`.
    internal enum PodCreateLibpod {
        internal static let id: Swift.String = "PodCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/pods/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/pods/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PodSpecGenerator)
                /// - Remark: Generated from `#/paths/libpod/pods/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.PodCreateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.PodCreateLibpod.Input.Headers = .init(),
                body: Operations.PodCreateLibpod.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/pods/create/POST/responses/201/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/pods/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IDResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.IDResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.PodCreateLibpod.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.PodCreateLibpod.Output.Created.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PodCreateLibpod.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.PodCreateLibpod.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/pods/create/POST/responses/409/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/libpod/pods/create/POST/responses/409/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.PodCreateLibpod.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.PodCreateLibpod.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// status conflict
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PodCreateLibpod.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.PodCreateLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/create/post(PodCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/json`.
    /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)`.
    internal enum PodListLibpod {
        internal static let id: Swift.String = "PodListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a map[string][]string) to process on the pods list. Available filters:
                ///   - `id=<pod-id>` Matches all of pod id.
                ///   - `label=<key>` or `label=<key>:<value>` Matches pods based on the presence of a label alone or a label and a value.
                ///   - `name=<pod-name>` Matches all of pod name.
                ///   - `until=<timestamp>` List pods created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `status=<pod-status>` Pod's status: `stopped`, `running`, `paused`, `exited`, `dead`, `created`, `degraded`.
                ///   - `network=<pod-network>` Name or full ID of network.
                ///   - `ctr-names=<pod-ctr-names>` Container name within the pod.
                ///   - `ctr-ids=<pod-ctr-ids>` Container ID within the pod.
                ///   - `ctr-status=<pod-ctr-status>` Container status within the pod.
                ///   - `ctr-number=<pod-ctr-number>` Number of containers in the pod.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a map[string][]string) to process on the pods list. Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.PodListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.PodListLibpod.Input.Query = .init(),
                headers: Operations.PodListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// List pods
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podsListResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podsListResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/json/get(PodListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune unused pods
    ///
    /// - Remark: HTTP `POST /libpod/pods/prune`.
    /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)`.
    internal enum PodPruneLibpod {
        internal static let id: Swift.String = "PodPruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodPruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodPruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodPruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.PodPruneLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Prune pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podPruneResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podPruneResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// pod already exists
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PodPruneLibpod.Output.Conflict)
            /// pod already exists
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.PodPruneLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/prune/post(PodPruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Statistics for one or more pods
    ///
    /// Display a live stream of resource usage statistics for the containers in one or more pods
    ///
    /// - Remark: HTTP `GET /libpod/pods/stats`.
    /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)`.
    internal enum PodStatsAllLibpod {
        internal static let id: Swift.String = "PodStatsAllLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/pods/stats/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Provide statistics for all running pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/stats/GET/query/all`.
                internal var all: Swift.Bool?
                /// Names or IDs of pods.
                ///
                /// - Remark: Generated from `#/paths/libpod/pods/stats/GET/query/namesOrIDs`.
                internal var namesOrIDs: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Provide statistics for all running pods.
                ///   - namesOrIDs: Names or IDs of pods.
                internal init(
                    all: Swift.Bool? = nil,
                    namesOrIDs: [Swift.String]? = nil
                ) {
                    self.all = all
                    self.namesOrIDs = namesOrIDs
                }
            }
            internal var query: Operations.PodStatsAllLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/pods/stats/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStatsAllLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PodStatsAllLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.PodStatsAllLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.PodStatsAllLibpod.Input.Query = .init(),
                headers: Operations.PodStatsAllLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Pod Statistics
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.podStatsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.podStatsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such pod
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.podNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.podNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/pods/stats/get(PodStatsAllLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /libpod/secrets/{name}`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)`.
    internal enum SecretDeleteLibpod {
        internal static let id: Swift.String = "SecretDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the secret
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the secret
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.SecretDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// Remove all secrets
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/{name}/DELETE/query/all`.
                internal var all: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Remove all secrets
                internal init(all: Swift.Bool? = nil) {
                    self.all = all
                }
            }
            internal var query: Operations.SecretDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.SecretDeleteLibpod.Input.Path,
                query: Operations.SecretDeleteLibpod.Input.Query = .init(),
                headers: Operations.SecretDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.SecretDeleteLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.SecretDeleteLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such secret
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NoSuchSecret)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NoSuchSecret {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/delete(SecretDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Secret exists
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)`.
    internal enum SecretExistsLibpod {
        internal static let id: Swift.String = "SecretExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the secret
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the secret
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.SecretExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.SecretExistsLibpod.Input.Path,
                headers: Operations.SecretExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// secret exists
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.SecretExistsLibpod.Output.NoContent)
            /// secret exists
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.SecretExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such secret
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NoSuchSecret)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NoSuchSecret {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/exists/get(SecretExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /libpod/secrets/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)`.
    internal enum SecretInspectLibpod {
        internal static let id: Swift.String = "SecretInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the secret
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the secret
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.SecretInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Display Secret
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/{name}/json/GET/query/showsecret`.
                internal var showsecret: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - showsecret: Display Secret
                internal init(showsecret: Swift.Bool? = nil) {
                    self.showsecret = showsecret
                }
            }
            internal var query: Operations.SecretInspectLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/secrets/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.SecretInspectLibpod.Input.Path,
                query: Operations.SecretInspectLibpod.Input.Query = .init(),
                headers: Operations.SecretInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret inspect response
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SecretInspectResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.SecretInspectResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such secret
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NoSuchSecret)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NoSuchSecret {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/{name}/json/get(SecretInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /libpod/secrets/create`.
    /// - Remark: Generated from `#/paths//libpod/secrets/create/post(SecretCreateLibpod)`.
    internal enum SecretCreateLibpod {
        internal static let id: Swift.String = "SecretCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// User-defined name of the secret.
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/query/name`.
                internal var name: Swift.String
                /// Secret driver
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/query/driver`.
                internal var driver: Swift.String?
                /// Secret driver options
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/query/driveropts`.
                internal var driveropts: Swift.String?
                /// Labels on the secret
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/query/labels`.
                internal var labels: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: User-defined name of the secret.
                ///   - driver: Secret driver
                ///   - driveropts: Secret driver options
                ///   - labels: Labels on the secret
                internal init(
                    name: Swift.String,
                    driver: Swift.String? = nil,
                    driveropts: Swift.String? = nil,
                    labels: Swift.String? = nil
                ) {
                    self.name = name
                    self.driver = driver
                    self.driveropts = driveropts
                    self.labels = labels
                }
            }
            internal var query: Operations.SecretCreateLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/requestBody/content/application\/json`.
                case json(Swift.String)
                /// - Remark: Generated from `#/paths/libpod/secrets/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.SecretCreateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.SecretCreateLibpod.Input.Query,
                headers: Operations.SecretCreateLibpod.Input.Headers = .init(),
                body: Operations.SecretCreateLibpod.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret create response
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/create/post(SecretCreateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.SecretCreateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.SecretCreateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/create/post(SecretCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /libpod/secrets/json`.
    /// - Remark: Generated from `#/paths//libpod/secrets/json/get(SecretListLibpod)`.
    internal enum SecretListLibpod {
        internal static let id: Swift.String = "SecretListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/secrets/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Currently available filters:
                ///   - `name=[name]` Matches secrets name (accepts regex).
                ///   - `id=[id]` Matches for full or partial ID.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/secrets/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Currently available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.SecretListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/secrets/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.SecretListLibpod.Input.Query = .init(),
                headers: Operations.SecretListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret list response
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/json/get(SecretListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SecretListResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.SecretListResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/secrets/json/get(SecretListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Performs consistency checks on storage, optionally removing items which fail checks
    ///
    /// - Remark: HTTP `POST /libpod/system/check`.
    /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)`.
    internal enum SystemCheckLibpod {
        internal static let id: Swift.String = "SystemCheckLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/system/check/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Skip time-consuming checks
                ///
                /// - Remark: Generated from `#/paths/libpod/system/check/POST/query/quick`.
                internal var quick: Swift.Bool?
                /// Remove inconsistent images
                ///
                /// - Remark: Generated from `#/paths/libpod/system/check/POST/query/repair`.
                internal var repair: Swift.Bool?
                /// Remove inconsistent containers and images
                ///
                /// - Remark: Generated from `#/paths/libpod/system/check/POST/query/repair_lossy`.
                internal var repair_lossy: Swift.Bool?
                /// Maximum allowed age of unreferenced layers
                ///
                /// - Remark: Generated from `#/paths/libpod/system/check/POST/query/unreferenced_layer_max_age`.
                internal var unreferenced_layer_max_age: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - quick: Skip time-consuming checks
                ///   - repair: Remove inconsistent images
                ///   - repair_lossy: Remove inconsistent containers and images
                ///   - unreferenced_layer_max_age: Maximum allowed age of unreferenced layers
                internal init(
                    quick: Swift.Bool? = nil,
                    repair: Swift.Bool? = nil,
                    repair_lossy: Swift.Bool? = nil,
                    unreferenced_layer_max_age: Swift.String? = nil
                ) {
                    self.quick = quick
                    self.repair = repair
                    self.repair_lossy = repair_lossy
                    self.unreferenced_layer_max_age = unreferenced_layer_max_age
                }
            }
            internal var query: Operations.SystemCheckLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/system/check/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemCheckLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemCheckLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemCheckLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.SystemCheckLibpod.Input.Query = .init(),
                headers: Operations.SystemCheckLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Check
            ///
            /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.systemCheckResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.systemCheckResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/system/check/post(SystemCheckLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /libpod/system/df`.
    /// - Remark: Generated from `#/paths//libpod/system/df/get(SystemDataUsageLibpod)`.
    internal enum SystemDataUsageLibpod {
        internal static let id: Swift.String = "SystemDataUsageLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/system/df/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsageLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsageLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemDataUsageLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemDataUsageLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Disk usage
            ///
            /// - Remark: Generated from `#/paths//libpod/system/df/get(SystemDataUsageLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.systemDiskUsage)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.systemDiskUsage {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/system/df/get(SystemDataUsageLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune unused data
    ///
    /// - Remark: HTTP `POST /libpod/system/prune`.
    /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)`.
    internal enum SystemPruneLibpod {
        internal static let id: Swift.String = "SystemPruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/system/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemPruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemPruneLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// System Prune results
            ///
            /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.systemPruneResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.systemPruneResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/system/prune/post(SystemPruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /libpod/version`.
    /// - Remark: Generated from `#/paths//libpod/version/get(SystemVersionLibpod)`.
    internal enum SystemVersionLibpod {
        internal static let id: Swift.String = "SystemVersionLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/version/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersionLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersionLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemVersionLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemVersionLibpod.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Version
            ///
            /// - Remark: Generated from `#/paths//libpod/version/get(SystemVersionLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.versionResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.versionResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /libpod/volumes/{name}`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)`.
    internal enum VolumeDeleteLibpod {
        internal static let id: Swift.String = "VolumeDeleteLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the volume
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the volume
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.VolumeDeleteLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// force removal
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: force removal
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.VolumeDeleteLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDeleteLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDeleteLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeDeleteLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.VolumeDeleteLibpod.Input.Path,
                query: Operations.VolumeDeleteLibpod.Input.Query = .init(),
                headers: Operations.VolumeDeleteLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.VolumeDeleteLibpod.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.VolumeDeleteLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such volume
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.volumeNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.volumeNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// Volume is in use and cannot be removed
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.VolumeDeleteLibpod.Output.Conflict)
            /// Volume is in use and cannot be removed
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.VolumeDeleteLibpod.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/delete(VolumeDeleteLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Volume exists
    ///
    /// Check if a volume exists
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/exists`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)`.
    internal enum VolumeExistsLibpod {
        internal static let id: Swift.String = "VolumeExistsLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/exists/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the volume
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/{name}/exists/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the volume
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.VolumeExistsLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/exists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeExistsLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeExistsLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeExistsLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.VolumeExistsLibpod.Input.Path,
                headers: Operations.VolumeExistsLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// volume exists
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.VolumeExistsLibpod.Output.NoContent)
            /// volume exists
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.VolumeExistsLibpod.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such volume
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.volumeNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.volumeNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/exists/get(VolumeExistsLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /libpod/volumes/{name}/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)`.
    internal enum VolumeInspectLibpod {
        internal static let id: Swift.String = "VolumeInspectLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/json/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the volume
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/{name}/json/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the volume
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.VolumeInspectLibpod.Input.Path
            /// - Remark: Generated from `#/paths/libpod/volumes/{name}/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspectLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspectLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeInspectLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.VolumeInspectLibpod.Input.Path,
                headers: Operations.VolumeInspectLibpod.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume details
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumeCreateResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumeCreateResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such volume
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.volumeNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.volumeNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/{name}/json/get(VolumeInspectLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /libpod/volumes/create`.
    /// - Remark: Generated from `#/paths//libpod/volumes/create/post(VolumeCreateLibpod)`.
    internal enum VolumeCreateLibpod {
        internal static let id: Swift.String = "VolumeCreateLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreateLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreateLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeCreateLibpod.Input.Headers
            /// - Remark: Generated from `#/paths/libpod/volumes/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/libpod/volumes/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VolumeCreateOptions)
                /// - Remark: Generated from `#/paths/libpod/volumes/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.VolumeCreateLibpod.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.VolumeCreateLibpod.Input.Headers = .init(),
                body: Operations.VolumeCreateLibpod.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume details
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/create/post(VolumeCreateLibpod)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.volumeCreateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.volumeCreateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/create/post(VolumeCreateLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List volumes
    ///
    /// Returns a list of volumes
    ///
    /// - Remark: HTTP `GET /libpod/volumes/json`.
    /// - Remark: Generated from `#/paths//libpod/volumes/json/get(VolumeListLibpod)`.
    internal enum VolumeListLibpod {
        internal static let id: Swift.String = "VolumeListLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/json/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a map[string][]string) to process on the volumes list. Available filters:
                ///   - driver=<volume-driver-name> Matches volumes based on their driver.
                ///   - label=<key> or label=<key>:<value> Matches volumes based on the presence of a label alone or a label and a value.
                ///   - name=<volume-name> Matches all of volume name.
                ///   - opt=<driver-option> Matches a storage driver options
                ///   - `until=<timestamp>` List volumes created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/json/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a map[string][]string) to process on the volumes list. Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.VolumeListLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/volumes/json/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeListLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeListLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeListLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.VolumeListLibpod.Input.Query = .init(),
                headers: Operations.VolumeListLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume list
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/json/get(VolumeListLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumeListLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumeListLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/json/get(VolumeListLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /libpod/volumes/prune`.
    /// - Remark: Generated from `#/paths//libpod/volumes/prune/post(VolumePruneLibpod)`.
    internal enum VolumePruneLibpod {
        internal static let id: Swift.String = "VolumePruneLibpod"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/libpod/volumes/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of filters (a map[string][]string) to match volumes against before pruning.
                /// Available filters:
                ///   - `until=<timestamp>` Prune volumes created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/libpod/volumes/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of filters (a map[string][]string) to match volumes against before pruning.
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.VolumePruneLibpod.Input.Query
            /// - Remark: Generated from `#/paths/libpod/volumes/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePruneLibpod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePruneLibpod.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumePruneLibpod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.VolumePruneLibpod.Input.Query = .init(),
                headers: Operations.VolumePruneLibpod.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume Prune
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/prune/post(VolumePruneLibpod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumePruneLibpod)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumePruneLibpod {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//libpod/volumes/prune/post(VolumePruneLibpod)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List networks
    ///
    /// Display summary of network configurations
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    internal enum NetworkList {
        internal static let id: Swift.String = "NetworkList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to process on the network list. Currently available filters:
                ///   - `name=[name]` Matches network name (accepts regex).
                ///   - `id=[id]` Matches for full or partial ID.
                ///   - `driver=[driver]` Only bridge is supported.
                ///   - `label=[key]` or `label=[key=value]` Matches networks based on the presence of a label alone or a label and a value.
                ///
                ///
                /// - Remark: Generated from `#/paths/networks/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to process on the network list. Currently available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.NetworkList.Input.Query
            /// - Remark: Generated from `#/paths/networks/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.NetworkList.Input.Query = .init(),
                headers: Operations.NetworkList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network list
            ///
            /// - Remark: Generated from `#/paths//networks/get(NetworkList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkListCompat)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkListCompat {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/get(NetworkList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect a network
    ///
    /// Display low level configuration network
    ///
    /// - Remark: HTTP `GET /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)`.
    internal enum NetworkInspect {
        internal static let id: Swift.String = "NetworkInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{name}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkInspect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{name}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Detailed inspect output for troubleshooting
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/GET/query/verbose`.
                internal var verbose: Swift.Bool?
                /// Filter the network by scope (swarm, global, or local)
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/GET/query/scope`.
                internal var scope: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - verbose: Detailed inspect output for troubleshooting
                ///   - scope: Filter the network by scope (swarm, global, or local)
                internal init(
                    verbose: Swift.Bool? = nil,
                    scope: Swift.String? = nil
                ) {
                    self.verbose = verbose
                    self.scope = scope
                }
            }
            internal var query: Operations.NetworkInspect.Input.Query
            /// - Remark: Generated from `#/paths/networks/{name}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.NetworkInspect.Input.Path,
                query: Operations.NetworkInspect.Input.Query = .init(),
                headers: Operations.NetworkInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Network inspect
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.networkInspectCompat)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.networkInspectCompat {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/get(NetworkInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove a network
    ///
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{name}`.
    /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)`.
    internal enum NetworkDelete {
        internal static let id: Swift.String = "NetworkDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkDelete.Input.Path
            /// - Remark: Generated from `#/paths/networks/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.NetworkDelete.Input.Path,
                headers: Operations.NetworkDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.NetworkDelete.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.NetworkDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such network
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.networkNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.networkNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/delete(NetworkDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Connect container to network
    ///
    /// Connect a container to a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/connect`.
    /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)`.
    internal enum NetworkConnect {
        internal static let id: Swift.String = "NetworkConnect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkConnect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkConnect.Input.Headers
            /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.networkConnectRequest)
                /// - Remark: Generated from `#/paths/networks/{name}/connect/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.NetworkConnect.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.NetworkConnect.Input.Path,
                headers: Operations.NetworkConnect.Input.Headers = .init(),
                body: Operations.NetworkConnect.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkConnect.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkConnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Network is already connected and container is running or transitioning to the running state ('initialized')
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.networkConnectedError)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.networkConnectedError {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/connect/post(NetworkConnect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Disconnect container from network
    ///
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{name}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)`.
    internal enum NetworkDisconnect {
        internal static let id: Swift.String = "NetworkDisconnect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{name}/disconnect/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// the name of the network
                ///
                /// - Remark: Generated from `#/paths/networks/{name}/disconnect/POST/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name of the network
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.NetworkDisconnect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{name}/disconnect/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkDisconnect.Input.Headers
            internal var body: Components.RequestBodies.networkDisconnectRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.NetworkDisconnect.Input.Path,
                headers: Operations.NetworkDisconnect.Input.Headers = .init(),
                body: Components.RequestBodies.networkDisconnectRequest? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkDisconnect.Output.Ok)
            /// OK
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkDisconnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/{name}/disconnect/post(NetworkDisconnect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create network
    ///
    /// Create a network configuration
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    internal enum NetworkCreate {
        internal static let id: Swift.String = "NetworkCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkCreate.Input.Headers
            /// - Remark: Generated from `#/paths/networks/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.networkCreate)
                /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.NetworkCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.NetworkCreate.Input.Headers = .init(),
                body: Operations.NetworkCreate.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content/json/Id`.
                        internal var Id: Swift.String?
                        /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content/json/Warning`.
                        internal var Warning: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - Id:
                        ///   - Warning:
                        internal init(
                            Id: Swift.String? = nil,
                            Warning: Swift.String? = nil
                        ) {
                            self.Id = Id
                            self.Warning = Warning
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case Id
                            case Warning
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content/application\/json`.
                    case json(Operations.NetworkCreate.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.NetworkCreate.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.NetworkCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.NetworkCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// network created
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.NetworkCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.NetworkCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad parameter in request
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.badParamError)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.badParamError {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Delete unused networks
    ///
    /// Remove networks that do not have containers
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    internal enum NetworkPrune {
        internal static let id: Swift.String = "NetworkPrune"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a map[string][]string).
                /// Available filters:
                ///   - `until=<timestamp>` Prune networks created before this timestamp. The <timestamp> can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/networks/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a map[string][]string).
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.NetworkPrune.Input.Query
            /// - Remark: Generated from `#/paths/networks/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.NetworkPrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.NetworkPrune.Input.Query = .init(),
                headers: Operations.NetworkPrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/json/NetworksDeleted`.
                        internal var NetworksDeleted: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - NetworksDeleted:
                        internal init(NetworksDeleted: [Swift.String]? = nil) {
                            self.NetworksDeleted = NetworksDeleted
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case NetworksDeleted
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.NetworkPrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.NetworkPrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.NetworkPrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.NetworkPrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkPrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.NetworkPrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List secrets
    ///
    /// Returns a list of secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    internal enum SecretList {
        internal static let id: Swift.String = "SecretList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Currently available filters:
                ///   - `name=[name]` Matches secrets name (accepts regex).
                ///   - `id=[id]` Matches for full or partial ID.
                ///
                ///
                /// - Remark: Generated from `#/paths/secrets/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Currently available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.SecretList.Input.Query
            /// - Remark: Generated from `#/paths/secrets/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.SecretList.Input.Query = .init(),
                headers: Operations.SecretList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret list response
            ///
            /// - Remark: Generated from `#/paths//secrets/get(SecretList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SecretListCompatResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.SecretListCompatResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//secrets/get(SecretList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect secret
    ///
    /// - Remark: HTTP `GET /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)`.
    internal enum SecretInspect {
        internal static let id: Swift.String = "SecretInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/{name}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the secret
                ///
                /// - Remark: Generated from `#/paths/secrets/{name}/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the secret
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.SecretInspect.Input.Path
            /// - Remark: Generated from `#/paths/secrets/{name}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.SecretInspect.Input.Path,
                headers: Operations.SecretInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret inspect compat
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SecretInspectCompatResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.SecretInspectCompatResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// No such secret
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NoSuchSecret)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NoSuchSecret {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/get(SecretInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{name}`.
    /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)`.
    internal enum SecretDelete {
        internal static let id: Swift.String = "SecretDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the secret
                ///
                /// - Remark: Generated from `#/paths/secrets/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the secret
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.SecretDelete.Input.Path
            /// - Remark: Generated from `#/paths/secrets/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.SecretDelete.Input.Path,
                headers: Operations.SecretDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.SecretDelete.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.SecretDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such secret
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NoSuchSecret)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NoSuchSecret {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//secrets/{name}/delete(SecretDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    internal enum SecretCreate {
        internal static let id: Swift.String = "SecretCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SecretCreate.Input.Headers
            /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SecretCreate)
                /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.SecretCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.SecretCreate.Input.Headers = .init(),
                body: Operations.SecretCreate.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Secret create response
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.SecretCreateResponse)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.SecretCreateResponse {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Secret in use
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.SecretInUse)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.SecretInUse {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Show disk usage
    ///
    /// Return information about disk usage for containers, images, and volumes
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    internal enum SystemDataUsage {
        internal static let id: Swift.String = "SystemDataUsage"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/df/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemDataUsage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemDataUsage.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Disk usage
            ///
            /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.systemDiskUsage)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.systemDiskUsage {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Component Version information
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    internal enum SystemVersion {
        internal static let id: Swift.String = "SystemVersion"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/version/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.SystemVersion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.SystemVersion.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Version
            ///
            /// - Remark: Generated from `#/paths//version/get(SystemVersion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.versionResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.versionResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// List volumes
    ///
    /// Returns a list of volume
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    internal enum VolumeList {
        internal static let id: Swift.String = "VolumeList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a map[string][]string) to process on the volumes list. Available filters:
                ///   - driver=<volume-driver-name> Matches volumes based on their driver.
                ///   - label=<key> or label=<key>:<value> Matches volumes based on the presence of a label alone or a label and a value.
                ///   - name=<volume-name> Matches all of volume name.
                ///   - `until=<timestamp>` List volumes created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///
                /// Note:
                ///   The boolean `dangling` filter is not yet implemented for this endpoint.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/GET/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a map[string][]string) to process on the volumes list. Available filters:
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.VolumeList.Input.Query
            /// - Remark: Generated from `#/paths/volumes/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.VolumeList.Input.Query = .init(),
                headers: Operations.VolumeList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume List
            ///
            /// - Remark: Generated from `#/paths//volumes/get(VolumeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumeList)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumeList {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//volumes/get(VolumeList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Inspect volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    internal enum VolumeInspect {
        internal static let id: Swift.String = "VolumeInspect"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/{name}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the volume
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the volume
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.VolumeInspect.Input.Path
            /// - Remark: Generated from `#/paths/volumes/{name}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.VolumeInspect.Input.Path,
                headers: Operations.VolumeInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// This response definition is used for both the create and inspect endpoints
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumeInspect)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumeInspect {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Remove volume
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    internal enum VolumeDelete {
        internal static let id: Swift.String = "VolumeDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// the name or ID of the volume
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: the name or ID of the volume
                internal init(name: Swift.String) {
                    self.name = name
                }
            }
            internal var path: Operations.VolumeDelete.Input.Path
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// Force removal of the volume. This actually only causes errors due
                /// to the names volume not being found to be suppressed, which is the
                /// behaviour Docker implements.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/query/force`.
                internal var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Force removal of the volume. This actually only causes errors due
                internal init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            internal var query: Operations.VolumeDelete.Input.Query
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.VolumeDelete.Input.Path,
                query: Operations.VolumeDelete.Input.Query = .init(),
                headers: Operations.VolumeDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.VolumeDelete.Output.NoContent)
            /// no error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.VolumeDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// No such volume
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.volumeNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.volumeNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            internal struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                internal init() {}
            }
            /// Volume is in use and cannot be removed
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.VolumeDelete.Output.Conflict)
            /// Volume is in use and cannot be removed
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            internal static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Operations.VolumeDelete.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    internal enum VolumeCreate {
        internal static let id: Swift.String = "VolumeCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumeCreate.Input.Headers
            /// - Remark: Generated from `#/paths/volumes/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.volumeCreate)
                /// - Remark: Generated from `#/paths/volumes/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.VolumeCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.VolumeCreate.Input.Headers = .init(),
                body: Operations.VolumeCreate.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            /// This response definition is used for both the create and inspect endpoints
            ///
            /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.volumeInspect)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Components.Responses.volumeInspect {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
    /// Prune volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    internal enum VolumePrune {
        internal static let id: Swift.String = "VolumePrune"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/prune/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// JSON encoded value of filters (a map[string][]string) to match volumes against before pruning.
                /// Available filters:
                ///   - `until=<timestamp>` Prune volumes created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machineâ€™s time.
                ///   - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/prune/POST/query/filters`.
                internal var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of filters (a map[string][]string) to match volumes against before pruning.
                internal init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            internal var query: Operations.VolumePrune.Input.Query
            /// - Remark: Generated from `#/paths/volumes/prune/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.VolumePrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.VolumePrune.Input.Query = .init(),
                headers: Operations.VolumePrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            /// Volume prune
            ///
            /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.volumePruneResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Components.Responses.volumePruneResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.internalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case binary
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/octet-stream":
                    self = .binary
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .binary:
                    return "application/octet-stream"
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .binary,
                    .plainText
                ]
            }
        }
    }
}
